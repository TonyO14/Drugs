
Hope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e40  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003008  08003008  00004008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003018  08003018  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003018  08003018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003020  08003020  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003020  08003020  00004020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003024  08003024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003028  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08003038  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003038  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075b7  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001890  00000000  00000000  0000c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000050d  00000000  00000000  0000e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002115e  00000000  00000000  0000ea4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085f5  00000000  00000000  0002fbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8cd2  00000000  00000000  000381a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100e72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bb8  00000000  00000000  00100eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00102a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002ff0 	.word	0x08002ff0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08002ff0 	.word	0x08002ff0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__gedf2>:
 8000580:	f04f 3cff 	mov.w	ip, #4294967295
 8000584:	e006      	b.n	8000594 <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__ledf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	e002      	b.n	8000594 <__cmpdf2+0x4>
 800058e:	bf00      	nop

08000590 <__cmpdf2>:
 8000590:	f04f 0c01 	mov.w	ip, #1
 8000594:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800059c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005a4:	bf18      	it	ne
 80005a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005aa:	d01b      	beq.n	80005e4 <__cmpdf2+0x54>
 80005ac:	b001      	add	sp, #4
 80005ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005b2:	bf0c      	ite	eq
 80005b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b8:	ea91 0f03 	teqne	r1, r3
 80005bc:	bf02      	ittt	eq
 80005be:	ea90 0f02 	teqeq	r0, r2
 80005c2:	2000      	moveq	r0, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	f110 0f00 	cmn.w	r0, #0
 80005ca:	ea91 0f03 	teq	r1, r3
 80005ce:	bf58      	it	pl
 80005d0:	4299      	cmppl	r1, r3
 80005d2:	bf08      	it	eq
 80005d4:	4290      	cmpeq	r0, r2
 80005d6:	bf2c      	ite	cs
 80005d8:	17d8      	asrcs	r0, r3, #31
 80005da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005de:	f040 0001 	orr.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ec:	d102      	bne.n	80005f4 <__cmpdf2+0x64>
 80005ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005f2:	d107      	bne.n	8000604 <__cmpdf2+0x74>
 80005f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d1d6      	bne.n	80005ac <__cmpdf2+0x1c>
 80005fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000602:	d0d3      	beq.n	80005ac <__cmpdf2+0x1c>
 8000604:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <__aeabi_cdrcmple>:
 800060c:	4684      	mov	ip, r0
 800060e:	4610      	mov	r0, r2
 8000610:	4662      	mov	r2, ip
 8000612:	468c      	mov	ip, r1
 8000614:	4619      	mov	r1, r3
 8000616:	4663      	mov	r3, ip
 8000618:	e000      	b.n	800061c <__aeabi_cdcmpeq>
 800061a:	bf00      	nop

0800061c <__aeabi_cdcmpeq>:
 800061c:	b501      	push	{r0, lr}
 800061e:	f7ff ffb7 	bl	8000590 <__cmpdf2>
 8000622:	2800      	cmp	r0, #0
 8000624:	bf48      	it	mi
 8000626:	f110 0f00 	cmnmi.w	r0, #0
 800062a:	bd01      	pop	{r0, pc}

0800062c <__aeabi_dcmpeq>:
 800062c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000630:	f7ff fff4 	bl	800061c <__aeabi_cdcmpeq>
 8000634:	bf0c      	ite	eq
 8000636:	2001      	moveq	r0, #1
 8000638:	2000      	movne	r0, #0
 800063a:	f85d fb08 	ldr.w	pc, [sp], #8
 800063e:	bf00      	nop

08000640 <__aeabi_dcmplt>:
 8000640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000644:	f7ff ffea 	bl	800061c <__aeabi_cdcmpeq>
 8000648:	bf34      	ite	cc
 800064a:	2001      	movcc	r0, #1
 800064c:	2000      	movcs	r0, #0
 800064e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000652:	bf00      	nop

08000654 <__aeabi_dcmple>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff ffe0 	bl	800061c <__aeabi_cdcmpeq>
 800065c:	bf94      	ite	ls
 800065e:	2001      	movls	r0, #1
 8000660:	2000      	movhi	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmpge>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffce 	bl	800060c <__aeabi_cdrcmple>
 8000670:	bf94      	ite	ls
 8000672:	2001      	movls	r0, #1
 8000674:	2000      	movhi	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmpgt>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffc4 	bl	800060c <__aeabi_cdrcmple>
 8000684:	bf34      	ite	cc
 8000686:	2001      	movcc	r0, #1
 8000688:	2000      	movcs	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_uldivmod>:
 8000690:	b953      	cbnz	r3, 80006a8 <__aeabi_uldivmod+0x18>
 8000692:	b94a      	cbnz	r2, 80006a8 <__aeabi_uldivmod+0x18>
 8000694:	2900      	cmp	r1, #0
 8000696:	bf08      	it	eq
 8000698:	2800      	cmpeq	r0, #0
 800069a:	bf1c      	itt	ne
 800069c:	f04f 31ff 	movne.w	r1, #4294967295
 80006a0:	f04f 30ff 	movne.w	r0, #4294967295
 80006a4:	f000 b988 	b.w	80009b8 <__aeabi_idiv0>
 80006a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b0:	f000 f806 	bl	80006c0 <__udivmoddi4>
 80006b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006bc:	b004      	add	sp, #16
 80006be:	4770      	bx	lr

080006c0 <__udivmoddi4>:
 80006c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c4:	9d08      	ldr	r5, [sp, #32]
 80006c6:	468e      	mov	lr, r1
 80006c8:	4604      	mov	r4, r0
 80006ca:	4688      	mov	r8, r1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d14a      	bne.n	8000766 <__udivmoddi4+0xa6>
 80006d0:	428a      	cmp	r2, r1
 80006d2:	4617      	mov	r7, r2
 80006d4:	d962      	bls.n	800079c <__udivmoddi4+0xdc>
 80006d6:	fab2 f682 	clz	r6, r2
 80006da:	b14e      	cbz	r6, 80006f0 <__udivmoddi4+0x30>
 80006dc:	f1c6 0320 	rsb	r3, r6, #32
 80006e0:	fa01 f806 	lsl.w	r8, r1, r6
 80006e4:	fa20 f303 	lsr.w	r3, r0, r3
 80006e8:	40b7      	lsls	r7, r6
 80006ea:	ea43 0808 	orr.w	r8, r3, r8
 80006ee:	40b4      	lsls	r4, r6
 80006f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006f4:	fa1f fc87 	uxth.w	ip, r7
 80006f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80006fc:	0c23      	lsrs	r3, r4, #16
 80006fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000702:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000706:	fb01 f20c 	mul.w	r2, r1, ip
 800070a:	429a      	cmp	r2, r3
 800070c:	d909      	bls.n	8000722 <__udivmoddi4+0x62>
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	f101 30ff 	add.w	r0, r1, #4294967295
 8000714:	f080 80ea 	bcs.w	80008ec <__udivmoddi4+0x22c>
 8000718:	429a      	cmp	r2, r3
 800071a:	f240 80e7 	bls.w	80008ec <__udivmoddi4+0x22c>
 800071e:	3902      	subs	r1, #2
 8000720:	443b      	add	r3, r7
 8000722:	1a9a      	subs	r2, r3, r2
 8000724:	b2a3      	uxth	r3, r4
 8000726:	fbb2 f0fe 	udiv	r0, r2, lr
 800072a:	fb0e 2210 	mls	r2, lr, r0, r2
 800072e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000732:	fb00 fc0c 	mul.w	ip, r0, ip
 8000736:	459c      	cmp	ip, r3
 8000738:	d909      	bls.n	800074e <__udivmoddi4+0x8e>
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000740:	f080 80d6 	bcs.w	80008f0 <__udivmoddi4+0x230>
 8000744:	459c      	cmp	ip, r3
 8000746:	f240 80d3 	bls.w	80008f0 <__udivmoddi4+0x230>
 800074a:	443b      	add	r3, r7
 800074c:	3802      	subs	r0, #2
 800074e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000752:	eba3 030c 	sub.w	r3, r3, ip
 8000756:	2100      	movs	r1, #0
 8000758:	b11d      	cbz	r5, 8000762 <__udivmoddi4+0xa2>
 800075a:	40f3      	lsrs	r3, r6
 800075c:	2200      	movs	r2, #0
 800075e:	e9c5 3200 	strd	r3, r2, [r5]
 8000762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000766:	428b      	cmp	r3, r1
 8000768:	d905      	bls.n	8000776 <__udivmoddi4+0xb6>
 800076a:	b10d      	cbz	r5, 8000770 <__udivmoddi4+0xb0>
 800076c:	e9c5 0100 	strd	r0, r1, [r5]
 8000770:	2100      	movs	r1, #0
 8000772:	4608      	mov	r0, r1
 8000774:	e7f5      	b.n	8000762 <__udivmoddi4+0xa2>
 8000776:	fab3 f183 	clz	r1, r3
 800077a:	2900      	cmp	r1, #0
 800077c:	d146      	bne.n	800080c <__udivmoddi4+0x14c>
 800077e:	4573      	cmp	r3, lr
 8000780:	d302      	bcc.n	8000788 <__udivmoddi4+0xc8>
 8000782:	4282      	cmp	r2, r0
 8000784:	f200 8105 	bhi.w	8000992 <__udivmoddi4+0x2d2>
 8000788:	1a84      	subs	r4, r0, r2
 800078a:	eb6e 0203 	sbc.w	r2, lr, r3
 800078e:	2001      	movs	r0, #1
 8000790:	4690      	mov	r8, r2
 8000792:	2d00      	cmp	r5, #0
 8000794:	d0e5      	beq.n	8000762 <__udivmoddi4+0xa2>
 8000796:	e9c5 4800 	strd	r4, r8, [r5]
 800079a:	e7e2      	b.n	8000762 <__udivmoddi4+0xa2>
 800079c:	2a00      	cmp	r2, #0
 800079e:	f000 8090 	beq.w	80008c2 <__udivmoddi4+0x202>
 80007a2:	fab2 f682 	clz	r6, r2
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	f040 80a4 	bne.w	80008f4 <__udivmoddi4+0x234>
 80007ac:	1a8a      	subs	r2, r1, r2
 80007ae:	0c03      	lsrs	r3, r0, #16
 80007b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007b4:	b280      	uxth	r0, r0
 80007b6:	b2bc      	uxth	r4, r7
 80007b8:	2101      	movs	r1, #1
 80007ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80007be:	fb0e 221c 	mls	r2, lr, ip, r2
 80007c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007c6:	fb04 f20c 	mul.w	r2, r4, ip
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d907      	bls.n	80007de <__udivmoddi4+0x11e>
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x11c>
 80007d6:	429a      	cmp	r2, r3
 80007d8:	f200 80e0 	bhi.w	800099c <__udivmoddi4+0x2dc>
 80007dc:	46c4      	mov	ip, r8
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80007e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80007e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007ec:	fb02 f404 	mul.w	r4, r2, r4
 80007f0:	429c      	cmp	r4, r3
 80007f2:	d907      	bls.n	8000804 <__udivmoddi4+0x144>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x142>
 80007fc:	429c      	cmp	r4, r3
 80007fe:	f200 80ca 	bhi.w	8000996 <__udivmoddi4+0x2d6>
 8000802:	4602      	mov	r2, r0
 8000804:	1b1b      	subs	r3, r3, r4
 8000806:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800080a:	e7a5      	b.n	8000758 <__udivmoddi4+0x98>
 800080c:	f1c1 0620 	rsb	r6, r1, #32
 8000810:	408b      	lsls	r3, r1
 8000812:	fa22 f706 	lsr.w	r7, r2, r6
 8000816:	431f      	orrs	r7, r3
 8000818:	fa0e f401 	lsl.w	r4, lr, r1
 800081c:	fa20 f306 	lsr.w	r3, r0, r6
 8000820:	fa2e fe06 	lsr.w	lr, lr, r6
 8000824:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000828:	4323      	orrs	r3, r4
 800082a:	fa00 f801 	lsl.w	r8, r0, r1
 800082e:	fa1f fc87 	uxth.w	ip, r7
 8000832:	fbbe f0f9 	udiv	r0, lr, r9
 8000836:	0c1c      	lsrs	r4, r3, #16
 8000838:	fb09 ee10 	mls	lr, r9, r0, lr
 800083c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000840:	fb00 fe0c 	mul.w	lr, r0, ip
 8000844:	45a6      	cmp	lr, r4
 8000846:	fa02 f201 	lsl.w	r2, r2, r1
 800084a:	d909      	bls.n	8000860 <__udivmoddi4+0x1a0>
 800084c:	193c      	adds	r4, r7, r4
 800084e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000852:	f080 809c 	bcs.w	800098e <__udivmoddi4+0x2ce>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f240 8099 	bls.w	800098e <__udivmoddi4+0x2ce>
 800085c:	3802      	subs	r0, #2
 800085e:	443c      	add	r4, r7
 8000860:	eba4 040e 	sub.w	r4, r4, lr
 8000864:	fa1f fe83 	uxth.w	lr, r3
 8000868:	fbb4 f3f9 	udiv	r3, r4, r9
 800086c:	fb09 4413 	mls	r4, r9, r3, r4
 8000870:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000874:	fb03 fc0c 	mul.w	ip, r3, ip
 8000878:	45a4      	cmp	ip, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x1ce>
 800087c:	193c      	adds	r4, r7, r4
 800087e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000882:	f080 8082 	bcs.w	800098a <__udivmoddi4+0x2ca>
 8000886:	45a4      	cmp	ip, r4
 8000888:	d97f      	bls.n	800098a <__udivmoddi4+0x2ca>
 800088a:	3b02      	subs	r3, #2
 800088c:	443c      	add	r4, r7
 800088e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000892:	eba4 040c 	sub.w	r4, r4, ip
 8000896:	fba0 ec02 	umull	lr, ip, r0, r2
 800089a:	4564      	cmp	r4, ip
 800089c:	4673      	mov	r3, lr
 800089e:	46e1      	mov	r9, ip
 80008a0:	d362      	bcc.n	8000968 <__udivmoddi4+0x2a8>
 80008a2:	d05f      	beq.n	8000964 <__udivmoddi4+0x2a4>
 80008a4:	b15d      	cbz	r5, 80008be <__udivmoddi4+0x1fe>
 80008a6:	ebb8 0203 	subs.w	r2, r8, r3
 80008aa:	eb64 0409 	sbc.w	r4, r4, r9
 80008ae:	fa04 f606 	lsl.w	r6, r4, r6
 80008b2:	fa22 f301 	lsr.w	r3, r2, r1
 80008b6:	431e      	orrs	r6, r3
 80008b8:	40cc      	lsrs	r4, r1
 80008ba:	e9c5 6400 	strd	r6, r4, [r5]
 80008be:	2100      	movs	r1, #0
 80008c0:	e74f      	b.n	8000762 <__udivmoddi4+0xa2>
 80008c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80008c6:	0c01      	lsrs	r1, r0, #16
 80008c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008cc:	b280      	uxth	r0, r0
 80008ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008d2:	463b      	mov	r3, r7
 80008d4:	4638      	mov	r0, r7
 80008d6:	463c      	mov	r4, r7
 80008d8:	46b8      	mov	r8, r7
 80008da:	46be      	mov	lr, r7
 80008dc:	2620      	movs	r6, #32
 80008de:	fbb1 f1f7 	udiv	r1, r1, r7
 80008e2:	eba2 0208 	sub.w	r2, r2, r8
 80008e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008ea:	e766      	b.n	80007ba <__udivmoddi4+0xfa>
 80008ec:	4601      	mov	r1, r0
 80008ee:	e718      	b.n	8000722 <__udivmoddi4+0x62>
 80008f0:	4610      	mov	r0, r2
 80008f2:	e72c      	b.n	800074e <__udivmoddi4+0x8e>
 80008f4:	f1c6 0220 	rsb	r2, r6, #32
 80008f8:	fa2e f302 	lsr.w	r3, lr, r2
 80008fc:	40b7      	lsls	r7, r6
 80008fe:	40b1      	lsls	r1, r6
 8000900:	fa20 f202 	lsr.w	r2, r0, r2
 8000904:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000908:	430a      	orrs	r2, r1
 800090a:	fbb3 f8fe 	udiv	r8, r3, lr
 800090e:	b2bc      	uxth	r4, r7
 8000910:	fb0e 3318 	mls	r3, lr, r8, r3
 8000914:	0c11      	lsrs	r1, r2, #16
 8000916:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800091a:	fb08 f904 	mul.w	r9, r8, r4
 800091e:	40b0      	lsls	r0, r6
 8000920:	4589      	cmp	r9, r1
 8000922:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000926:	b280      	uxth	r0, r0
 8000928:	d93e      	bls.n	80009a8 <__udivmoddi4+0x2e8>
 800092a:	1879      	adds	r1, r7, r1
 800092c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000930:	d201      	bcs.n	8000936 <__udivmoddi4+0x276>
 8000932:	4589      	cmp	r9, r1
 8000934:	d81f      	bhi.n	8000976 <__udivmoddi4+0x2b6>
 8000936:	eba1 0109 	sub.w	r1, r1, r9
 800093a:	fbb1 f9fe 	udiv	r9, r1, lr
 800093e:	fb09 f804 	mul.w	r8, r9, r4
 8000942:	fb0e 1119 	mls	r1, lr, r9, r1
 8000946:	b292      	uxth	r2, r2
 8000948:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800094c:	4542      	cmp	r2, r8
 800094e:	d229      	bcs.n	80009a4 <__udivmoddi4+0x2e4>
 8000950:	18ba      	adds	r2, r7, r2
 8000952:	f109 31ff 	add.w	r1, r9, #4294967295
 8000956:	d2c4      	bcs.n	80008e2 <__udivmoddi4+0x222>
 8000958:	4542      	cmp	r2, r8
 800095a:	d2c2      	bcs.n	80008e2 <__udivmoddi4+0x222>
 800095c:	f1a9 0102 	sub.w	r1, r9, #2
 8000960:	443a      	add	r2, r7
 8000962:	e7be      	b.n	80008e2 <__udivmoddi4+0x222>
 8000964:	45f0      	cmp	r8, lr
 8000966:	d29d      	bcs.n	80008a4 <__udivmoddi4+0x1e4>
 8000968:	ebbe 0302 	subs.w	r3, lr, r2
 800096c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000970:	3801      	subs	r0, #1
 8000972:	46e1      	mov	r9, ip
 8000974:	e796      	b.n	80008a4 <__udivmoddi4+0x1e4>
 8000976:	eba7 0909 	sub.w	r9, r7, r9
 800097a:	4449      	add	r1, r9
 800097c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000980:	fbb1 f9fe 	udiv	r9, r1, lr
 8000984:	fb09 f804 	mul.w	r8, r9, r4
 8000988:	e7db      	b.n	8000942 <__udivmoddi4+0x282>
 800098a:	4673      	mov	r3, lr
 800098c:	e77f      	b.n	800088e <__udivmoddi4+0x1ce>
 800098e:	4650      	mov	r0, sl
 8000990:	e766      	b.n	8000860 <__udivmoddi4+0x1a0>
 8000992:	4608      	mov	r0, r1
 8000994:	e6fd      	b.n	8000792 <__udivmoddi4+0xd2>
 8000996:	443b      	add	r3, r7
 8000998:	3a02      	subs	r2, #2
 800099a:	e733      	b.n	8000804 <__udivmoddi4+0x144>
 800099c:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a0:	443b      	add	r3, r7
 80009a2:	e71c      	b.n	80007de <__udivmoddi4+0x11e>
 80009a4:	4649      	mov	r1, r9
 80009a6:	e79c      	b.n	80008e2 <__udivmoddi4+0x222>
 80009a8:	eba1 0109 	sub.w	r1, r1, r9
 80009ac:	46c4      	mov	ip, r8
 80009ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80009b2:	fb09 f804 	mul.w	r8, r9, r4
 80009b6:	e7c4      	b.n	8000942 <__udivmoddi4+0x282>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <get_CAN_transmitter>:




//The next functions here are to retrieve the correct pattern of bits from the received CAN message
uint8_t get_CAN_transmitter (uint16_t CAN_ID) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	0a9b      	lsrs	r3, r3, #10
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <get_CAN_action>:
uint8_t get_CAN_action (uint16_t CAN_ID) {
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & NACTION_READ_DEVICE_MASK) >> NACTION_READ_ID_DEVICE_SHIFT;
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <get_CAN_motor_mov_type>:
uint8_t get_CAN_motor_mov_type (uint16_t CAN_ID) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	121b      	asrs	r3, r3, #8
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <get_CAN_motor_type>:
uint8_t get_CAN_motor_type (uint16_t CAN_ID) {
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & NDRIVE_STEETING_DEVICE_MASK) >> NDRIVE_STEERING_SHIFT;
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	11db      	asrs	r3, r3, #7
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <get_CAN_SPEC>:
uint8_t get_CAN_SPEC (uint16_t CAN_ID) {
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & MSG_SPECIFICATION_DEVICE_MASK) >> MSG_SPECIFICATION_SHIFT;
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	111b      	asrs	r3, r3, #4
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 0307 	and.w	r3, r3, #7
 8000a58:	b2db      	uxtb	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <get_CAN_device_ID>:
int get_CAN_device_ID (uint16_t CAN_ID) {
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & ID_DEVICE_MASK);
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	f003 030f 	and.w	r3, r3, #15
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <CAN_Parse_MSG>:

/*
 * This function includes the main control flow for CAN commands.
 */
void CAN_Parse_MSG (CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]

	////////////////////////////////////////////////////////////////////////////////////////////////////////
//	uart_debug_print("Parsing the ID...\r\n");
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	float information = SingleExtractFloatFromCAN(rxData);
 8000a8e:	6838      	ldr	r0, [r7, #0]
 8000a90:	f000 f89f 	bl	8000bd2 <SingleExtractFloatFromCAN>
 8000a94:	ed87 0a05 	vstr	s0, [r7, #20]
	timmyangle = information;
 8000a98:	4a2f      	ldr	r2, [pc, #188]	@ (8000b58 <CAN_Parse_MSG+0xd4>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	6013      	str	r3, [r2, #0]

	ParsedCANID CANMessage; //initialize a struct for the received message
	uint16_t msg_ID = rxHeader->StdId & 0x07ff;//rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000aa8:	827b      	strh	r3, [r7, #18]
	whatsmymotorid = CANMessage.motorID;
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <CAN_Parse_MSG+0xd8>)
 8000ab0:	601a      	str	r2, [r3, #0]
	whatsmyaction = CANMessage.commandType;
 8000ab2:	7afb      	ldrb	r3, [r7, #11]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <CAN_Parse_MSG+0xdc>)
 8000ab8:	601a      	str	r2, [r3, #0]
	whatsmyreadrunspec = CANMessage.runSpec;
 8000aba:	7b7b      	ldrb	r3, [r7, #13]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <CAN_Parse_MSG+0xe0>)
 8000ac0:	601a      	str	r2, [r3, #0]
//	setPIDGoalA(rxData[0]);

	// First check to see who is transmitting --> ESCS cannot command other ECSs
	CANMessage.messageSender = (Transmitter) get_CAN_transmitter(msg_ID);
 8000ac2:	8a7b      	ldrh	r3, [r7, #18]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff79 	bl	80009bc <get_CAN_transmitter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	723b      	strb	r3, [r7, #8]
	if (CANMessage.messageSender == SLAVE){
 8000ace:	7a3b      	ldrb	r3, [r7, #8]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d03a      	beq.n	8000b4a <CAN_Parse_MSG+0xc6>
		return;
	}

	//Check to make sure the command is directed toward the ESC
	CANMessage.motorType = (MotorType) get_CAN_motor_type(msg_ID);
 8000ad4:	8a7b      	ldrh	r3, [r7, #18]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ffa3 	bl	8000a22 <get_CAN_motor_type>
 8000adc:	4603      	mov	r3, r0
 8000ade:	727b      	strb	r3, [r7, #9]
	whatsmymotortype = CANMessage.motorType;
 8000ae0:	7a7b      	ldrb	r3, [r7, #9]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b20      	ldr	r3, [pc, #128]	@ (8000b68 <CAN_Parse_MSG+0xe4>)
 8000ae6:	601a      	str	r2, [r3, #0]
	if (CANMessage.motorType == DRIVE_MOTOR){
 8000ae8:	7a7b      	ldrb	r3, [r7, #9]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d02f      	beq.n	8000b4e <CAN_Parse_MSG+0xca>
		return;
	}

	// Check the type of action to determine which field of the struct needs to be filled in
	CANMessage.commandType = (Action) get_CAN_action(msg_ID);
 8000aee:	8a7b      	ldrh	r3, [r7, #18]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff74 	bl	80009de <get_CAN_action>
 8000af6:	4603      	mov	r3, r0
 8000af8:	72fb      	strb	r3, [r7, #11]
	if (CANMessage.commandType == ACTION_RUN){
 8000afa:	7afb      	ldrb	r3, [r7, #11]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d106      	bne.n	8000b0e <CAN_Parse_MSG+0x8a>

		////////////////////////////////////////////////////////////////////////////////////////////////////////
//		uart_debug_print("Run Command Detected\r\n");
		////////////////////////////////////////////////////////////////////////////////////////////////////////

			CANMessage.runSpec = (RunSpec) get_CAN_SPEC(msg_ID);
 8000b00:	8a7b      	ldrh	r3, [r7, #18]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff9e 	bl	8000a44 <get_CAN_SPEC>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	737b      	strb	r3, [r7, #13]
 8000b0c:	e005      	b.n	8000b1a <CAN_Parse_MSG+0x96>
	else{
		////////////////////////////////////////////////////////////////////////////////////////////////////////
//		uart_debug_print("Read Command Detected\r\n");
		////////////////////////////////////////////////////////////////////////////////////////////////////////

		CANMessage.readSpec = (ReadSpec) get_CAN_SPEC(msg_ID);
 8000b0e:	8a7b      	ldrh	r3, [r7, #18]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff97 	bl	8000a44 <get_CAN_SPEC>
 8000b16:	4603      	mov	r3, r0
 8000b18:	733b      	strb	r3, [r7, #12]
	}

	// Determine if the command effects a single, or mulitple motors, and call the appropriate helper functions
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8000b1a:	8a7b      	ldrh	r3, [r7, #18]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff6f 	bl	8000a00 <get_CAN_motor_mov_type>
 8000b22:	4603      	mov	r3, r0
 8000b24:	72bb      	strb	r3, [r7, #10]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 8000b26:	7abb      	ldrb	r3, [r7, #10]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d107      	bne.n	8000b3c <CAN_Parse_MSG+0xb8>
		CANMessage.motorID = (MotorID) get_CAN_device_ID(msg_ID);
 8000b2c:	8a7b      	ldrh	r3, [r7, #18]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff99 	bl	8000a66 <get_CAN_device_ID>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	73bb      	strb	r3, [r7, #14]
 8000b3a:	e009      	b.n	8000b50 <CAN_Parse_MSG+0xcc>
	else{
		////////////////////////////////////////////////////////////////////////////////////////////////////////
//		uart_debug_print("Processing Multiple Commands\r\n");
		////////////////////////////////////////////////////////////////////////////////////////////////////////

		Process_Multiple_Steering_Motor_Command(&CANMessage, rxData);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f812 	bl	8000b6c <Process_Multiple_Steering_Motor_Command>
 8000b48:	e002      	b.n	8000b50 <CAN_Parse_MSG+0xcc>
		return;
 8000b4a:	bf00      	nop
 8000b4c:	e000      	b.n	8000b50 <CAN_Parse_MSG+0xcc>
		return;
 8000b4e:	bf00      	nop
	}

}
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000003c 	.word	0x2000003c
 8000b5c:	2000002c 	.word	0x2000002c
 8000b60:	20000034 	.word	0x20000034
 8000b64:	20000038 	.word	0x20000038
 8000b68:	20000030 	.word	0x20000030

08000b6c <Process_Multiple_Steering_Motor_Command>:
		}

	}
}

void Process_Multiple_Steering_Motor_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]

	////////////////////////////////////////////////////////////////////////////////////////////////////////
//	 uart_debug_print("Running Multiple Motors...\r\n");
	////////////////////////////////////////////////////////////////////////////////////////////////////////

	switch(CANMessageID->runSpec){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	795b      	ldrb	r3, [r3, #5]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d014      	beq.n	8000ba8 <Process_Multiple_Steering_Motor_Command+0x3c>
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d114      	bne.n	8000bac <Process_Multiple_Steering_Motor_Command+0x40>

	case (RUN_POSITION):
			amitriggering = 1;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <Process_Multiple_Steering_Motor_Command+0x4c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
			int16_t curESCSpeed = extract_multiple_speeds(rxData);
 8000b88:	6838      	ldr	r0, [r7, #0]
 8000b8a:	f000 f83e 	bl	8000c0a <extract_multiple_speeds>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	81fb      	strh	r3, [r7, #14]
//			 uart_debug_print("Running This Motor\r\n");
//			 uart_debug_print("Setpoint %d RPM\r\n", (int)curESCSpeed);
//			 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
			////////////////////////////////////////////////////////////////////////////////////////////////////////

			ControlSingleMotor(curESCSpeed);
 8000b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba2:	f000 f80b 	bl	8000bbc <ControlSingleMotor>
			break;
 8000ba6:	e002      	b.n	8000bae <Process_Multiple_Steering_Motor_Command+0x42>
			////////////////////////////////////////////////////////////////////////////////////////////////////////
//			 uart_debug_print("Stop this motor\r\n");
			////////////////////////////////////////////////////////////////////////////////////////////////////////

//	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
			break;
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <Process_Multiple_Steering_Motor_Command+0x42>
	default:
		break;
 8000bac:	bf00      	nop
	}


}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000040 	.word	0x20000040

08000bbc <ControlSingleMotor>:


void ControlSingleMotor(float angle){
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	ed87 0a01 	vstr	s0, [r7, #4]
//	    uart_debug_print("Motor state not explicitly handled: %d\r\n", motorState);
//	    break;
//	}
//
//	return;
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SingleExtractFloatFromCAN>:
//        Error_Handler();
//    }
}

// Extracts a float from a CAN data buffer that is expected to be in little-Endian
float SingleExtractFloatFromCAN(uint8_t *data) {
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reorderedData[4];

    // The data is already big-endian, so we copy directly:
    reorderedData[0] = data[0];
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	723b      	strb	r3, [r7, #8]
    reorderedData[1] = data[1];
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	727b      	strb	r3, [r7, #9]
    reorderedData[2] = data[2];
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	72bb      	strb	r3, [r7, #10]
    reorderedData[3] = data[3];
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	78db      	ldrb	r3, [r3, #3]
 8000bf0:	72fb      	strb	r3, [r7, #11]

    memcpy(&value, reorderedData, sizeof(float));
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	60fb      	str	r3, [r7, #12]
    return value;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	ee07 3a90 	vmov	s15, r3
}
 8000bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <extract_multiple_speeds>:


int16_t extract_multiple_speeds(const uint8_t *rxData){
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
//    uint16_t offset = STEERING_ID * 2;
//    int16_t value = (int16_t)((rxData[offset + 1] << 8) | rxData[offset]);
//    return value;
}
 8000c12:	bf00      	nop
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c24:	f000 faca 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c28:	f000 f858 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2c:	f000 f8ec 	bl	8000e08 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c30:	f000 f8b4 	bl	8000d9c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <main+0xb0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c3a:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <main+0xb0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c40:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <main+0xb0>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <main+0xb0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <main+0xb0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <main+0xb0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <main+0xb0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <main+0xb0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <main+0xb0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <main+0xb0>)
 8000c6c:	220e      	movs	r2, #14
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000c70:	4917      	ldr	r1, [pc, #92]	@ (8000cd0 <main+0xb0>)
 8000c72:	4818      	ldr	r0, [pc, #96]	@ (8000cd4 <main+0xb4>)
 8000c74:	f000 fc10 	bl	8001498 <HAL_CAN_ConfigFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <main+0x62>
  {
  /* Filter configuration Error */
  Error_Handler();
 8000c7e:	f000 f98f 	bl	8000fa0 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000c82:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <main+0xb4>)
 8000c84:	f000 fce6 	bl	8001654 <HAL_CAN_Start>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <main+0x72>
  {
  /* Start Error */
  Error_Handler();
 8000c8e:	f000 f987 	bl	8000fa0 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000c92:	2103      	movs	r1, #3
 8000c94:	480f      	ldr	r0, [pc, #60]	@ (8000cd4 <main+0xb4>)
 8000c96:	f000 ff13 	bl	8001ac0 <HAL_CAN_ActivateNotification>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <main+0x84>
  {
  /* Notification Error */
  Error_Handler();
 8000ca0:	f000 f97e 	bl	8000fa0 <Error_Handler>
  }

  TxHeader.StdId = 0x394;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <main+0xb8>)
 8000ca6:	f44f 7265 	mov.w	r2, #916	@ 0x394
 8000caa:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <main+0xb8>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <main+0xb8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <main+0xb8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
//  TxHeader.DLC = 8; Tony: I'm changing this to one temporarily for testing.
  TxHeader.DLC = 8;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <main+0xb8>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <main+0xb8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	751a      	strb	r2, [r3, #20]
//  TxData[7] = johnyangle; //Tony: I commented these out temporarily for testing.
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cca:	bf00      	nop
 8000ccc:	e7fd      	b.n	8000cca <main+0xaa>
 8000cce:	bf00      	nop
 8000cd0:	20000070 	.word	0x20000070
 8000cd4:	20000044 	.word	0x20000044
 8000cd8:	20000098 	.word	0x20000098

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	@ 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2234      	movs	r2, #52	@ 0x34
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 f954 	bl	8002f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <SystemClock_Config+0xb8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <SystemClock_Config+0xb8>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <SystemClock_Config+0xb8>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <SystemClock_Config+0xbc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d28:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <SystemClock_Config+0xbc>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <SystemClock_Config+0xbc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d44:	2310      	movs	r3, #16
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fe83 	bl	8002a5c <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d5c:	f000 f920 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fbde 	bl	800253c <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d86:	f000 f90b 	bl	8000fa0 <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3750      	adds	r7, #80	@ 0x50
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000da2:	4a18      	ldr	r2, [pc, #96]	@ (8000e04 <MX_CAN1_Init+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000da8:	2208      	movs	r2, #8
 8000daa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dbe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_CAN1_Init+0x64>)
 8000dec:	f000 fa58 	bl	80012a0 <HAL_CAN_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000df6:	f000 f8d3 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000044 	.word	0x20000044
 8000e04:	40006400 	.word	0x40006400

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <MX_GPIO_Init+0xa8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a22      	ldr	r2, [pc, #136]	@ (8000eb0 <MX_GPIO_Init+0xa8>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <MX_GPIO_Init+0xa8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_GPIO_Init+0xa8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <MX_GPIO_Init+0xa8>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_GPIO_Init+0xa8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4816      	ldr	r0, [pc, #88]	@ (8000eb4 <MX_GPIO_Init+0xac>)
 8000e5c:	f001 fb22 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000e60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4810      	ldr	r0, [pc, #64]	@ (8000eb8 <MX_GPIO_Init+0xb0>)
 8000e78:	f001 f980 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4808      	ldr	r0, [pc, #32]	@ (8000eb4 <MX_GPIO_Init+0xac>)
 8000e94:	f001 f972 	bl	800217c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2028      	movs	r0, #40	@ 0x28
 8000e9e:	f001 f936 	bl	800210e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea2:	2028      	movs	r0, #40	@ 0x28
 8000ea4:	f001 f94f 	bl	8002146 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020800 	.word	0x40020800

08000ebc <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000ec8:	f001 fb05 	bl	80024d6 <HAL_GPIO_TogglePin>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ee2:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000ee8:	f000 fcc8 	bl	800187c <HAL_CAN_GetRxMessage>
CAN_Parse_MSG(&RxHeader, RxData);
 8000eec:	4905      	ldr	r1, [pc, #20]	@ (8000f04 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ef0:	f7ff fdc8 	bl	8000a84 <CAN_Parse_MSG>
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4806      	ldr	r0, [pc, #24]	@ (8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000ef8:	f001 faed 	bl	80024d6 <HAL_GPIO_TogglePin>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000d4 	.word	0x200000d4
 8000f08:	200000b0 	.word	0x200000b0
 8000f0c:	20000044 	.word	0x20000044
 8000f10:	40020000 	.word	0x40020000
 8000f14:	00000000 	.word	0x00000000

08000f18 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_EXTI_Callback+0x18>
		whatsmybutton = 30;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f2c:	221e      	movs	r2, #30
 8000f2e:	601a      	str	r2, [r3, #0]
	}
	if (johnyangle > 2.2) {
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff facb 	bl	80004d0 <__aeabi_f2d>
 8000f3a:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f78 <HAL_GPIO_EXTI_Callback+0x60>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fb9c 	bl	800067c <__aeabi_dcmpgt>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_EXTI_Callback+0x3a>
		johnyangle = 2.1;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_EXTI_Callback+0x40>
	}
	else {
		johnyangle = 3.1;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <HAL_GPIO_EXTI_Callback+0x74>)
 8000f56:	601a      	str	r2, [r3, #0]
	}
	  memcpy(TxData, &johnyangle, sizeof(float));
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x78>)
 8000f5e:	6013      	str	r3, [r2, #0]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f62:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x78>)
 8000f64:	490c      	ldr	r1, [pc, #48]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x80>)
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0x84>)
 8000f68:	f000 fbb8 	bl	80016dc <HAL_CAN_AddTxMessage>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	f3af 8000 	nop.w
 8000f78:	9999999a 	.word	0x9999999a
 8000f7c:	40019999 	.word	0x40019999
 8000f80:	2000006c 	.word	0x2000006c
 8000f84:	20000000 	.word	0x20000000
 8000f88:	40066666 	.word	0x40066666
 8000f8c:	40466666 	.word	0x40466666
 8000f90:	200000cc 	.word	0x200000cc
 8000f94:	200000dc 	.word	0x200000dc
 8000f98:	20000098 	.word	0x20000098
 8000f9c:	20000044 	.word	0x20000044

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff8 <HAL_MspInit+0x4c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_MspInit+0x4c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a21      	ldr	r2, [pc, #132]	@ (80010a0 <HAL_CAN_MspInit+0xa4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d13c      	bne.n	8001098 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <HAL_CAN_MspInit+0xa8>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <HAL_CAN_MspInit+0xa8>)
 8001028:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <HAL_CAN_MspInit+0xa8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_CAN_MspInit+0xa8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a18      	ldr	r2, [pc, #96]	@ (80010a4 <HAL_CAN_MspInit+0xa8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <HAL_CAN_MspInit+0xa8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001056:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001068:	2309      	movs	r3, #9
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <HAL_CAN_MspInit+0xac>)
 8001074:	f001 f882 	bl	800217c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2013      	movs	r0, #19
 800107e:	f001 f846 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001082:	2013      	movs	r0, #19
 8001084:	f001 f85f 	bl	8002146 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2014      	movs	r0, #20
 800108e:	f001 f83e 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001092:	2014      	movs	r0, #20
 8001094:	f001 f857 	bl	8002146 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	@ 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40006400 	.word	0x40006400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 f8ad 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <CAN1_TX_IRQHandler+0x10>)
 8001112:	f000 fcfb 	bl	8001b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000044 	.word	0x20000044

08001120 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <CAN1_RX0_IRQHandler+0x10>)
 8001126:	f000 fcf1 	bl	8001b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000044 	.word	0x20000044

08001134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001138:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800113c:	f001 f9e6 	bl	800250c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800116c:	f7ff ffea 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001196:	f001 ff07 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fd41 	bl	8000c20 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011ac:	08003028 	.word	0x08003028
  ldr r2, =_sbss
 80011b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011b4:	200000e4 	.word	0x200000e4

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 ff87 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fedc 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 ff9f 	bl	8002162 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 ff67 	bl	800210e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000004 	.word	0x20000004
 8001258:	2000000c 	.word	0x2000000c
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2000000c 	.word	0x2000000c
 8001284:	200000e0 	.word	0x200000e0

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200000e0 	.word	0x200000e0

080012a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0ed      	b.n	800148e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fe9c 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d4:	f7ff ffd8 	bl	8001288 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012da:	e012      	b.n	8001302 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012dc:	f7ff ffd4 	bl	8001288 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b0a      	cmp	r3, #10
 80012e8:	d90b      	bls.n	8001302 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2205      	movs	r2, #5
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0c5      	b.n	800148e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0e5      	beq.n	80012dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0202 	bic.w	r2, r2, #2
 800131e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff ffb2 	bl	8001288 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001326:	e012      	b.n	800134e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001328:	f7ff ffae 	bl	8001288 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d90b      	bls.n	800134e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e09f      	b.n	800148e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e5      	bne.n	8001328 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7e1b      	ldrb	r3, [r3, #24]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e007      	b.n	8001386 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7e5b      	ldrb	r3, [r3, #25]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d108      	bne.n	80013a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e007      	b.n	80013b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e9b      	ldrb	r3, [r3, #26]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d108      	bne.n	80013ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0220 	orr.w	r2, r2, #32
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e007      	b.n	80013da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0220 	bic.w	r2, r2, #32
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7edb      	ldrb	r3, [r3, #27]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0210 	bic.w	r2, r2, #16
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e007      	b.n	8001404 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0210 	orr.w	r2, r2, #16
 8001402:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7f1b      	ldrb	r3, [r3, #28]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0208 	orr.w	r2, r2, #8
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e007      	b.n	800142e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0208 	bic.w	r2, r2, #8
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7f5b      	ldrb	r3, [r3, #29]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d108      	bne.n	8001448 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0204 	orr.w	r2, r2, #4
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e007      	b.n	8001458 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0204 	bic.w	r2, r2, #4
 8001456:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	ea42 0103 	orr.w	r1, r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d003      	beq.n	80014b8 <HAL_CAN_ConfigFilter+0x20>
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	f040 80be 	bne.w	8001634 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014b8:	4b65      	ldr	r3, [pc, #404]	@ (8001650 <HAL_CAN_ConfigFilter+0x1b8>)
 80014ba:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014c2:	f043 0201 	orr.w	r2, r3, #1
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014d2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	431a      	orrs	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	2201      	movs	r2, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d123      	bne.n	8001562 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	401a      	ands	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800153c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	3248      	adds	r2, #72	@ 0x48
 8001542:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001556:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	3348      	adds	r3, #72	@ 0x48
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d122      	bne.n	80015b0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	431a      	orrs	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800158a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	3248      	adds	r2, #72	@ 0x48
 8001590:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	3348      	adds	r3, #72	@ 0x48
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015ca:	e007      	b.n	80015dc <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	401a      	ands	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015f6:	e007      	b.n	8001608 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	431a      	orrs	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d107      	bne.n	8001620 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	431a      	orrs	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001626:	f023 0201 	bic.w	r2, r3, #1
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e006      	b.n	8001642 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
  }
}
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40006400 	.word	0x40006400

08001654 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d12e      	bne.n	80016c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fe02 	bl	8001288 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff fdfe 	bl	8001288 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e012      	b.n	80016d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e5      	bne.n	8001688 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e006      	b.n	80016d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
  }
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016fa:	7ffb      	ldrb	r3, [r7, #31]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d003      	beq.n	8001708 <HAL_CAN_AddTxMessage+0x2c>
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	2b02      	cmp	r3, #2
 8001704:	f040 80ad 	bne.w	8001862 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10a      	bne.n	8001728 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8095 	beq.w	8001852 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	0e1b      	lsrs	r3, r3, #24
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001732:	2201      	movs	r2, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10d      	bne.n	8001760 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800174e:	68f9      	ldr	r1, [r7, #12]
 8001750:	6809      	ldr	r1, [r1, #0]
 8001752:	431a      	orrs	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3318      	adds	r3, #24
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	440b      	add	r3, r1
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e00f      	b.n	8001780 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800176a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001774:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3318      	adds	r3, #24
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	440b      	add	r3, r1
 800177e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3318      	adds	r3, #24
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	3304      	adds	r3, #4
 8001792:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	7d1b      	ldrb	r3, [r3, #20]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d111      	bne.n	80017c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3318      	adds	r3, #24
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6811      	ldr	r1, [r2, #0]
 80017b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3318      	adds	r3, #24
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	440b      	add	r3, r1
 80017bc:	3304      	adds	r3, #4
 80017be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3307      	adds	r3, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	061a      	lsls	r2, r3, #24
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3306      	adds	r3, #6
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	041b      	lsls	r3, r3, #16
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3305      	adds	r3, #5
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	4313      	orrs	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	3204      	adds	r2, #4
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	4610      	mov	r0, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6811      	ldr	r1, [r2, #0]
 80017e8:	ea43 0200 	orr.w	r2, r3, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3303      	adds	r3, #3
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	061a      	lsls	r2, r3, #24
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3302      	adds	r3, #2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3301      	adds	r3, #1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	4313      	orrs	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	4610      	mov	r0, r2
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	6811      	ldr	r1, [r2, #0]
 800181e:	ea43 0200 	orr.w	r2, r3, r0
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	440b      	add	r3, r1
 8001828:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800182c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3318      	adds	r3, #24
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	6811      	ldr	r1, [r2, #0]
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3318      	adds	r3, #24
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	440b      	add	r3, r1
 800184c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e00e      	b.n	8001870 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e006      	b.n	8001870 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
  }
}
 8001870:	4618      	mov	r0, r3
 8001872:	3724      	adds	r7, #36	@ 0x24
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001890:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <HAL_CAN_GetRxMessage+0x24>
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	2b02      	cmp	r3, #2
 800189c:	f040 8103 	bne.w	8001aa6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10e      	bne.n	80018c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d116      	bne.n	80018e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0f7      	b.n	8001ab4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d107      	bne.n	80018e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0e8      	b.n	8001ab4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	331b      	adds	r3, #27
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0204 	and.w	r2, r3, #4
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10c      	bne.n	800191a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	331b      	adds	r3, #27
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0d5b      	lsrs	r3, r3, #21
 8001910:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e00b      	b.n	8001932 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	331b      	adds	r3, #27
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4413      	add	r3, r2
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	331b      	adds	r3, #27
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0202 	and.w	r2, r3, #2
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	331b      	adds	r3, #27
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2208      	movs	r2, #8
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	e00b      	b.n	8001980 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	331b      	adds	r3, #27
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 020f 	and.w	r2, r3, #15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	331b      	adds	r3, #27
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b2da      	uxtb	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	331b      	adds	r3, #27
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0a1a      	lsrs	r2, r3, #8
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0c1a      	lsrs	r2, r3, #16
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3302      	adds	r3, #2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0e1a      	lsrs	r2, r3, #24
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3303      	adds	r3, #3
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3304      	adds	r3, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0a1a      	lsrs	r2, r3, #8
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3305      	adds	r3, #5
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0c1a      	lsrs	r2, r3, #16
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3306      	adds	r3, #6
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0e1a      	lsrs	r2, r3, #24
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3307      	adds	r3, #7
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0220 	orr.w	r2, r2, #32
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	e007      	b.n	8001aa2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0220 	orr.w	r2, r2, #32
 8001aa0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e006      	b.n	8001ab4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d002      	beq.n	8001ade <HAL_CAN_ActivateNotification+0x1e>
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d109      	bne.n	8001af2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6959      	ldr	r1, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e006      	b.n	8001b00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d07c      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d023      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2201      	movs	r2, #1
 8001b62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff f9a4 	bl	8000ebc <HAL_CAN_TxMailbox0CompleteCallback>
 8001b74:	e016      	b.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b88:	e00c      	b.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	e002      	b.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f97f 	bl	8001ea2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d024      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f959 	bl	8001e7a <HAL_CAN_TxMailbox1CompleteCallback>
 8001bc8:	e016      	b.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bdc:	e00c      	b.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf0:	e002      	b.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f95f 	bl	8001eb6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d024      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f939 	bl	8001e8e <HAL_CAN_TxMailbox2CompleteCallback>
 8001c1c:	e016      	b.n	8001c4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	e00c      	b.n	8001c4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c44:	e002      	b.n	8001c4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f93f 	bl	8001eca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00c      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2208      	movs	r2, #8
 8001c8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f926 	bl	8001ede <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d009      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff f914 	bl	8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2208      	movs	r2, #8
 8001cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f908 	bl	8001f06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8ef 	bl	8001ef2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8f2 	bl	8001f1a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2208      	movs	r2, #8
 8001d50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8eb 	bl	8001f2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d07b      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d072      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d043      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d03e      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dda:	2b60      	cmp	r3, #96	@ 0x60
 8001ddc:	d02b      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x32a>
 8001dde:	2b60      	cmp	r3, #96	@ 0x60
 8001de0:	d82e      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001de2:	2b50      	cmp	r3, #80	@ 0x50
 8001de4:	d022      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x320>
 8001de6:	2b50      	cmp	r3, #80	@ 0x50
 8001de8:	d82a      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001dea:	2b40      	cmp	r3, #64	@ 0x40
 8001dec:	d019      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x316>
 8001dee:	2b40      	cmp	r3, #64	@ 0x40
 8001df0:	d826      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001df2:	2b30      	cmp	r3, #48	@ 0x30
 8001df4:	d010      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x30c>
 8001df6:	2b30      	cmp	r3, #48	@ 0x30
 8001df8:	d822      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d002      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x2f8>
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d005      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e02:	e01d      	b.n	8001e40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e0c:	e019      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e16:	e014      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e20:	e00f      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e2a:	e00a      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e34:	e005      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e3e:	e000      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2204      	movs	r2, #4
 8001e58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f868 	bl	8001f42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	@ (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	@ (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	@ (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff8e 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff29 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002120:	f7ff ff3e 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 8002124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f7ff ff8e 	bl	800204c <NVIC_EncodePriority>
 8002130:	4602      	mov	r2, r0
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff5d 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff31 	bl	8001fbc <__NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffa2 	bl	80020b4 <SysTick_Config>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	@ 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e165      	b.n	8002464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8154 	bne.w	800245e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d005      	beq.n	80021ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b03      	cmp	r3, #3
 800223a:	d017      	beq.n	800226c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d123      	bne.n	80022c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	08da      	lsrs	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3208      	adds	r2, #8
 8002280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	08da      	lsrs	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3208      	adds	r2, #8
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80ae 	beq.w	800245e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b5d      	ldr	r3, [pc, #372]	@ (800247c <HAL_GPIO_Init+0x300>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a5c      	ldr	r2, [pc, #368]	@ (800247c <HAL_GPIO_Init+0x300>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b5a      	ldr	r3, [pc, #360]	@ (800247c <HAL_GPIO_Init+0x300>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231e:	4a58      	ldr	r2, [pc, #352]	@ (8002480 <HAL_GPIO_Init+0x304>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4f      	ldr	r2, [pc, #316]	@ (8002484 <HAL_GPIO_Init+0x308>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d025      	beq.n	8002396 <HAL_GPIO_Init+0x21a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4e      	ldr	r2, [pc, #312]	@ (8002488 <HAL_GPIO_Init+0x30c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01f      	beq.n	8002392 <HAL_GPIO_Init+0x216>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4d      	ldr	r2, [pc, #308]	@ (800248c <HAL_GPIO_Init+0x310>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x212>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4c      	ldr	r2, [pc, #304]	@ (8002490 <HAL_GPIO_Init+0x314>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4b      	ldr	r2, [pc, #300]	@ (8002494 <HAL_GPIO_Init+0x318>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x20a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4a      	ldr	r2, [pc, #296]	@ (8002498 <HAL_GPIO_Init+0x31c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x206>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a49      	ldr	r2, [pc, #292]	@ (800249c <HAL_GPIO_Init+0x320>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x202>
 800237a:	2306      	movs	r3, #6
 800237c:	e00c      	b.n	8002398 <HAL_GPIO_Init+0x21c>
 800237e:	2307      	movs	r3, #7
 8002380:	e00a      	b.n	8002398 <HAL_GPIO_Init+0x21c>
 8002382:	2305      	movs	r3, #5
 8002384:	e008      	b.n	8002398 <HAL_GPIO_Init+0x21c>
 8002386:	2304      	movs	r3, #4
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x21c>
 800238a:	2303      	movs	r3, #3
 800238c:	e004      	b.n	8002398 <HAL_GPIO_Init+0x21c>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <HAL_GPIO_Init+0x21c>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_GPIO_Init+0x21c>
 8002396:	2300      	movs	r3, #0
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f002 0203 	and.w	r2, r2, #3
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4093      	lsls	r3, r2
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a8:	4935      	ldr	r1, [pc, #212]	@ (8002480 <HAL_GPIO_Init+0x304>)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b3a      	ldr	r3, [pc, #232]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a31      	ldr	r2, [pc, #196]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b2f      	ldr	r3, [pc, #188]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a26      	ldr	r2, [pc, #152]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240a:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002458:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <HAL_GPIO_Init+0x324>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b0f      	cmp	r3, #15
 8002468:	f67f ae96 	bls.w	8002198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3724      	adds	r7, #36	@ 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40013800 	.word	0x40013800
 8002484:	40020000 	.word	0x40020000
 8002488:	40020400 	.word	0x40020400
 800248c:	40020800 	.word	0x40020800
 8002490:	40020c00 	.word	0x40020c00
 8002494:	40021000 	.word	0x40021000
 8002498:	40021400 	.word	0x40021400
 800249c:	40021800 	.word	0x40021800
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	041a      	lsls	r2, r3, #16
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	400b      	ands	r3, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fcf4 	bl	8000f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0cc      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b68      	ldr	r3, [pc, #416]	@ (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d90c      	bls.n	8002578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b65      	ldr	r3, [pc, #404]	@ (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b63      	ldr	r3, [pc, #396]	@ (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b8      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002590:	4b59      	ldr	r3, [pc, #356]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a58      	ldr	r2, [pc, #352]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800259a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a8:	4b53      	ldr	r3, [pc, #332]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a52      	ldr	r2, [pc, #328]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b50      	ldr	r3, [pc, #320]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	494d      	ldr	r1, [pc, #308]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d044      	beq.n	800265c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b47      	ldr	r3, [pc, #284]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d119      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e07f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d003      	beq.n	80025fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b3f      	ldr	r3, [pc, #252]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	4b3b      	ldr	r3, [pc, #236]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e067      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261a:	4b37      	ldr	r3, [pc, #220]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 0203 	bic.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4934      	ldr	r1, [pc, #208]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800262c:	f7fe fe2c 	bl	8001288 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7fe fe28 	bl	8001288 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e04f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	4b2b      	ldr	r3, [pc, #172]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 020c 	and.w	r2, r3, #12
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d20c      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e032      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4916      	ldr	r1, [pc, #88]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	490e      	ldr	r1, [pc, #56]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026c2:	f000 f821 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c6:	4602      	mov	r2, r0
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	490a      	ldr	r1, [pc, #40]	@ (80026fc <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	5ccb      	ldrb	r3, [r1, r3]
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	4a09      	ldr	r2, [pc, #36]	@ (8002700 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd8c 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08003008 	.word	0x08003008
 8002700:	20000004 	.word	0x20000004
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800270c:	b0a6      	sub	sp, #152	@ 0x98
 800270e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800272e:	4bc8      	ldr	r3, [pc, #800]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b0c      	cmp	r3, #12
 8002738:	f200 817e 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x330>
 800273c:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <HAL_RCC_GetSysClockFreq+0x3c>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002779 	.word	0x08002779
 8002748:	08002a39 	.word	0x08002a39
 800274c:	08002a39 	.word	0x08002a39
 8002750:	08002a39 	.word	0x08002a39
 8002754:	08002781 	.word	0x08002781
 8002758:	08002a39 	.word	0x08002a39
 800275c:	08002a39 	.word	0x08002a39
 8002760:	08002a39 	.word	0x08002a39
 8002764:	08002789 	.word	0x08002789
 8002768:	08002a39 	.word	0x08002a39
 800276c:	08002a39 	.word	0x08002a39
 8002770:	08002a39 	.word	0x08002a39
 8002774:	080028f3 	.word	0x080028f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4bb6      	ldr	r3, [pc, #728]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x34c>)
 800277a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800277e:	e15f      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002780:	4bb5      	ldr	r3, [pc, #724]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x350>)
 8002782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002786:	e15b      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4bb1      	ldr	r3, [pc, #708]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002794:	4bae      	ldr	r3, [pc, #696]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d031      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a0:	4bab      	ldr	r3, [pc, #684]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	2200      	movs	r2, #0
 80027a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027b4:	2300      	movs	r3, #0
 80027b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80027b8:	4ba7      	ldr	r3, [pc, #668]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x350>)
 80027ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027be:	462a      	mov	r2, r5
 80027c0:	fb03 f202 	mul.w	r2, r3, r2
 80027c4:	2300      	movs	r3, #0
 80027c6:	4621      	mov	r1, r4
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	4aa2      	ldr	r2, [pc, #648]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x350>)
 80027d0:	4621      	mov	r1, r4
 80027d2:	fba1 1202 	umull	r1, r2, r1, r2
 80027d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027d8:	460a      	mov	r2, r1
 80027da:	67ba      	str	r2, [r7, #120]	@ 0x78
 80027dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80027de:	4413      	add	r3, r2
 80027e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e6:	2200      	movs	r2, #0
 80027e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80027f4:	f7fd ff4c 	bl	8000690 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002802:	e064      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002804:	4b92      	ldr	r3, [pc, #584]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	2200      	movs	r2, #0
 800280c:	653b      	str	r3, [r7, #80]	@ 0x50
 800280e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002818:	2300      	movs	r3, #0
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002820:	4622      	mov	r2, r4
 8002822:	462b      	mov	r3, r5
 8002824:	f04f 0000 	mov.w	r0, #0
 8002828:	f04f 0100 	mov.w	r1, #0
 800282c:	0159      	lsls	r1, r3, #5
 800282e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002832:	0150      	lsls	r0, r2, #5
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4621      	mov	r1, r4
 800283a:	1a51      	subs	r1, r2, r1
 800283c:	6139      	str	r1, [r7, #16]
 800283e:	4629      	mov	r1, r5
 8002840:	eb63 0301 	sbc.w	r3, r3, r1
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002852:	4659      	mov	r1, fp
 8002854:	018b      	lsls	r3, r1, #6
 8002856:	4651      	mov	r1, sl
 8002858:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800285c:	4651      	mov	r1, sl
 800285e:	018a      	lsls	r2, r1, #6
 8002860:	4651      	mov	r1, sl
 8002862:	ebb2 0801 	subs.w	r8, r2, r1
 8002866:	4659      	mov	r1, fp
 8002868:	eb63 0901 	sbc.w	r9, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002878:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800287c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002880:	4690      	mov	r8, r2
 8002882:	4699      	mov	r9, r3
 8002884:	4623      	mov	r3, r4
 8002886:	eb18 0303 	adds.w	r3, r8, r3
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	462b      	mov	r3, r5
 800288e:	eb49 0303 	adc.w	r3, r9, r3
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028a0:	4629      	mov	r1, r5
 80028a2:	028b      	lsls	r3, r1, #10
 80028a4:	4621      	mov	r1, r4
 80028a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028aa:	4621      	mov	r1, r4
 80028ac:	028a      	lsls	r2, r1, #10
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b6:	2200      	movs	r2, #0
 80028b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80028bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028c0:	f7fd fee6 	bl	8000690 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4613      	mov	r3, r2
 80028ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028ce:	4b60      	ldr	r3, [pc, #384]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	3301      	adds	r3, #1
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80028e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028f0:	e0a6      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f2:	4b57      	ldr	r3, [pc, #348]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028fe:	4b54      	ldr	r3, [pc, #336]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d02a      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290a:	4b51      	ldr	r3, [pc, #324]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	2200      	movs	r2, #0
 8002912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002914:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002918:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800291c:	2100      	movs	r1, #0
 800291e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x350>)
 8002920:	fb03 f201 	mul.w	r2, r3, r1
 8002924:	2300      	movs	r3, #0
 8002926:	fb00 f303 	mul.w	r3, r0, r3
 800292a:	4413      	add	r3, r2
 800292c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x350>)
 800292e:	fba0 1202 	umull	r1, r2, r0, r2
 8002932:	677a      	str	r2, [r7, #116]	@ 0x74
 8002934:	460a      	mov	r2, r1
 8002936:	673a      	str	r2, [r7, #112]	@ 0x70
 8002938:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800293a:	4413      	add	r3, r2
 800293c:	677b      	str	r3, [r7, #116]	@ 0x74
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002942:	2200      	movs	r2, #0
 8002944:	633b      	str	r3, [r7, #48]	@ 0x30
 8002946:	637a      	str	r2, [r7, #52]	@ 0x34
 8002948:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800294c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002950:	f7fd fe9e 	bl	8000690 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800295e:	e05b      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002960:	4b3b      	ldr	r3, [pc, #236]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	2200      	movs	r2, #0
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800296a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
 8002978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800297c:	4642      	mov	r2, r8
 800297e:	464b      	mov	r3, r9
 8002980:	f04f 0000 	mov.w	r0, #0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	0159      	lsls	r1, r3, #5
 800298a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298e:	0150      	lsls	r0, r2, #5
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4641      	mov	r1, r8
 8002996:	ebb2 0a01 	subs.w	sl, r2, r1
 800299a:	4649      	mov	r1, r9
 800299c:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b4:	ebb2 040a 	subs.w	r4, r2, sl
 80029b8:	eb63 050b 	sbc.w	r5, r3, fp
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	00eb      	lsls	r3, r5, #3
 80029c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	18e3      	adds	r3, r4, r3
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	464b      	mov	r3, r9
 80029d8:	eb45 0303 	adc.w	r3, r5, r3
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ea:	4629      	mov	r1, r5
 80029ec:	028b      	lsls	r3, r1, #10
 80029ee:	4621      	mov	r1, r4
 80029f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f4:	4621      	mov	r1, r4
 80029f6:	028a      	lsls	r2, r1, #10
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a00:	2200      	movs	r2, #0
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	61fa      	str	r2, [r7, #28]
 8002a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0a:	f7fd fe41 	bl	8000690 <__aeabi_uldivmod>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4613      	mov	r3, r2
 8002a14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a18:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0f1b      	lsrs	r3, r3, #28
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a36:	e003      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3798      	adds	r7, #152	@ 0x98
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	017d7840 	.word	0x017d7840

08002a5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e28d      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8083 	beq.w	8002b82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a7c:	4b94      	ldr	r3, [pc, #592]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d019      	beq.n	8002abc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a88:	4b91      	ldr	r3, [pc, #580]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a94:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa0:	d00c      	beq.n	8002abc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d112      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aae:	4b88      	ldr	r3, [pc, #544]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4b84      	ldr	r3, [pc, #528]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d05b      	beq.n	8002b80 <HAL_RCC_OscConfig+0x124>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d157      	bne.n	8002b80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e25a      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x90>
 8002ade:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e01d      	b.n	8002b28 <HAL_RCC_OscConfig+0xcc>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0xb4>
 8002af6:	4b76      	ldr	r3, [pc, #472]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a75      	ldr	r2, [pc, #468]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b73      	ldr	r3, [pc, #460]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a72      	ldr	r2, [pc, #456]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0xcc>
 8002b10:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6b      	ldr	r2, [pc, #428]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fbaa 	bl	8001288 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fba6 	bl	8001288 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e21f      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b61      	ldr	r3, [pc, #388]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0xdc>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fb96 	bl	8001288 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fb92 	bl	8001288 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e20b      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	4b57      	ldr	r3, [pc, #348]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x104>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d06f      	beq.n	8002c6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b8e:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bbe:	4b44      	ldr	r3, [pc, #272]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b41      	ldr	r3, [pc, #260]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x186>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1d3      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4937      	ldr	r1, [pc, #220]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b34      	ldr	r3, [pc, #208]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fb3f 	bl	8001288 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe fb3b 	bl	8001288 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1b4      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b28      	ldr	r3, [pc, #160]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4925      	ldr	r1, [pc, #148]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b24      	ldr	r3, [pc, #144]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fb1e 	bl	8001288 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fe fb1a 	bl	8001288 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e193      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d036      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fafe 	bl	8001288 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe fafa 	bl	8001288 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e173      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x234>
 8002cae:	e01b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb0:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fae7 	bl	8001288 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e00e      	b.n	8002cdc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fae3 	bl	8001288 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d907      	bls.n	8002cdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e15c      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	42470000 	.word	0x42470000
 8002cd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	4b8a      	ldr	r3, [pc, #552]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ea      	bne.n	8002cbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8097 	beq.w	8002e24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b83      	ldr	r3, [pc, #524]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d16:	4b7c      	ldr	r3, [pc, #496]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b79      	ldr	r3, [pc, #484]	@ (8002f0c <HAL_RCC_OscConfig+0x4b0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d118      	bne.n	8002d64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d32:	4b76      	ldr	r3, [pc, #472]	@ (8002f0c <HAL_RCC_OscConfig+0x4b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a75      	ldr	r2, [pc, #468]	@ (8002f0c <HAL_RCC_OscConfig+0x4b0>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe faa3 	bl	8001288 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe fa9f 	bl	8001288 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e118      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b6c      	ldr	r3, [pc, #432]	@ (8002f0c <HAL_RCC_OscConfig+0x4b0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x31e>
 8002d6c:	4b66      	ldr	r3, [pc, #408]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	4a65      	ldr	r2, [pc, #404]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x358>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x340>
 8002d82:	4b61      	ldr	r3, [pc, #388]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a60      	ldr	r2, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	4a5d      	ldr	r2, [pc, #372]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x358>
 8002d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	4a59      	ldr	r2, [pc, #356]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da8:	4b57      	ldr	r3, [pc, #348]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	4a56      	ldr	r2, [pc, #344]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fa64 	bl	8001288 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fa60 	bl	8001288 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0d7      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	4b4b      	ldr	r3, [pc, #300]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ee      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x368>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fa4e 	bl	8001288 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fa4a 	bl	8001288 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0c1      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ee      	bne.n	8002df0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e18:	4b3b      	ldr	r3, [pc, #236]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80ad 	beq.w	8002f88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2e:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d060      	beq.n	8002efc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d145      	bne.n	8002ece <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <HAL_RCC_OscConfig+0x4b4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fa1e 	bl	8001288 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fa1a 	bl	8001288 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e093      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	4b29      	ldr	r3, [pc, #164]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	3b01      	subs	r3, #1
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	071b      	lsls	r3, r3, #28
 8002e9a:	491b      	ldr	r1, [pc, #108]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x4b4>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe f9ef 	bl	8001288 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe f9eb 	bl	8001288 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e064      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec0:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x452>
 8002ecc:	e05c      	b.n	8002f88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <HAL_RCC_OscConfig+0x4b4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe f9d8 	bl	8001288 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe f9d4 	bl	8001288 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e04d      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x480>
 8002efa:	e045      	b.n	8002f88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e040      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f14:	4b1f      	ldr	r3, [pc, #124]	@ (8002f94 <HAL_RCC_OscConfig+0x538>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d030      	beq.n	8002f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d129      	bne.n	8002f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d122      	bne.n	8002f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d119      	bne.n	8002f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d10f      	bne.n	8002f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <memset>:
 8002f98:	4402      	add	r2, r0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <memset+0xa>
 8002fa0:	4770      	bx	lr
 8002fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa6:	e7f9      	b.n	8002f9c <memset+0x4>

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4d0d      	ldr	r5, [pc, #52]	@ (8002fe0 <__libc_init_array+0x38>)
 8002fac:	4c0d      	ldr	r4, [pc, #52]	@ (8002fe4 <__libc_init_array+0x3c>)
 8002fae:	1b64      	subs	r4, r4, r5
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	42a6      	cmp	r6, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8002fe8 <__libc_init_array+0x40>)
 8002fba:	4c0c      	ldr	r4, [pc, #48]	@ (8002fec <__libc_init_array+0x44>)
 8002fbc:	f000 f818 	bl	8002ff0 <_init>
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	42a6      	cmp	r6, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd0:	4798      	blx	r3
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fda:	4798      	blx	r3
 8002fdc:	3601      	adds	r6, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	08003020 	.word	0x08003020
 8002fe4:	08003020 	.word	0x08003020
 8002fe8:	08003020 	.word	0x08003020
 8002fec:	08003024 	.word	0x08003024

08002ff0 <_init>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr

08002ffc <_fini>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr
