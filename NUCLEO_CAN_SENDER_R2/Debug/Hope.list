
Hope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a20  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002be4  08002be4  00003be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002bf4  08002bf4  00003bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bfc  08002bfc  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bfc  08002bfc  00003bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c00  08002c00  00003c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002c04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08002c14  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002c14  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000768d  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001904  00000000  00000000  0000b6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000520  00000000  00000000  0000d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002142f  00000000  00000000  0000dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ef6  00000000  00000000  0002efff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8d1e  00000000  00000000  00037ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100c13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a88  00000000  00000000  00100c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001026e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002bcc 	.word	0x08002bcc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002bcc 	.word	0x08002bcc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <get_CAN_transmitter>:




//The next functions here are to retrieve the correct pattern of bits from the received CAN message
uint8_t get_CAN_transmitter (uint16_t CAN_ID) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	0a9b      	lsrs	r3, r3, #10
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <get_CAN_action>:
uint8_t get_CAN_action (uint16_t CAN_ID) {
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	4603      	mov	r3, r0
 800055a:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & NACTION_READ_DEVICE_MASK) >> NACTION_READ_ID_DEVICE_SHIFT;
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	0a5b      	lsrs	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <get_CAN_motor_mov_type>:
uint8_t get_CAN_motor_mov_type (uint16_t CAN_ID) {
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	121b      	asrs	r3, r3, #8
 8000582:	b2db      	uxtb	r3, r3
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	b2db      	uxtb	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <get_CAN_motor_type>:
uint8_t get_CAN_motor_type (uint16_t CAN_ID) {
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & NDRIVE_STEETING_DEVICE_MASK) >> NDRIVE_STEERING_SHIFT;
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	11db      	asrs	r3, r3, #7
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <get_CAN_SPEC>:
uint8_t get_CAN_SPEC (uint16_t CAN_ID) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & MSG_SPECIFICATION_DEVICE_MASK) >> MSG_SPECIFICATION_SHIFT;
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	111b      	asrs	r3, r3, #4
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f003 0307 	and.w	r3, r3, #7
 80005cc:	b2db      	uxtb	r3, r3
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <get_CAN_device_ID>:
int get_CAN_device_ID (uint16_t CAN_ID) {
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	80fb      	strh	r3, [r7, #6]
	return (CAN_ID & ID_DEVICE_MASK);
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	f003 030f 	and.w	r3, r3, #15
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <CAN_Parse_MSG>:

/*
 * This function includes the main control flow for CAN commands.
 */
void CAN_Parse_MSG (CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]

	////////////////////////////////////////////////////////////////////////////////////////////////////////
//	uart_debug_print("Parsing the ID...\r\n");
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	float information = SingleExtractFloatFromCAN(rxData);
 8000602:	6838      	ldr	r0, [r7, #0]
 8000604:	f000 f8a3 	bl	800074e <SingleExtractFloatFromCAN>
 8000608:	ed87 0a05 	vstr	s0, [r7, #20]
	timmyangle = information;
 800060c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000614:	ee17 2a90 	vmov	r2, s15
 8000618:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <CAN_Parse_MSG+0xdc>)
 800061a:	601a      	str	r2, [r3, #0]

	ParsedCANID CANMessage; //initialize a struct for the received message
	uint16_t msg_ID = rxHeader->StdId & 0x07ff;//rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	b29b      	uxth	r3, r3
 8000622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000626:	827b      	strh	r3, [r7, #18]
	whatsmymotorid = CANMessage.motorID;
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	461a      	mov	r2, r3
 800062c:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <CAN_Parse_MSG+0xe0>)
 800062e:	601a      	str	r2, [r3, #0]
	whatsmyaction = CANMessage.commandType;
 8000630:	7afb      	ldrb	r3, [r7, #11]
 8000632:	461a      	mov	r2, r3
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <CAN_Parse_MSG+0xe4>)
 8000636:	601a      	str	r2, [r3, #0]
	whatsmyreadrunspec = CANMessage.runSpec;
 8000638:	7b7b      	ldrb	r3, [r7, #13]
 800063a:	461a      	mov	r2, r3
 800063c:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <CAN_Parse_MSG+0xe8>)
 800063e:	601a      	str	r2, [r3, #0]
//	setPIDGoalA(rxData[0]);

	// First check to see who is transmitting --> ESCS cannot command other ECSs
	CANMessage.messageSender = (Transmitter) get_CAN_transmitter(msg_ID);
 8000640:	8a7b      	ldrh	r3, [r7, #18]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff74 	bl	8000530 <get_CAN_transmitter>
 8000648:	4603      	mov	r3, r0
 800064a:	723b      	strb	r3, [r7, #8]
	if (CANMessage.messageSender == SLAVE){
 800064c:	7a3b      	ldrb	r3, [r7, #8]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d03a      	beq.n	80006c8 <CAN_Parse_MSG+0xd0>
		return;
	}

	//Check to make sure the command is directed toward the ESC
	CANMessage.motorType = (MotorType) get_CAN_motor_type(msg_ID);
 8000652:	8a7b      	ldrh	r3, [r7, #18]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff9e 	bl	8000596 <get_CAN_motor_type>
 800065a:	4603      	mov	r3, r0
 800065c:	727b      	strb	r3, [r7, #9]
	whatsmymotortype = CANMessage.motorType;
 800065e:	7a7b      	ldrb	r3, [r7, #9]
 8000660:	461a      	mov	r2, r3
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <CAN_Parse_MSG+0xec>)
 8000664:	601a      	str	r2, [r3, #0]
	if (CANMessage.motorType == DRIVE_MOTOR){
 8000666:	7a7b      	ldrb	r3, [r7, #9]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d02f      	beq.n	80006cc <CAN_Parse_MSG+0xd4>
		return;
	}

	// Check the type of action to determine which field of the struct needs to be filled in
	CANMessage.commandType = (Action) get_CAN_action(msg_ID);
 800066c:	8a7b      	ldrh	r3, [r7, #18]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff6f 	bl	8000552 <get_CAN_action>
 8000674:	4603      	mov	r3, r0
 8000676:	72fb      	strb	r3, [r7, #11]
	if (CANMessage.commandType == ACTION_RUN){
 8000678:	7afb      	ldrb	r3, [r7, #11]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d106      	bne.n	800068c <CAN_Parse_MSG+0x94>

		////////////////////////////////////////////////////////////////////////////////////////////////////////
//		uart_debug_print("Run Command Detected\r\n");
		////////////////////////////////////////////////////////////////////////////////////////////////////////

			CANMessage.runSpec = (RunSpec) get_CAN_SPEC(msg_ID);
 800067e:	8a7b      	ldrh	r3, [r7, #18]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff99 	bl	80005b8 <get_CAN_SPEC>
 8000686:	4603      	mov	r3, r0
 8000688:	737b      	strb	r3, [r7, #13]
 800068a:	e005      	b.n	8000698 <CAN_Parse_MSG+0xa0>
	else{
		////////////////////////////////////////////////////////////////////////////////////////////////////////
//		uart_debug_print("Read Command Detected\r\n");
		////////////////////////////////////////////////////////////////////////////////////////////////////////

		CANMessage.readSpec = (ReadSpec) get_CAN_SPEC(msg_ID);
 800068c:	8a7b      	ldrh	r3, [r7, #18]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff92 	bl	80005b8 <get_CAN_SPEC>
 8000694:	4603      	mov	r3, r0
 8000696:	733b      	strb	r3, [r7, #12]
	}

	// Determine if the command effects a single, or mulitple motors, and call the appropriate helper functions
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8000698:	8a7b      	ldrh	r3, [r7, #18]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff6a 	bl	8000574 <get_CAN_motor_mov_type>
 80006a0:	4603      	mov	r3, r0
 80006a2:	72bb      	strb	r3, [r7, #10]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 80006a4:	7abb      	ldrb	r3, [r7, #10]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d107      	bne.n	80006ba <CAN_Parse_MSG+0xc2>
		CANMessage.motorID = (MotorID) get_CAN_device_ID(msg_ID);
 80006aa:	8a7b      	ldrh	r3, [r7, #18]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff94 	bl	80005da <get_CAN_device_ID>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	73bb      	strb	r3, [r7, #14]
 80006b8:	e009      	b.n	80006ce <CAN_Parse_MSG+0xd6>
	else{
		////////////////////////////////////////////////////////////////////////////////////////////////////////
//		uart_debug_print("Processing Multiple Commands\r\n");
		////////////////////////////////////////////////////////////////////////////////////////////////////////

		Process_Multiple_Steering_Motor_Command(&CANMessage, rxData);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	6839      	ldr	r1, [r7, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 f811 	bl	80006e8 <Process_Multiple_Steering_Motor_Command>
 80006c6:	e002      	b.n	80006ce <CAN_Parse_MSG+0xd6>
		return;
 80006c8:	bf00      	nop
 80006ca:	e000      	b.n	80006ce <CAN_Parse_MSG+0xd6>
		return;
 80006cc:	bf00      	nop
	}

}
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000003c 	.word	0x2000003c
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	20000034 	.word	0x20000034
 80006e0:	20000038 	.word	0x20000038
 80006e4:	20000030 	.word	0x20000030

080006e8 <Process_Multiple_Steering_Motor_Command>:
		}

	}
}

void Process_Multiple_Steering_Motor_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]

	////////////////////////////////////////////////////////////////////////////////////////////////////////
//	 uart_debug_print("Running Multiple Motors...\r\n");
	////////////////////////////////////////////////////////////////////////////////////////////////////////

	switch(CANMessageID->runSpec){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d014      	beq.n	8000724 <Process_Multiple_Steering_Motor_Command+0x3c>
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d114      	bne.n	8000728 <Process_Multiple_Steering_Motor_Command+0x40>

	case (RUN_POSITION):
			amitriggering = 1;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <Process_Multiple_Steering_Motor_Command+0x4c>)
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
			int16_t curESCSpeed = extract_multiple_speeds(rxData);
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f000 f83e 	bl	8000786 <extract_multiple_speeds>
 800070a:	4603      	mov	r3, r0
 800070c:	81fb      	strh	r3, [r7, #14]
//			 uart_debug_print("Running This Motor\r\n");
//			 uart_debug_print("Setpoint %d RPM\r\n", (int)curESCSpeed);
//			 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
			////////////////////////////////////////////////////////////////////////////////////////////////////////

			ControlSingleMotor(curESCSpeed);
 800070e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071a:	eeb0 0a67 	vmov.f32	s0, s15
 800071e:	f000 f80b 	bl	8000738 <ControlSingleMotor>
			break;
 8000722:	e002      	b.n	800072a <Process_Multiple_Steering_Motor_Command+0x42>
			////////////////////////////////////////////////////////////////////////////////////////////////////////
//			 uart_debug_print("Stop this motor\r\n");
			////////////////////////////////////////////////////////////////////////////////////////////////////////

//	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
			break;
 8000724:	bf00      	nop
 8000726:	e000      	b.n	800072a <Process_Multiple_Steering_Motor_Command+0x42>
	default:
		break;
 8000728:	bf00      	nop
	}


}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000040 	.word	0x20000040

08000738 <ControlSingleMotor>:


void ControlSingleMotor(float angle){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	ed87 0a01 	vstr	s0, [r7, #4]
//	    uart_debug_print("Motor state not explicitly handled: %d\r\n", motorState);
//	    break;
//	}
//
//	return;
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <SingleExtractFloatFromCAN>:
//        Error_Handler();
//    }
}

// Extracts a float from a CAN data buffer that is expected to be in little-Endian
float SingleExtractFloatFromCAN(uint8_t *data) {
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reorderedData[4];

    // The data is already big-endian, so we copy directly:
    reorderedData[0] = data[0];
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	723b      	strb	r3, [r7, #8]
    reorderedData[1] = data[1];
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	727b      	strb	r3, [r7, #9]
    reorderedData[2] = data[2];
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	789b      	ldrb	r3, [r3, #2]
 8000766:	72bb      	strb	r3, [r7, #10]
    reorderedData[3] = data[3];
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	78db      	ldrb	r3, [r3, #3]
 800076c:	72fb      	strb	r3, [r7, #11]

    memcpy(&value, reorderedData, sizeof(float));
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	60fb      	str	r3, [r7, #12]
    return value;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	ee07 3a90 	vmov	s15, r3
}
 8000778:	eeb0 0a67 	vmov.f32	s0, s15
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <extract_multiple_speeds>:


int16_t extract_multiple_speeds(const uint8_t *rxData){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
//    uint16_t offset = STEERING_ID * 2;
//    int16_t value = (int16_t)((rxData[offset + 1] << 8) | rxData[offset]);
//    return value;
}
 800078e:	bf00      	nop
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <AssortedTests>:
// So when testing the boards, just update the defines for TESTX (1-4), and
// you're golden.
// This will make testing easier and more repeatable.
// -Tony

float AssortedTests(timothy) {
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

#ifdef TEST4
    // The fourth test sets the motor to PI/4, and then the nucleo polls the
    // board for the motor location.
    // So basically the ID changes to 0x394
	if (timothy == 0) {return 0x394;}
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d101      	bne.n	80007ae <AssortedTests+0x12>
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <AssortedTests+0x3c>)
 80007ac:	e00a      	b.n	80007c4 <AssortedTests+0x28>
	if (timothy == 1) {return 45;}
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d101      	bne.n	80007b8 <AssortedTests+0x1c>
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <AssortedTests+0x40>)
 80007b6:	e005      	b.n	80007c4 <AssortedTests+0x28>
	if (timothy == 2) {return 45;}
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d101      	bne.n	80007c2 <AssortedTests+0x26>
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <AssortedTests+0x40>)
 80007c0:	e000      	b.n	80007c4 <AssortedTests+0x28>
#ifdef TEST5
	// The fifth test has the motor stop.
	// The ID changes to 0x184
	return 0x184; // The data payload is irrelevant so it's just also 0x184.
#endif
}
 80007c2:	e001      	b.n	80007c8 <AssortedTests+0x2c>
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eeb0 0a67 	vmov.f32	s0, s15
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	44650000 	.word	0x44650000
 80007dc:	42340000 	.word	0x42340000

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fad7 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f86b 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f000 f8ff 	bl	80009f0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007f2:	f000 f8c7 	bl	8000984 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 80007f6:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <main+0xd4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <main+0xd4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <main+0xd4>)
 8000804:	2201      	movs	r2, #1
 8000806:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <main+0xd4>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <main+0xd4>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <main+0xd4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <main+0xd4>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <main+0xd4>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <main+0xd4>)
 8000828:	2201      	movs	r2, #1
 800082a:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <main+0xd4>)
 800082e:	220e      	movs	r2, #14
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000832:	4920      	ldr	r1, [pc, #128]	@ (80008b4 <main+0xd4>)
 8000834:	4820      	ldr	r0, [pc, #128]	@ (80008b8 <main+0xd8>)
 8000836:	f000 fc1d 	bl	8001074 <HAL_CAN_ConfigFilter>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <main+0x64>
  {
  /* Filter configuration Error */
  Error_Handler();
 8000840:	f000 f99c 	bl	8000b7c <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000844:	481c      	ldr	r0, [pc, #112]	@ (80008b8 <main+0xd8>)
 8000846:	f000 fcf3 	bl	8001230 <HAL_CAN_Start>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <main+0x74>
  {
  /* Start Error */
  Error_Handler();
 8000850:	f000 f994 	bl	8000b7c <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000854:	2103      	movs	r1, #3
 8000856:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <main+0xd8>)
 8000858:	f000 ff20 	bl	800169c <HAL_CAN_ActivateNotification>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <main+0x86>
  {
  /* Notification Error */
  Error_Handler();
 8000862:	f000 f98b 	bl	8000b7c <Error_Handler>
  }

  TxHeader.StdId = (int)AssortedTests(0);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff98 	bl	800079c <AssortedTests>
 800086c:	eef0 7a40 	vmov.f32	s15, s0
 8000870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000874:	ee17 2a90 	vmov	r2, s15
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <main+0xdc>)
 800087a:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <main+0xdc>)
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <main+0xdc>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <main+0xdc>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <main+0xdc>)
 8000890:	2208      	movs	r2, #8
 8000892:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <main+0xdc>)
 8000896:	2200      	movs	r2, #0
 8000898:	751a      	strb	r2, [r3, #20]
      float johnangle = AssortedTests(1);
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff ff7e 	bl	800079c <AssortedTests>
 80008a0:	eef0 7a40 	vmov.f32	s15, s0
 80008a4:	edc7 7a01 	vstr	s15, [r7, #4]
      memcpy(TxData, &johnangle, sizeof(float));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <main+0xe0>)
 80008ac:	6013      	str	r3, [r2, #0]
//  TxData[7] = johnyangle; //Tony: I commented these out temporarily for testing.
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ae:	bf00      	nop
 80008b0:	e7fd      	b.n	80008ae <main+0xce>
 80008b2:	bf00      	nop
 80008b4:	20000070 	.word	0x20000070
 80008b8:	20000044 	.word	0x20000044
 80008bc:	20000098 	.word	0x20000098
 80008c0:	200000cc 	.word	0x200000cc

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2234      	movs	r2, #52	@ 0x34
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 f94e 	bl	8002b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b23      	ldr	r3, [pc, #140]	@ (800097c <SystemClock_Config+0xb8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a22      	ldr	r2, [pc, #136]	@ (800097c <SystemClock_Config+0xb8>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b20      	ldr	r3, [pc, #128]	@ (800097c <SystemClock_Config+0xb8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <SystemClock_Config+0xbc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <SystemClock_Config+0xbc>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <SystemClock_Config+0xbc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2310      	movs	r3, #16
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fe7d 	bl	8002638 <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000944:	f000 f91a 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fbd8 	bl	8002118 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800096e:	f000 f905 	bl	8000b7c <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3750      	adds	r7, #80	@ 0x50
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000988:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <MX_CAN1_Init+0x64>)
 800098a:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <MX_CAN1_Init+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_CAN1_Init+0x64>)
 8000990:	2208      	movs	r2, #8
 8000992:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_CAN1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_CAN1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_CAN1_Init+0x64>)
 80009d4:	f000 fa52 	bl	8000e7c <HAL_CAN_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80009de:	f000 f8cd 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000044 	.word	0x20000044
 80009ec:	40006400 	.word	0x40006400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <MX_GPIO_Init+0xa8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a22      	ldr	r2, [pc, #136]	@ (8000a98 <MX_GPIO_Init+0xa8>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <MX_GPIO_Init+0xa8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_GPIO_Init+0xa8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <MX_GPIO_Init+0xa8>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_GPIO_Init+0xa8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	4816      	ldr	r0, [pc, #88]	@ (8000a9c <MX_GPIO_Init+0xac>)
 8000a44:	f001 fb1c 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <MX_GPIO_Init+0xb0>)
 8000a60:	f001 f97a 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a64:	2320      	movs	r3, #32
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <MX_GPIO_Init+0xac>)
 8000a7c:	f001 f96c 	bl	8001d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2028      	movs	r0, #40	@ 0x28
 8000a86:	f001 f930 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a8a:	2028      	movs	r0, #40	@ 0x28
 8000a8c:	f001 f949 	bl	8001d22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ac2:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4809      	ldr	r0, [pc, #36]	@ (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000ac8:	f000 fcc6 	bl	8001458 <HAL_CAN_GetRxMessage>
CAN_Parse_MSG(&RxHeader, RxData);
 8000acc:	4905      	ldr	r1, [pc, #20]	@ (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ad0:	f7ff fd92 	bl	80005f8 <CAN_Parse_MSG>
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000ad8:	f001 faeb 	bl	80020b2 <HAL_GPIO_TogglePin>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	200000b0 	.word	0x200000b0
 8000aec:	20000044 	.word	0x20000044
 8000af0:	40020000 	.word	0x40020000

08000af4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b04:	d102      	bne.n	8000b0c <HAL_GPIO_EXTI_Callback+0x18>
		whatsmybutton = 30;
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_GPIO_EXTI_Callback+0x70>)
 8000b08:	221e      	movs	r2, #30
 8000b0a:	601a      	str	r2, [r3, #0]
	}
	if (johnyangle != AssortedTests(1)) {
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff fe45 	bl	800079c <AssortedTests>
 8000b12:	eeb0 7a40 	vmov.f32	s14, s0
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b24:	d008      	beq.n	8000b38 <HAL_GPIO_EXTI_Callback+0x44>
		johnyangle = AssortedTests(1);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff fe38 	bl	800079c <AssortedTests>
 8000b2c:	eef0 7a40 	vmov.f32	s15, s0
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b32:	edc3 7a00 	vstr	s15, [r3]
 8000b36:	e007      	b.n	8000b48 <HAL_GPIO_EXTI_Callback+0x54>
	}
	else {
		johnyangle = AssortedTests(2);
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fe2f 	bl	800079c <AssortedTests>
 8000b3e:	eef0 7a40 	vmov.f32	s15, s0
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b44:	edc3 7a00 	vstr	s15, [r3]
	}
	  memcpy(TxData, &johnyangle, sizeof(float));
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_GPIO_EXTI_Callback+0x78>)
 8000b4e:	6013      	str	r3, [r2, #0]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b52:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <HAL_GPIO_EXTI_Callback+0x78>)
 8000b54:	4907      	ldr	r1, [pc, #28]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b56:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b58:	f000 fbae 	bl	80012b8 <HAL_CAN_AddTxMessage>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000006c 	.word	0x2000006c
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200000cc 	.word	0x200000cc
 8000b70:	200000dc 	.word	0x200000dc
 8000b74:	20000098 	.word	0x20000098
 8000b78:	20000044 	.word	0x20000044

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a21      	ldr	r2, [pc, #132]	@ (8000c7c <HAL_CAN_MspInit+0xa4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13c      	bne.n	8000c74 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <HAL_CAN_MspInit+0xa8>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a1f      	ldr	r2, [pc, #124]	@ (8000c80 <HAL_CAN_MspInit+0xa8>)
 8000c04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <HAL_CAN_MspInit+0xa8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <HAL_CAN_MspInit+0xa8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a18      	ldr	r2, [pc, #96]	@ (8000c80 <HAL_CAN_MspInit+0xa8>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_CAN_MspInit+0xa8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c44:	2309      	movs	r3, #9
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <HAL_CAN_MspInit+0xac>)
 8000c50:	f001 f882 	bl	8001d58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2013      	movs	r0, #19
 8000c5a:	f001 f846 	bl	8001cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c5e:	2013      	movs	r0, #19
 8000c60:	f001 f85f 	bl	8001d22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2014      	movs	r0, #20
 8000c6a:	f001 f83e 	bl	8001cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c6e:	2014      	movs	r0, #20
 8000c70:	f001 f857 	bl	8001d22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	@ 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40006400 	.word	0x40006400
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 f8ad 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <CAN1_TX_IRQHandler+0x10>)
 8000cee:	f000 fcfb 	bl	80016e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000044 	.word	0x20000044

08000cfc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <CAN1_RX0_IRQHandler+0x10>)
 8000d02:	f000 fcf1 	bl	80016e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000044 	.word	0x20000044

08000d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000d14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d18:	f001 f9e6 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f001 ff07 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fd33 	bl	80007e0 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d88:	08002c04 	.word	0x08002c04
  ldr r2, =_sbss
 8000d8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d90:	200000e4 	.word	0x200000e4

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 ff87 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fedc 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 ff9f 	bl	8001d3e <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 ff67 	bl	8001cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000004 	.word	0x20000004
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	200000e0 	.word	0x200000e0

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000e0 	.word	0x200000e0

08000e7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e0ed      	b.n	800106a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fe9c 	bl	8000bd8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb0:	f7ff ffd8 	bl	8000e64 <HAL_GetTick>
 8000eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eb6:	e012      	b.n	8000ede <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb8:	f7ff ffd4 	bl	8000e64 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b0a      	cmp	r3, #10
 8000ec4:	d90b      	bls.n	8000ede <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0c5      	b.n	800106a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0e5      	beq.n	8000eb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0202 	bic.w	r2, r2, #2
 8000efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000efc:	f7ff ffb2 	bl	8000e64 <HAL_GetTick>
 8000f00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f02:	e012      	b.n	8000f2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f04:	f7ff ffae 	bl	8000e64 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b0a      	cmp	r3, #10
 8000f10:	d90b      	bls.n	8000f2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2205      	movs	r2, #5
 8000f22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e09f      	b.n	800106a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e5      	bne.n	8000f04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7e1b      	ldrb	r3, [r3, #24]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d108      	bne.n	8000f52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e007      	b.n	8000f62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7e5b      	ldrb	r3, [r3, #25]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d108      	bne.n	8000f7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e007      	b.n	8000f8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e9b      	ldrb	r3, [r3, #26]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d108      	bne.n	8000fa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0220 	orr.w	r2, r2, #32
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e007      	b.n	8000fb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0220 	bic.w	r2, r2, #32
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7edb      	ldrb	r3, [r3, #27]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d108      	bne.n	8000fd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0210 	bic.w	r2, r2, #16
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0210 	orr.w	r2, r2, #16
 8000fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7f1b      	ldrb	r3, [r3, #28]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d108      	bne.n	8000ffa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0208 	orr.w	r2, r2, #8
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e007      	b.n	800100a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0208 	bic.w	r2, r2, #8
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7f5b      	ldrb	r3, [r3, #29]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0204 	orr.w	r2, r2, #4
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e007      	b.n	8001034 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0204 	bic.w	r2, r2, #4
 8001032:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	ea42 0103 	orr.w	r1, r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d003      	beq.n	8001094 <HAL_CAN_ConfigFilter+0x20>
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b02      	cmp	r3, #2
 8001090:	f040 80be 	bne.w	8001210 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001094:	4b65      	ldr	r3, [pc, #404]	@ (800122c <HAL_CAN_ConfigFilter+0x1b8>)
 8001096:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010ae:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	431a      	orrs	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	2201      	movs	r2, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d123      	bne.n	800113e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001118:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	3248      	adds	r2, #72	@ 0x48
 800111e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001132:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	3348      	adds	r3, #72	@ 0x48
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d122      	bne.n	800118c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	431a      	orrs	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001166:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3248      	adds	r2, #72	@ 0x48
 800116c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001180:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	3348      	adds	r3, #72	@ 0x48
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011a6:	e007      	b.n	80011b8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80011d2:	e007      	b.n	80011e4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	431a      	orrs	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001202:	f023 0201 	bic.w	r2, r3, #1
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	e006      	b.n	800121e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
  }
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40006400 	.word	0x40006400

08001230 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d12e      	bne.n	80012a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fe02 	bl	8000e64 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001262:	e012      	b.n	800128a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001264:	f7ff fdfe 	bl	8000e64 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2205      	movs	r2, #5
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e012      	b.n	80012b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e5      	bne.n	8001264 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e006      	b.n	80012b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
  }
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d003      	beq.n	80012e4 <HAL_CAN_AddTxMessage+0x2c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	f040 80ad 	bne.w	800143e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10a      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8095 	beq.w	800142e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	0e1b      	lsrs	r3, r3, #24
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10d      	bne.n	800133c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3318      	adds	r3, #24
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	440b      	add	r3, r1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e00f      	b.n	800135c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001346:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800134c:	68f9      	ldr	r1, [r7, #12]
 800134e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001350:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3318      	adds	r3, #24
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	440b      	add	r3, r1
 800135a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3318      	adds	r3, #24
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	440b      	add	r3, r1
 800136c:	3304      	adds	r3, #4
 800136e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	7d1b      	ldrb	r3, [r3, #20]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d111      	bne.n	800139c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3318      	adds	r3, #24
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	6811      	ldr	r1, [r2, #0]
 800138c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3318      	adds	r3, #24
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	440b      	add	r3, r1
 8001398:	3304      	adds	r3, #4
 800139a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	061a      	lsls	r2, r3, #24
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3306      	adds	r3, #6
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	041b      	lsls	r3, r3, #16
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3305      	adds	r3, #5
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4313      	orrs	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	3204      	adds	r2, #4
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	4610      	mov	r0, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	6811      	ldr	r1, [r2, #0]
 80013c4:	ea43 0200 	orr.w	r2, r3, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	440b      	add	r3, r1
 80013ce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80013d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3303      	adds	r3, #3
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	061a      	lsls	r2, r3, #24
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3302      	adds	r3, #2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	4610      	mov	r0, r2
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	6811      	ldr	r1, [r2, #0]
 80013fa:	ea43 0200 	orr.w	r2, r3, r0
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	440b      	add	r3, r1
 8001404:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001408:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3318      	adds	r3, #24
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3318      	adds	r3, #24
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e00e      	b.n	800144c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e006      	b.n	800144c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	3724      	adds	r7, #36	@ 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d003      	beq.n	800147c <HAL_CAN_GetRxMessage+0x24>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b02      	cmp	r3, #2
 8001478:	f040 8103 	bne.w	8001682 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10e      	bne.n	80014a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d116      	bne.n	80014be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0f7      	b.n	8001690 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0e8      	b.n	8001690 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	331b      	adds	r3, #27
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0204 	and.w	r2, r3, #4
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10c      	bne.n	80014f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	331b      	adds	r3, #27
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0d5b      	lsrs	r3, r3, #21
 80014ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e00b      	b.n	800150e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	331b      	adds	r3, #27
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	331b      	adds	r3, #27
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0202 	and.w	r2, r3, #2
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	331b      	adds	r3, #27
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2208      	movs	r2, #8
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	e00b      	b.n	800155c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	331b      	adds	r3, #27
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	3304      	adds	r3, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 020f 	and.w	r2, r3, #15
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	331b      	adds	r3, #27
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	3304      	adds	r3, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b2da      	uxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	331b      	adds	r3, #27
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	3304      	adds	r3, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0a1a      	lsrs	r2, r3, #8
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0c1a      	lsrs	r2, r3, #16
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3302      	adds	r3, #2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0e1a      	lsrs	r2, r3, #24
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3303      	adds	r3, #3
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3304      	adds	r3, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0a1a      	lsrs	r2, r3, #8
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3305      	adds	r3, #5
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	0c1a      	lsrs	r2, r3, #16
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3306      	adds	r3, #6
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	4413      	add	r3, r2
 8001646:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0e1a      	lsrs	r2, r3, #24
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3307      	adds	r3, #7
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d108      	bne.n	800166e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	e007      	b.n	800167e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0220 	orr.w	r2, r2, #32
 800167c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e006      	b.n	8001690 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d002      	beq.n	80016ba <HAL_CAN_ActivateNotification+0x1e>
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d109      	bne.n	80016ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6959      	ldr	r1, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e006      	b.n	80016dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d07c      	beq.n	8001828 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d023      	beq.n	8001780 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff f9aa 	bl	8000aa4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001750:	e016      	b.n	8001780 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
 8001764:	e00c      	b.n	8001780 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	e002      	b.n	8001780 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f97f 	bl	8001a7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d024      	beq.n	80017d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001792:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f959 	bl	8001a56 <HAL_CAN_TxMailbox1CompleteCallback>
 80017a4:	e016      	b.n	80017d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b8:	e00c      	b.n	80017d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80017cc:	e002      	b.n	80017d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f95f 	bl	8001a92 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d024      	beq.n	8001828 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f939 	bl	8001a6a <HAL_CAN_TxMailbox2CompleteCallback>
 80017f8:	e016      	b.n	8001828 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
 800180c:	e00c      	b.n	8001828 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001820:	e002      	b.n	8001828 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f93f 	bl	8001aa6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2208      	movs	r2, #8
 8001866:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f926 	bl	8001aba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff f916 	bl	8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00c      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2210      	movs	r2, #16
 80018ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2208      	movs	r2, #8
 80018ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f908 	bl	8001ae2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8ef 	bl	8001ace <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2210      	movs	r2, #16
 800190a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f8f2 	bl	8001af6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2208      	movs	r2, #8
 800192c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8eb 	bl	8001b0a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d07b      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d072      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d043      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03e      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019b6:	2b60      	cmp	r3, #96	@ 0x60
 80019b8:	d02b      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x32a>
 80019ba:	2b60      	cmp	r3, #96	@ 0x60
 80019bc:	d82e      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019be:	2b50      	cmp	r3, #80	@ 0x50
 80019c0:	d022      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x320>
 80019c2:	2b50      	cmp	r3, #80	@ 0x50
 80019c4:	d82a      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019c6:	2b40      	cmp	r3, #64	@ 0x40
 80019c8:	d019      	beq.n	80019fe <HAL_CAN_IRQHandler+0x316>
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d826      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019ce:	2b30      	cmp	r3, #48	@ 0x30
 80019d0:	d010      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x30c>
 80019d2:	2b30      	cmp	r3, #48	@ 0x30
 80019d4:	d822      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d002      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x2f8>
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d005      	beq.n	80019ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019de:	e01d      	b.n	8001a1c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019e8:	e019      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019f2:	e014      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019fc:	e00f      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a06:	e00a      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a10:	e005      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a1a:	e000      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            break;
 8001a1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2204      	movs	r2, #4
 8001a34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f868 	bl	8001b1e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	@ (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca0:	d301      	bcc.n	8001ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <SysTick_Config+0x40>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cae:	210f      	movs	r1, #15
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f7ff ff8e 	bl	8001bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <SysTick_Config+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cbe:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <SysTick_Config+0x40>)
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	e000e010 	.word	0xe000e010

08001cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff29 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff3e 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff8e 	bl	8001c28 <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5d 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff31 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffa2 	bl	8001c90 <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e165      	b.n	8002040 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8154 	bne.w	800203a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d005      	beq.n	8001daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d130      	bne.n	8001e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 0201 	and.w	r2, r3, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d017      	beq.n	8001e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d123      	bne.n	8001e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80ae 	beq.w	800203a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8002058 <HAL_GPIO_Init+0x300>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8002058 <HAL_GPIO_Init+0x300>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b5a      	ldr	r3, [pc, #360]	@ (8002058 <HAL_GPIO_Init+0x300>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efa:	4a58      	ldr	r2, [pc, #352]	@ (800205c <HAL_GPIO_Init+0x304>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4f      	ldr	r2, [pc, #316]	@ (8002060 <HAL_GPIO_Init+0x308>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d025      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4e      	ldr	r2, [pc, #312]	@ (8002064 <HAL_GPIO_Init+0x30c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01f      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4d      	ldr	r2, [pc, #308]	@ (8002068 <HAL_GPIO_Init+0x310>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	@ (800206c <HAL_GPIO_Init+0x314>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4b      	ldr	r2, [pc, #300]	@ (8002070 <HAL_GPIO_Init+0x318>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x20a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4a      	ldr	r2, [pc, #296]	@ (8002074 <HAL_GPIO_Init+0x31c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x206>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a49      	ldr	r2, [pc, #292]	@ (8002078 <HAL_GPIO_Init+0x320>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x202>
 8001f56:	2306      	movs	r3, #6
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x21c>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x21c>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x21c>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x21c>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x21c>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x21c>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x21c>
 8001f72:	2300      	movs	r3, #0
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f84:	4935      	ldr	r1, [pc, #212]	@ (800205c <HAL_GPIO_Init+0x304>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b3a      	ldr	r3, [pc, #232]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a31      	ldr	r2, [pc, #196]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a26      	ldr	r2, [pc, #152]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200a:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <HAL_GPIO_Init+0x324>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_GPIO_Init+0x324>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002034:	4a11      	ldr	r2, [pc, #68]	@ (800207c <HAL_GPIO_Init+0x324>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	f67f ae96 	bls.w	8001d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40021400 	.word	0x40021400
 8002078:	40021800 	.word	0x40021800
 800207c:	40013c00 	.word	0x40013c00

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800209c:	e003      	b.n	80020a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c4:	887a      	ldrh	r2, [r7, #2]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	041a      	lsls	r2, r3, #16
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	400b      	ands	r3, r1
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fcf4 	bl	8000af4 <HAL_GPIO_EXTI_Callback>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0cc      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b68      	ldr	r3, [pc, #416]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d90c      	bls.n	8002154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a58      	ldr	r2, [pc, #352]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a52      	ldr	r2, [pc, #328]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800218e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d044      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d119      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e067      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b37      	ldr	r3, [pc, #220]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4934      	ldr	r1, [pc, #208]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe fe2c 	bl	8000e64 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fe28 	bl	8000e64 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d20c      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a09      	ldr	r2, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fd8c 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08002be4 	.word	0x08002be4
 80022dc:	20000004 	.word	0x20000004
 80022e0:	20000008 	.word	0x20000008

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b0a6      	sub	sp, #152	@ 0x98
 80022ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800230a:	4bc8      	ldr	r3, [pc, #800]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b0c      	cmp	r3, #12
 8002314:	f200 817e 	bhi.w	8002614 <HAL_RCC_GetSysClockFreq+0x330>
 8002318:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <HAL_RCC_GetSysClockFreq+0x3c>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002355 	.word	0x08002355
 8002324:	08002615 	.word	0x08002615
 8002328:	08002615 	.word	0x08002615
 800232c:	08002615 	.word	0x08002615
 8002330:	0800235d 	.word	0x0800235d
 8002334:	08002615 	.word	0x08002615
 8002338:	08002615 	.word	0x08002615
 800233c:	08002615 	.word	0x08002615
 8002340:	08002365 	.word	0x08002365
 8002344:	08002615 	.word	0x08002615
 8002348:	08002615 	.word	0x08002615
 800234c:	08002615 	.word	0x08002615
 8002350:	080024cf 	.word	0x080024cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4bb6      	ldr	r3, [pc, #728]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800235a:	e15f      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4bb5      	ldr	r3, [pc, #724]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x350>)
 800235e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002362:	e15b      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002364:	4bb1      	ldr	r3, [pc, #708]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800236c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002370:	4bae      	ldr	r3, [pc, #696]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d031      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237c:	4bab      	ldr	r3, [pc, #684]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	2200      	movs	r2, #0
 8002384:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002386:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800238a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002390:	2300      	movs	r3, #0
 8002392:	667b      	str	r3, [r7, #100]	@ 0x64
 8002394:	4ba7      	ldr	r3, [pc, #668]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x350>)
 8002396:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800239a:	462a      	mov	r2, r5
 800239c:	fb03 f202 	mul.w	r2, r3, r2
 80023a0:	2300      	movs	r3, #0
 80023a2:	4621      	mov	r1, r4
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	4aa2      	ldr	r2, [pc, #648]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x350>)
 80023ac:	4621      	mov	r1, r4
 80023ae:	fba1 1202 	umull	r1, r2, r1, r2
 80023b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023b4:	460a      	mov	r2, r1
 80023b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80023b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80023ba:	4413      	add	r3, r2
 80023bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023c2:	2200      	movs	r2, #0
 80023c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80023c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80023d0:	f7fd ff18 	bl	8000204 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023de:	e064      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e0:	4b92      	ldr	r3, [pc, #584]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	2200      	movs	r2, #0
 80023e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80023ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80023ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023f4:	2300      	movs	r3, #0
 80023f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80023fc:	4622      	mov	r2, r4
 80023fe:	462b      	mov	r3, r5
 8002400:	f04f 0000 	mov.w	r0, #0
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	0159      	lsls	r1, r3, #5
 800240a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240e:	0150      	lsls	r0, r2, #5
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4621      	mov	r1, r4
 8002416:	1a51      	subs	r1, r2, r1
 8002418:	6139      	str	r1, [r7, #16]
 800241a:	4629      	mov	r1, r5
 800241c:	eb63 0301 	sbc.w	r3, r3, r1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800242e:	4659      	mov	r1, fp
 8002430:	018b      	lsls	r3, r1, #6
 8002432:	4651      	mov	r1, sl
 8002434:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002438:	4651      	mov	r1, sl
 800243a:	018a      	lsls	r2, r1, #6
 800243c:	4651      	mov	r1, sl
 800243e:	ebb2 0801 	subs.w	r8, r2, r1
 8002442:	4659      	mov	r1, fp
 8002444:	eb63 0901 	sbc.w	r9, r3, r1
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002454:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002458:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800245c:	4690      	mov	r8, r2
 800245e:	4699      	mov	r9, r3
 8002460:	4623      	mov	r3, r4
 8002462:	eb18 0303 	adds.w	r3, r8, r3
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	462b      	mov	r3, r5
 800246a:	eb49 0303 	adc.w	r3, r9, r3
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800247c:	4629      	mov	r1, r5
 800247e:	028b      	lsls	r3, r1, #10
 8002480:	4621      	mov	r1, r4
 8002482:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002486:	4621      	mov	r1, r4
 8002488:	028a      	lsls	r2, r1, #10
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002492:	2200      	movs	r2, #0
 8002494:	643b      	str	r3, [r7, #64]	@ 0x40
 8002496:	647a      	str	r2, [r7, #68]	@ 0x44
 8002498:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800249c:	f7fd feb2 	bl	8000204 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024aa:	4b60      	ldr	r3, [pc, #384]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	3301      	adds	r3, #1
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80024bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024cc:	e0a6      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ce:	4b57      	ldr	r3, [pc, #348]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024da:	4b54      	ldr	r3, [pc, #336]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d02a      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e6:	4b51      	ldr	r3, [pc, #324]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	099b      	lsrs	r3, r3, #6
 80024ec:	2200      	movs	r2, #0
 80024ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024f8:	2100      	movs	r1, #0
 80024fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x350>)
 80024fc:	fb03 f201 	mul.w	r2, r3, r1
 8002500:	2300      	movs	r3, #0
 8002502:	fb00 f303 	mul.w	r3, r0, r3
 8002506:	4413      	add	r3, r2
 8002508:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x350>)
 800250a:	fba0 1202 	umull	r1, r2, r0, r2
 800250e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002510:	460a      	mov	r2, r1
 8002512:	673a      	str	r2, [r7, #112]	@ 0x70
 8002514:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002516:	4413      	add	r3, r2
 8002518:	677b      	str	r3, [r7, #116]	@ 0x74
 800251a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800251e:	2200      	movs	r2, #0
 8002520:	633b      	str	r3, [r7, #48]	@ 0x30
 8002522:	637a      	str	r2, [r7, #52]	@ 0x34
 8002524:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002528:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800252c:	f7fd fe6a 	bl	8000204 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4613      	mov	r3, r2
 8002536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800253a:	e05b      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253c:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	2200      	movs	r2, #0
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
 8002554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002558:	4642      	mov	r2, r8
 800255a:	464b      	mov	r3, r9
 800255c:	f04f 0000 	mov.w	r0, #0
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	0159      	lsls	r1, r3, #5
 8002566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800256a:	0150      	lsls	r0, r2, #5
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4641      	mov	r1, r8
 8002572:	ebb2 0a01 	subs.w	sl, r2, r1
 8002576:	4649      	mov	r1, r9
 8002578:	eb63 0b01 	sbc.w	fp, r3, r1
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800258c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002590:	ebb2 040a 	subs.w	r4, r2, sl
 8002594:	eb63 050b 	sbc.w	r5, r3, fp
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	00eb      	lsls	r3, r5, #3
 80025a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a6:	00e2      	lsls	r2, r4, #3
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	4643      	mov	r3, r8
 80025ae:	18e3      	adds	r3, r4, r3
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	464b      	mov	r3, r9
 80025b4:	eb45 0303 	adc.w	r3, r5, r3
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c6:	4629      	mov	r1, r5
 80025c8:	028b      	lsls	r3, r1, #10
 80025ca:	4621      	mov	r1, r4
 80025cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d0:	4621      	mov	r1, r4
 80025d2:	028a      	lsls	r2, r1, #10
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025dc:	2200      	movs	r2, #0
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	61fa      	str	r2, [r7, #28]
 80025e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e6:	f7fd fe0d 	bl	8000204 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4613      	mov	r3, r2
 80025f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <HAL_RCC_GetSysClockFreq+0x348>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0f1b      	lsrs	r3, r3, #28
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002602:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002612:	e003      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800261a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002620:	4618      	mov	r0, r3
 8002622:	3798      	adds	r7, #152	@ 0x98
 8002624:	46bd      	mov	sp, r7
 8002626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	00f42400 	.word	0x00f42400
 8002634:	017d7840 	.word	0x017d7840

08002638 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e28d      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8083 	beq.w	800275e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002658:	4b94      	ldr	r3, [pc, #592]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b04      	cmp	r3, #4
 8002662:	d019      	beq.n	8002698 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002664:	4b91      	ldr	r3, [pc, #580]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
        || \
 800266c:	2b08      	cmp	r3, #8
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002670:	4b8e      	ldr	r3, [pc, #568]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800267c:	d00c      	beq.n	8002698 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b8b      	ldr	r3, [pc, #556]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d112      	bne.n	80026b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b88      	ldr	r3, [pc, #544]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002696:	d10b      	bne.n	80026b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4b84      	ldr	r3, [pc, #528]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05b      	beq.n	800275c <HAL_RCC_OscConfig+0x124>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d157      	bne.n	800275c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e25a      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x90>
 80026ba:	4b7c      	ldr	r3, [pc, #496]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7b      	ldr	r2, [pc, #492]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e01d      	b.n	8002704 <HAL_RCC_OscConfig+0xcc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0xb4>
 80026d2:	4b76      	ldr	r3, [pc, #472]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a75      	ldr	r2, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b73      	ldr	r3, [pc, #460]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a72      	ldr	r2, [pc, #456]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e00b      	b.n	8002704 <HAL_RCC_OscConfig+0xcc>
 80026ec:	4b6f      	ldr	r3, [pc, #444]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6e      	ldr	r2, [pc, #440]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b6c      	ldr	r3, [pc, #432]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6b      	ldr	r2, [pc, #428]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80026fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fbaa 	bl	8000e64 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fba6 	bl	8000e64 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	@ 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e21f      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b61      	ldr	r3, [pc, #388]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0xdc>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fb96 	bl	8000e64 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fb92 	bl	8000e64 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	@ 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e20b      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	4b57      	ldr	r3, [pc, #348]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x104>
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d06f      	beq.n	800284a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800276a:	4b50      	ldr	r3, [pc, #320]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	d017      	beq.n	80027a6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002776:	4b4d      	ldr	r3, [pc, #308]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
        || \
 800277e:	2b08      	cmp	r3, #8
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002782:	4b4a      	ldr	r3, [pc, #296]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b44      	ldr	r3, [pc, #272]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x186>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1d3      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4937      	ldr	r1, [pc, #220]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_OscConfig+0x278>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fb3f 	bl	8000e64 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7fe fb3b 	bl	8000e64 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1b4      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4925      	ldr	r1, [pc, #148]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b24      	ldr	r3, [pc, #144]	@ (80028b0 <HAL_RCC_OscConfig+0x278>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fb1e 	bl	8000e64 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7fe fb1a 	bl	8000e64 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e193      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d036      	beq.n	80028c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_RCC_OscConfig+0x27c>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fafe 	bl	8000e64 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe fafa 	bl	8000e64 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e173      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x234>
 800288a:	e01b      	b.n	80028c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_RCC_OscConfig+0x27c>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7fe fae7 	bl	8000e64 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	e00e      	b.n	80028b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289a:	f7fe fae3 	bl	8000e64 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d907      	bls.n	80028b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e15c      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470000 	.word	0x42470000
 80028b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ea      	bne.n	800289a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8097 	beq.w	8002a00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d6:	4b83      	ldr	r3, [pc, #524]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	4a7e      	ldr	r2, [pc, #504]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b79      	ldr	r3, [pc, #484]	@ (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b76      	ldr	r3, [pc, #472]	@ (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	@ (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe faa3 	bl	8000e64 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fa9f 	bl	8000e64 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e118      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae8 <HAL_RCC_OscConfig+0x4b0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x31e>
 8002948:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a65      	ldr	r2, [pc, #404]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x358>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x340>
 800295e:	4b61      	ldr	r3, [pc, #388]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a60      	ldr	r2, [pc, #384]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x358>
 8002978:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a59      	ldr	r2, [pc, #356]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
 8002984:	4b57      	ldr	r3, [pc, #348]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	4a56      	ldr	r2, [pc, #344]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fa64 	bl	8000e64 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe fa60 	bl	8000e64 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0d7      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ee      	beq.n	80029a0 <HAL_RCC_OscConfig+0x368>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe fa4e 	bl	8000e64 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe fa4a 	bl	8000e64 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0c1      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	4b40      	ldr	r3, [pc, #256]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ee      	bne.n	80029cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 80029fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80ad 	beq.w	8002b64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d060      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d145      	bne.n	8002aaa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b33      	ldr	r3, [pc, #204]	@ (8002aec <HAL_RCC_OscConfig+0x4b4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fa1e 	bl	8000e64 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fa1a 	bl	8000e64 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e093      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	071b      	lsls	r3, r3, #28
 8002a76:	491b      	ldr	r1, [pc, #108]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_RCC_OscConfig+0x4b4>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe f9ef 	bl	8000e64 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe f9eb 	bl	8000e64 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e064      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x452>
 8002aa8:	e05c      	b.n	8002b64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <HAL_RCC_OscConfig+0x4b4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe f9d8 	bl	8000e64 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe f9d4 	bl	8000e64 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04d      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x480>
 8002ad6:	e045      	b.n	8002b64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e040      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <HAL_RCC_OscConfig+0x538>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d030      	beq.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d129      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d122      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d119      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10f      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <memset>:
 8002b74:	4402      	add	r2, r0
 8002b76:	4603      	mov	r3, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <memset+0xa>
 8002b7c:	4770      	bx	lr
 8002b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b82:	e7f9      	b.n	8002b78 <memset+0x4>

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	4d0d      	ldr	r5, [pc, #52]	@ (8002bbc <__libc_init_array+0x38>)
 8002b88:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc0 <__libc_init_array+0x3c>)
 8002b8a:	1b64      	subs	r4, r4, r5
 8002b8c:	10a4      	asrs	r4, r4, #2
 8002b8e:	2600      	movs	r6, #0
 8002b90:	42a6      	cmp	r6, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	4d0b      	ldr	r5, [pc, #44]	@ (8002bc4 <__libc_init_array+0x40>)
 8002b96:	4c0c      	ldr	r4, [pc, #48]	@ (8002bc8 <__libc_init_array+0x44>)
 8002b98:	f000 f818 	bl	8002bcc <_init>
 8002b9c:	1b64      	subs	r4, r4, r5
 8002b9e:	10a4      	asrs	r4, r4, #2
 8002ba0:	2600      	movs	r6, #0
 8002ba2:	42a6      	cmp	r6, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bac:	4798      	blx	r3
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb6:	4798      	blx	r3
 8002bb8:	3601      	adds	r6, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	08002bfc 	.word	0x08002bfc
 8002bc0:	08002bfc 	.word	0x08002bfc
 8002bc4:	08002bfc 	.word	0x08002bfc
 8002bc8:	08002c00 	.word	0x08002c00

08002bcc <_init>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr

08002bd8 <_fini>:
 8002bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bda:	bf00      	nop
 8002bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bde:	bc08      	pop	{r3}
 8002be0:	469e      	mov	lr, r3
 8002be2:	4770      	bx	lr
