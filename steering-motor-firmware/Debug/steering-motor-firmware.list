
steering-motor-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08007eb8  08007eb8  00008eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008258  08008258  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008258  08008258  00009258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008260  08008260  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008260  08008260  00009260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008264  08008264  00009264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08008268  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001e4  0800844c  0000a1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800844c  0000a544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000febf  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002657  00000000  00000000  0001a0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdc  00000000  00000000  0001d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000373e  00000000  00000000  0001e25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127b5  00000000  00000000  0002199a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e6e  00000000  00000000  0003414f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010afbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  0010b000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00110008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e9c 	.word	0x08007e9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007e9c 	.word	0x08007e9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <set_counts>:
#include "math.h"
#include "main.h"

int counts;

int set_counts(int n){
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	int max_count = 16*516*4.0;
 8000f1c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000f20:	613b      	str	r3, [r7, #16]
	int newcounts = ((n%max_count)+max_count)%max_count;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	fb01 f202 	mul.w	r2, r1, r2
 8000f30:	1a9a      	subs	r2, r3, r2
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f3c:	6939      	ldr	r1, [r7, #16]
 8000f3e:	fb01 f202 	mul.w	r2, r1, r2
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
	int diff = newcounts-counts;
 8000f46:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <set_counts+0xbc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	60bb      	str	r3, [r7, #8]
	int direction;
	if (diff > 0 && abs(diff) > max_count/2){
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	dd0d      	ble.n	8000f72 <set_counts+0x5e>
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f5c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	0fd9      	lsrs	r1, r3, #31
 8000f64:	440b      	add	r3, r1
 8000f66:	105b      	asrs	r3, r3, #1
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dd02      	ble.n	8000f72 <set_counts+0x5e>
		// ccw
		direction = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e023      	b.n	8000fba <set_counts+0xa6>
	} else if (diff > 0 && abs(diff) < max_count/2) {
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dd0d      	ble.n	8000f94 <set_counts+0x80>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f7e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	0fd9      	lsrs	r1, r3, #31
 8000f86:	440b      	add	r3, r1
 8000f88:	105b      	asrs	r3, r3, #1
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	da02      	bge.n	8000f94 <set_counts+0x80>
		// cw
		direction = 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e012      	b.n	8000fba <set_counts+0xa6>
	} else if (diff < 0 && abs(diff) > max_count/2) {
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da0d      	bge.n	8000fb6 <set_counts+0xa2>
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fa0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	0fd9      	lsrs	r1, r3, #31
 8000fa8:	440b      	add	r3, r1
 8000faa:	105b      	asrs	r3, r3, #1
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dd02      	ble.n	8000fb6 <set_counts+0xa2>
		// cw
		direction = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e001      	b.n	8000fba <set_counts+0xa6>
	}else {
		// ccw
		direction = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
	}
	counts = newcounts;
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <set_counts+0xbc>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6013      	str	r3, [r2, #0]
	return direction;
 8000fc0:	697b      	ldr	r3, [r7, #20]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000200 	.word	0x20000200

08000fd4 <get_counts>:

int get_counts(){
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	return counts;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <get_counts+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000200 	.word	0x20000200
 8000fec:	00000000 	.word	0x00000000

08000ff0 <angle_to_count>:
		return 2*3.14+angle;
	}
	return angle;
}

int angle_to_count(double n){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0b00 	vstr	d0, [r7]
	double new_n = fabs(fmod(n,2.0*3.14));
 8000ffa:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001070 <angle_to_count+0x80>
 8000ffe:	ed97 0b00 	vldr	d0, [r7]
 8001002:	f006 fe15 	bl	8007c30 <fmod>
 8001006:	ec53 2b10 	vmov	r2, r3, d0
 800100a:	4611      	mov	r1, r2
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001012:	60fb      	str	r3, [r7, #12]
	return (int) ((new_n/(2.0*3.14))*16.0*516.0*4.0);
 8001014:	a316      	add	r3, pc, #88	@ (adr r3, 8001070 <angle_to_count+0x80>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800101e:	f7ff fc35 	bl	800088c <__aeabi_ddiv>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <angle_to_count+0x88>)
 8001030:	f7ff fb02 	bl	8000638 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <angle_to_count+0x8c>)
 8001042:	f7ff faf9 	bl	8000638 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <angle_to_count+0x90>)
 8001054:	f7ff faf0 	bl	8000638 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd9a 	bl	8000b98 <__aeabi_d2iz>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	51eb851f 	.word	0x51eb851f
 8001074:	40191eb8 	.word	0x40191eb8
 8001078:	40300000 	.word	0x40300000
 800107c:	40802000 	.word	0x40802000
 8001080:	40100000 	.word	0x40100000
 8001084:	00000000 	.word	0x00000000

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f000 ff27 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f88d 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fa8d 	bl	80015b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800109a:	f000 f96f 	bl	800137c <MX_TIM2_Init>
  MX_TIM5_Init();
 800109e:	f000 f9c1 	bl	8001424 <MX_TIM5_Init>
  MX_TIM8_Init();
 80010a2:	f000 fa0d 	bl	80014c0 <MX_TIM8_Init>
  MX_TIM1_Init();
 80010a6:	f000 f919 	bl	80012dc <MX_TIM1_Init>
  MX_CAN2_Init();
 80010aa:	f000 f8e1 	bl	8001270 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 80010ae:	f000 fa57 	bl	8001560 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



//  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010b2:	213c      	movs	r1, #60	@ 0x3c
 80010b4:	4836      	ldr	r0, [pc, #216]	@ (8001190 <main+0x108>)
 80010b6:	f002 ffe2 	bl	800407e <HAL_TIM_Encoder_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80010ba:	2100      	movs	r1, #0
 80010bc:	4835      	ldr	r0, [pc, #212]	@ (8001194 <main+0x10c>)
 80010be:	f003 fbbb 	bl	8004838 <HAL_TIMEx_PWMN_Start>
  set_motor_speed(0);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 fb1e 	bl	8001704 <set_motor_speed>
  set_motor_direction(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 fb3b 	bl	8001744 <set_motor_direction>
  TIM2->CNT = 0;
 80010ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  double goal = 3.14/2;
 80010d6:	a32c      	add	r3, pc, #176	@ (adr r3, 8001188 <main+0x100>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
//  printf("goal %f\r\n");
  setPIDGoalA(goal);
 80010e0:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80010e4:	f000 fbde 	bl	80018a4 <setPIDGoalA>

  /* CAN initialization below */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 0;  // anything between 0 to SlaveStartFilterBank
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
//    canfilterconfig.FilterIdHigh = 0x123<<5;
    canfilterconfig.FilterIdHigh = 0x0000;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0000; // comment out if we don't need filter in the end
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
//    canfilterconfig.FilterMaskIdHigh = 0x7FF<<5;
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0; // all filters may be 0000. Figure out later.
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 14;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 800110c:	230e      	movs	r3, #14
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24



  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4820      	ldr	r0, [pc, #128]	@ (8001198 <main+0x110>)
 8001116:	f001 f875 	bl	8002204 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan2);
 800111a:	481f      	ldr	r0, [pc, #124]	@ (8001198 <main+0x110>)
 800111c:	f001 f950 	bl	80023c0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001120:	2102      	movs	r1, #2
 8001122:	481d      	ldr	r0, [pc, #116]	@ (8001198 <main+0x110>)
 8001124:	f001 fbaa 	bl	800287c <HAL_CAN_ActivateNotification>

  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001128:	2110      	movs	r1, #16
 800112a:	481b      	ldr	r0, [pc, #108]	@ (8001198 <main+0x110>)
 800112c:	f001 fba6 	bl	800287c <HAL_CAN_ActivateNotification>

  TxHeader.StdId = 0x321;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <main+0x114>)
 8001132:	f240 3221 	movw	r2, #801	@ 0x321
 8001136:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <main+0x114>)
 800113a:	2201      	movs	r2, #1
 800113c:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <main+0x114>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <main+0x114>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 1;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <main+0x114>)
 800114c:	2201      	movs	r2, #1
 800114e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <main+0x114>)
 8001152:	2200      	movs	r2, #0
 8001154:	751a      	strb	r2, [r3, #20]
  txData[0] = 1;
 8001156:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <main+0x118>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	  /*HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(1000);*/



	  HAL_CAN_AddTxMessage(&hcan2, &TxHeader, txData, &TxMailbox);
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <main+0x11c>)
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <main+0x118>)
 8001160:	490e      	ldr	r1, [pc, #56]	@ (800119c <main+0x114>)
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <main+0x110>)
 8001164:	f001 f970 	bl	8002448 <HAL_CAN_AddTxMessage>



//	  setPIDGoalA(90);
	  HAL_Delay(500);
 8001168:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800116c:	f000 ff2a 	bl	8001fc4 <HAL_Delay>

	  if (datacheck == 1) {
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <main+0x120>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d1f1      	bne.n	800115c <main+0xd4>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <main+0x124>)
 800117e:	f002 f888 	bl	8003292 <HAL_GPIO_TogglePin>
	  HAL_CAN_AddTxMessage(&hcan2, &TxHeader, txData, &TxMailbox);
 8001182:	e7eb      	b.n	800115c <main+0xd4>
 8001184:	f3af 8000 	nop.w
 8001188:	51eb851f 	.word	0x51eb851f
 800118c:	3ff91eb8 	.word	0x3ff91eb8
 8001190:	20000274 	.word	0x20000274
 8001194:	20000304 	.word	0x20000304
 8001198:	20000204 	.word	0x20000204
 800119c:	20000394 	.word	0x20000394
 80011a0:	200003c8 	.word	0x200003c8
 80011a4:	200003d8 	.word	0x200003d8
 80011a8:	200003dc 	.word	0x200003dc
 80011ac:	40020800 	.word	0x40020800

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	@ 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2234      	movs	r2, #52	@ 0x34
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fe0f 	bl	8005de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <SystemClock_Config+0xb8>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <SystemClock_Config+0xb8>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <SystemClock_Config+0xb8>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <SystemClock_Config+0xbc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <SystemClock_Config+0xbc>)
 80011fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <SystemClock_Config+0xbc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001210:	2301      	movs	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001218:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fb98 	bl	8003958 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800122e:	f000 fa63 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001236:	2301      	movs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f002 f839 	bl	80032c8 <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800125c:	f000 fa4c 	bl	80016f8 <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3750      	adds	r7, #80	@ 0x50
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <MX_CAN2_Init+0x64>)
 8001276:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <MX_CAN2_Init+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_CAN2_Init+0x64>)
 800127c:	2204      	movs	r2, #4
 800127e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <MX_CAN2_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <MX_CAN2_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_CAN2_Init+0x64>)
 800128e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001292:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_CAN2_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_CAN2_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <MX_CAN2_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <MX_CAN2_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_CAN2_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_CAN2_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_CAN2_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_CAN2_Init+0x64>)
 80012c0:	f000 fea4 	bl	800200c <HAL_CAN_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80012ca:	f000 fa15 	bl	80016f8 <Error_Handler>



  /* USER CODE END CAN2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000204 	.word	0x20000204
 80012d8:	40006800 	.word	0x40006800

080012dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <MX_TIM1_Init+0x98>)
 80012fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001378 <MX_TIM1_Init+0x9c>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_TIM1_Init+0x98>)
 8001300:	220f      	movs	r2, #15
 8001302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <MX_TIM1_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_TIM1_Init+0x98>)
 800130c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001310:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_TIM1_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_TIM1_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_TIM1_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001324:	4813      	ldr	r0, [pc, #76]	@ (8001374 <MX_TIM1_Init+0x98>)
 8001326:	f002 fdb5 	bl	8003e94 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001330:	f000 f9e2 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <MX_TIM1_Init+0x98>)
 8001342:	f003 f81a 	bl	800437a <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800134c:	f000 f9d4 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_TIM1_Init+0x98>)
 800135e:	f003 fb25 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001368:	f000 f9c6 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000022c 	.word	0x2000022c
 8001378:	40010000 	.word	0x40010000

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	@ 0x30
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fd29 	bl	8005de2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001398:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_TIM2_Init+0xa4>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_TIM2_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <MX_TIM2_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_TIM2_Init+0xa4>)
 80013ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_TIM2_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <MX_TIM2_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c0:	2303      	movs	r3, #3
 80013c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	@ (8001420 <MX_TIM2_Init+0xa4>)
 80013ec:	f002 fda1 	bl	8003f32 <HAL_TIM_Encoder_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013f6:	f000 f97f 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_TIM2_Init+0xa4>)
 8001408:	f003 fad0 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001412:	f000 f971 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	@ 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000274 	.word	0x20000274

08001424 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_TIM5_Init+0x94>)
 8001442:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <MX_TIM5_Init+0x98>)
 8001444:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_TIM5_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_TIM5_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_TIM5_Init+0x94>)
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_TIM5_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_TIM5_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001466:	4814      	ldr	r0, [pc, #80]	@ (80014b8 <MX_TIM5_Init+0x94>)
 8001468:	f002 fd14 	bl	8003e94 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001472:	f000 f941 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_TIM5_Init+0x94>)
 8001484:	f002 ff79 	bl	800437a <HAL_TIM_ConfigClockSource>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800148e:	f000 f933 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <MX_TIM5_Init+0x94>)
 80014a0:	f003 fa84 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80014aa:	f000 f925 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002bc 	.word	0x200002bc
 80014bc:	40000c00 	.word	0x40000c00

080014c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <MX_TIM8_Init+0x98>)
 80014de:	4a1f      	ldr	r2, [pc, #124]	@ (800155c <MX_TIM8_Init+0x9c>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_TIM8_Init+0x98>)
 80014e4:	220f      	movs	r2, #15
 80014e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <MX_TIM8_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_TIM8_Init+0x98>)
 80014f0:	2263      	movs	r2, #99	@ 0x63
 80014f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_TIM8_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_TIM8_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_TIM8_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001506:	4814      	ldr	r0, [pc, #80]	@ (8001558 <MX_TIM8_Init+0x98>)
 8001508:	f002 fcc4 	bl	8003e94 <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 8001512:	f000 f8f1 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM8_Init+0x98>)
 8001524:	f002 ff29 	bl	800437a <HAL_TIM_ConfigClockSource>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 800152e:	f000 f8e3 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM8_Init+0x98>)
 8001540:	f003 fa34 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 800154a:	f000 f8d5 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000304 	.word	0x20000304
 800155c:	40010400 	.word	0x40010400

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f003 fabd 	bl	8004b16 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f8a9 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000034c 	.word	0x2000034c
 80015b0:	40004400 	.word	0x40004400

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b27      	ldr	r3, [pc, #156]	@ (800166c <MX_GPIO_Init+0xb8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a26      	ldr	r2, [pc, #152]	@ (800166c <MX_GPIO_Init+0xb8>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <MX_GPIO_Init+0xb8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <MX_GPIO_Init+0xb8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a1f      	ldr	r2, [pc, #124]	@ (800166c <MX_GPIO_Init+0xb8>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_GPIO_Init+0xb8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <MX_GPIO_Init+0xb8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a18      	ldr	r2, [pc, #96]	@ (800166c <MX_GPIO_Init+0xb8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_GPIO_Init+0xb8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_GPIO_Init+0xb8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <MX_GPIO_Init+0xb8>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_GPIO_Init+0xb8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001640:	480b      	ldr	r0, [pc, #44]	@ (8001670 <MX_GPIO_Init+0xbc>)
 8001642:	f001 fe0d 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_GPIO_Init+0xbc>)
 8001660:	f001 fc6a 	bl	8002f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800

08001674 <HAL_CAN_RxFifo0MsgPendingCallback>:
//void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
//	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, rxData);
//	datacheck = 1;
//}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    // Keep reading until FIFO is empty, but only keep the last message
    while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0) {
 800167c:	e005      	b.n	800168a <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
        HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxData);
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001680:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 ffaf 	bl	80025e8 <HAL_CAN_GetRxMessage>
    while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0) {
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f001 f8cd 	bl	800282c <HAL_CAN_GetRxFifoFillLevel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f2      	bne.n	800167e <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
    }
    datacheck = 1;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200003d0 	.word	0x200003d0
 80016ac:	200003ac 	.word	0x200003ac
 80016b0:	200003dc 	.word	0x200003dc

080016b4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    datacheck = 2;  // Different flag to identify which FIFO
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200003dc 	.word	0x200003dc

080016d4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016dc:	1d39      	adds	r1, r7, #4
 80016de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016e2:	2201      	movs	r2, #1
 80016e4:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <__io_putchar+0x20>)
 80016e6:	f003 fa66 	bl	8004bb6 <HAL_UART_Transmit>

  return ch;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000034c 	.word	0x2000034c

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <set_motor_speed>:
	int counts = get_counts();
	setPIDGoalA(counts);
	set_motor_speed(0);
}

void set_motor_speed(int n){
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	TIM8->CCR1 = n;
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <set_motor_speed+0x1c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40010400 	.word	0x40010400

08001724 <set_actual_motor_direction>:

int get_actual_motor_direction(){
	return actual_direction;
}

void set_actual_motor_direction(int n){
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	actual_direction = n;
 800172c:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <set_actual_motor_direction+0x1c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000004 	.word	0x20000004

08001744 <set_motor_direction>:


void set_motor_direction(int n){
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	}
	/*for (int i = 0 ; i<100 ; i++) {
					set_motor_speed(i);
					delay_us(100);
	}*/
	direction = n;
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <set_motor_direction+0x1c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000000 	.word	0x20000000

08001764 <updatePID>:
	 *
	 * You should additionally set your distance and error goal values (and your oldDistanceError and oldAngleError) to zero.
	 */
}

void updatePID() {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
	 *
	 * For assignment 3.2: implement this function so it calculates distanceError as the difference between your goal distance and the average of
	 * your left and right encoder counts. Calculate angleError as the difference between your goal angle and the difference between your left and
	 * right encoder counts. Refer to stocked example document on the google drive for some pointers.
	 */
	angleError = atomic_load(&goalAngle) - get_counts();
 800176a:	4b48      	ldr	r3, [pc, #288]	@ (800188c <updatePID+0x128>)
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f3bf 8f5b 	dmb	ish
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f3bf 8f5b 	dmb	ish
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687c      	ldr	r4, [r7, #4]
 800177e:	f7ff fc29 	bl	8000fd4 <get_counts>
 8001782:	4603      	mov	r3, r0
 8001784:	1ae3      	subs	r3, r4, r3
 8001786:	4a42      	ldr	r2, [pc, #264]	@ (8001890 <updatePID+0x12c>)
 8001788:	6013      	str	r3, [r2, #0]
	if (abs(angleError) > HALF_COUNTS) { // the units need to be fixed but this gets the best path
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <updatePID+0x12c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	bfb8      	it	lt
 8001792:	425b      	neglt	r3, r3
 8001794:	f5b3 4f81 	cmp.w	r3, #16512	@ 0x4080
 8001798:	dd10      	ble.n	80017bc <updatePID+0x58>
		if (angleError > 0) {
 800179a:	4b3d      	ldr	r3, [pc, #244]	@ (8001890 <updatePID+0x12c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	dd06      	ble.n	80017b0 <updatePID+0x4c>
			angleError = angleError - MAX_COUNTS;
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <updatePID+0x12c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f5a3 4301 	sub.w	r3, r3, #33024	@ 0x8100
 80017aa:	4a39      	ldr	r2, [pc, #228]	@ (8001890 <updatePID+0x12c>)
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e005      	b.n	80017bc <updatePID+0x58>
		}
		else {
			angleError = angleError + MAX_COUNTS;
 80017b0:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <updatePID+0x12c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 4301 	add.w	r3, r3, #33024	@ 0x8100
 80017b8:	4a35      	ldr	r2, [pc, #212]	@ (8001890 <updatePID+0x12c>)
 80017ba:	6013      	str	r3, [r2, #0]
		}
	}


    angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 80017bc:	4b34      	ldr	r3, [pc, #208]	@ (8001890 <updatePID+0x12c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c8:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <updatePID+0x130>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <updatePID+0x12c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <updatePID+0x134>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e4:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <updatePID+0x138>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f6:	ee17 2a90 	vmov	r2, s15
 80017fa:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <updatePID+0x13c>)
 80017fc:	601a      	str	r2, [r3, #0]
//	printf("correction %d\r\n", angleCorrection);
	if (angleCorrection < 0){
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <updatePID+0x13c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	da03      	bge.n	800180e <updatePID+0xaa>
		set_motor_direction(0);
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff ff9c 	bl	8001744 <set_motor_direction>
 800180c:	e002      	b.n	8001814 <updatePID+0xb0>
	} else{
		set_motor_direction(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff ff98 	bl	8001744 <set_motor_direction>
	}
	if (abs(angleCorrection) > 100) {
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <updatePID+0x13c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	bfb8      	it	lt
 800181c:	425b      	neglt	r3, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	dd02      	ble.n	8001828 <updatePID+0xc4>
		angleCorrection = 100;
 8001822:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <updatePID+0x13c>)
 8001824:	2264      	movs	r2, #100	@ 0x64
 8001826:	601a      	str	r2, [r3, #0]
	}
	oldAngleError = angleError;
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <updatePID+0x12c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <updatePID+0x134>)
 800182e:	6013      	str	r3, [r2, #0]
	if (abs(angleError) <  100){
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <updatePID+0x12c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8001838:	db07      	blt.n	800184a <updatePID+0xe6>
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <updatePID+0x12c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b63      	cmp	r3, #99	@ 0x63
 8001840:	dc03      	bgt.n	800184a <updatePID+0xe6>
		set_motor_speed(0);
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff ff5e 	bl	8001704 <set_motor_speed>
		return;
 8001848:	e01c      	b.n	8001884 <updatePID+0x120>
	}
	if (goalAngle == 0) {
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <updatePID+0x128>)
 800184c:	f3bf 8f5b 	dmb	ish
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f3bf 8f5b 	dmb	ish
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <updatePID+0x116>
		if (abs(angleError) < 300) {
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <updatePID+0x12c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001866:	dd08      	ble.n	800187a <updatePID+0x116>
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <updatePID+0x12c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001870:	da03      	bge.n	800187a <updatePID+0x116>
			set_motor_speed(0);
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff ff46 	bl	8001704 <set_motor_speed>
			return;
 8001878:	e004      	b.n	8001884 <updatePID+0x120>
		}
	}
	set_motor_speed(angleCorrection);
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <updatePID+0x13c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff40 	bl	8001704 <set_motor_speed>

}
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	200003ec 	.word	0x200003ec
 8001890:	200003e0 	.word	0x200003e0
 8001894:	20000008 	.word	0x20000008
 8001898:	200003e8 	.word	0x200003e8
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	200003e4 	.word	0x200003e4

080018a4 <setPIDGoalA>:
	 * For assignment 3.1: this function does not need to do anything.
	 * For assignment 3.2: this function should set a variable that stores the goal distance.
	 */
}

void setPIDGoalA(double angle) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	ed87 0b00 	vstr	d0, [r7]
//	printf("set goal %f\r\n", angle);
	int counts = angle_to_count(angle);
 80018ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018b2:	f7ff f971 	bl	8000b98 <__aeabi_d2iz>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb99 	bl	8000ff0 <angle_to_count>
 80018be:	6178      	str	r0, [r7, #20]
	atomic_store(&goalAngle, angle_to_count(counts));
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <setPIDGoalA+0x44>)
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	6978      	ldr	r0, [r7, #20]
 80018c6:	f7ff fb93 	bl	8000ff0 <angle_to_count>
 80018ca:	4603      	mov	r3, r0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	461a      	mov	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f3bf 8f5b 	dmb	ish
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f3bf 8f5b 	dmb	ish
//	printf("goal %d\r\n", goalAngle);
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200003ec 	.word	0x200003ec

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001938 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001900:	6453      	str	r3, [r2, #68]	@ 0x44
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <HAL_MspInit+0x4c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2c      	ldr	r2, [pc, #176]	@ (8001a0c <HAL_CAN_MspInit+0xd0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d151      	bne.n	8001a02 <HAL_CAN_MspInit+0xc6>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	4a2a      	ldr	r2, [pc, #168]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 8001968:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800196c:	6413      	str	r3, [r2, #64]	@ 0x40
 800196e:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a23      	ldr	r2, [pc, #140]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 8001984:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <HAL_CAN_MspInit+0xd4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019b2:	2360      	movs	r3, #96	@ 0x60
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019c2:	2309      	movs	r3, #9
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <HAL_CAN_MspInit+0xd8>)
 80019ce:	f001 fab3 	bl	8002f38 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	203f      	movs	r0, #63	@ 0x3f
 80019d8:	f001 fa77 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80019dc:	203f      	movs	r0, #63	@ 0x3f
 80019de:	f001 fa90 	bl	8002f02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2040      	movs	r0, #64	@ 0x40
 80019e8:	f001 fa6f 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80019ec:	2040      	movs	r0, #64	@ 0x40
 80019ee:	f001 fa88 	bl	8002f02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2041      	movs	r0, #65	@ 0x41
 80019f8:	f001 fa67 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80019fc:	2041      	movs	r0, #65	@ 0x41
 80019fe:	f001 fa80 	bl	8002f02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40006800 	.word	0x40006800
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020400 	.word	0x40020400

08001a18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a26      	ldr	r2, [pc, #152]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10e      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a46:	e036      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10e      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
}
 8001a6e:	e022      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a15      	ldr	r2, [pc, #84]	@ (8001acc <HAL_TIM_Base_MspInit+0xb4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11d      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a10      	ldr	r2, [pc, #64]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xac>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	202b      	movs	r0, #43	@ 0x2b
 8001a9c:	f001 fa15 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001aa0:	202b      	movs	r0, #43	@ 0x2b
 8001aa2:	f001 fa2e 	bl	8002f02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	202c      	movs	r0, #44	@ 0x2c
 8001aac:	f001 fa0d 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ab0:	202c      	movs	r0, #44	@ 0x2c
 8001ab2:	f001 fa26 	bl	8002f02 <HAL_NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40000c00 	.word	0x40000c00
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af0:	d12b      	bne.n	8001b4a <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a16      	ldr	r2, [pc, #88]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a0f      	ldr	r2, [pc, #60]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <HAL_TIM_Encoder_MspInit+0x88>)
 8001b46:	f001 f9f7 	bl	8002f38 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	@ 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000

08001b5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_UART_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_UART_MspInit+0x8c>)
 8001bd2:	f001 f9b1 	bl	8002f38 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f000 f99f 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8001c46:	f000 f90d 	bl	8001e64 <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001c56:	f002 faa0 	bl	800419a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000304 	.word	0x20000304

08001c64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001c6a:	f002 fa96 	bl	800419a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000304 	.word	0x20000304

08001c78 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <CAN2_TX_IRQHandler+0x10>)
 8001c7e:	f000 fe23 	bl	80028c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000204 	.word	0x20000204

08001c8c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <CAN2_RX0_IRQHandler+0x10>)
 8001c92:	f000 fe19 	bl	80028c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000204 	.word	0x20000204

08001ca0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001ca4:	4802      	ldr	r0, [pc, #8]	@ (8001cb0 <CAN2_RX1_IRQHandler+0x10>)
 8001ca6:	f000 fe0f 	bl	80028c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000204 	.word	0x20000204

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cce:	f004 f8db 	bl	8005e88 <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf6:	bf00      	nop
 8001cf8:	e7fd      	b.n	8001cf6 <_exit+0x12>

08001cfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e00a      	b.n	8001d22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d0c:	f3af 8000 	nop.w
 8001d10:	4601      	mov	r1, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	60ba      	str	r2, [r7, #8]
 8001d18:	b2ca      	uxtb	r2, r1
 8001d1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbf0      	blt.n	8001d0c <_read+0x12>
  }

  return len;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e009      	b.n	8001d5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	60ba      	str	r2, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fcc0 	bl	80016d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbf1      	blt.n	8001d46 <_write+0x12>
  }
  return len;
 8001d62:	687b      	ldr	r3, [r7, #4]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_close>:

int _close(int file)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d94:	605a      	str	r2, [r3, #4]
  return 0;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_isatty>:

int _isatty(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f004 f840 	bl	8005e88 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	200003f0 	.word	0x200003f0
 8001e3c:	20000548 	.word	0x20000548

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <SysTickFunction>:
#include "pid.h"
#include "encoder.h"
#include "stdio.h"
#include "motor.h"

void SysTickFunction(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */


	updatePID();
 8001e6a:	f7ff fc7b 	bl	8001764 <updatePID>
	int movementDir = set_counts((int16_t) TIM2->CNT);
 8001e6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f84c 	bl	8000f14 <set_counts>
 8001e7c:	6078      	str	r0, [r7, #4]
	set_actual_motor_direction(movementDir);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fc50 	bl	8001724 <set_actual_motor_direction>
//			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
//		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
//		resetEncoders();
//		TIM1->CNT = (int16_t) difference;
//	}
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e90:	f7ff ffd6 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f003 ffeb 	bl	8005e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff f8e3 	bl	8001088 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ed0:	08008268 	.word	0x08008268
  ldr r2, =_sbss
 8001ed4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ed8:	20000544 	.word	0x20000544

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <HAL_Init+0x40>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_Init+0x40>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <HAL_Init+0x40>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 ffd3 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff fcea 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 ffeb 	bl	8002f1e <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 ffb3 	bl	8002eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	20000018 	.word	0x20000018
 8001f80:	20000014 	.word	0x20000014

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000018 	.word	0x20000018
 8001fa8:	200003f4 	.word	0x200003f4

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200003f4 	.word	0x200003f4

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000018 	.word	0x20000018

0800200c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0ed      	b.n	80021fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fc86 	bl	800193c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff ffb4 	bl	8001fac <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002046:	e012      	b.n	800206e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002048:	f7ff ffb0 	bl	8001fac <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d90b      	bls.n	800206e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0c5      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0e5      	beq.n	8002048 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0202 	bic.w	r2, r2, #2
 800208a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800208c:	f7ff ff8e 	bl	8001fac <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002092:	e012      	b.n	80020ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002094:	f7ff ff8a 	bl	8001fac <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b0a      	cmp	r3, #10
 80020a0:	d90b      	bls.n	80020ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2205      	movs	r2, #5
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e09f      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e5      	bne.n	8002094 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e007      	b.n	80020f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7e5b      	ldrb	r3, [r3, #25]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e007      	b.n	800211c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e9b      	ldrb	r3, [r3, #26]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e007      	b.n	8002146 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0220 	bic.w	r2, r2, #32
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7edb      	ldrb	r3, [r3, #27]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0210 	bic.w	r2, r2, #16
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e007      	b.n	8002170 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0210 	orr.w	r2, r2, #16
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7f1b      	ldrb	r3, [r3, #28]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f5b      	ldrb	r3, [r3, #29]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0204 	orr.w	r2, r2, #4
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e007      	b.n	80021c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0204 	bic.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	ea42 0103 	orr.w	r1, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002214:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d003      	beq.n	8002224 <HAL_CAN_ConfigFilter+0x20>
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b02      	cmp	r3, #2
 8002220:	f040 80be 	bne.w	80023a0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002224:	4b65      	ldr	r3, [pc, #404]	@ (80023bc <HAL_CAN_ConfigFilter+0x1b8>)
 8002226:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800223e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	431a      	orrs	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2201      	movs	r2, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d123      	bne.n	80022ce <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	401a      	ands	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3248      	adds	r2, #72	@ 0x48
 80022ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c4:	6939      	ldr	r1, [r7, #16]
 80022c6:	3348      	adds	r3, #72	@ 0x48
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d122      	bne.n	800231c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	431a      	orrs	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	3248      	adds	r2, #72	@ 0x48
 80022fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002310:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002312:	6939      	ldr	r1, [r7, #16]
 8002314:	3348      	adds	r3, #72	@ 0x48
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002336:	e007      	b.n	8002348 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	431a      	orrs	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002362:	e007      	b.n	8002374 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	431a      	orrs	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	431a      	orrs	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002392:	f023 0201 	bic.w	r2, r3, #1
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e006      	b.n	80023ae <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
  }
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40006400 	.word	0x40006400

080023c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d12e      	bne.n	8002432 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ec:	f7ff fdde 	bl	8001fac <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023f2:	e012      	b.n	800241a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023f4:	f7ff fdda 	bl	8001fac <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b0a      	cmp	r3, #10
 8002400:	d90b      	bls.n	800241a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2205      	movs	r2, #5
 8002412:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e012      	b.n	8002440 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e5      	bne.n	80023f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e006      	b.n	8002440 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002466:	7ffb      	ldrb	r3, [r7, #31]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d003      	beq.n	8002474 <HAL_CAN_AddTxMessage+0x2c>
 800246c:	7ffb      	ldrb	r3, [r7, #31]
 800246e:	2b02      	cmp	r3, #2
 8002470:	f040 80ad 	bne.w	80025ce <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8095 	beq.w	80025be <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	0e1b      	lsrs	r3, r3, #24
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800249e:	2201      	movs	r2, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024ba:	68f9      	ldr	r1, [r7, #12]
 80024bc:	6809      	ldr	r1, [r1, #0]
 80024be:	431a      	orrs	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3318      	adds	r3, #24
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	440b      	add	r3, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e00f      	b.n	80024ec <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024d6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024dc:	68f9      	ldr	r1, [r7, #12]
 80024de:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024e0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3318      	adds	r3, #24
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	440b      	add	r3, r1
 80024ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3318      	adds	r3, #24
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	440b      	add	r3, r1
 80024fc:	3304      	adds	r3, #4
 80024fe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	7d1b      	ldrb	r3, [r3, #20]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d111      	bne.n	800252c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3318      	adds	r3, #24
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	6811      	ldr	r1, [r2, #0]
 800251c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3318      	adds	r3, #24
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	440b      	add	r3, r1
 8002528:	3304      	adds	r3, #4
 800252a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3307      	adds	r3, #7
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	061a      	lsls	r2, r3, #24
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3306      	adds	r3, #6
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3305      	adds	r3, #5
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	4313      	orrs	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	3204      	adds	r2, #4
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	4610      	mov	r0, r2
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	6811      	ldr	r1, [r2, #0]
 8002554:	ea43 0200 	orr.w	r2, r3, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	440b      	add	r3, r1
 800255e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002562:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3303      	adds	r3, #3
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	061a      	lsls	r2, r3, #24
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3302      	adds	r3, #2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3301      	adds	r3, #1
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	4313      	orrs	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	4610      	mov	r0, r2
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6811      	ldr	r1, [r2, #0]
 800258a:	ea43 0200 	orr.w	r2, r3, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	440b      	add	r3, r1
 8002594:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002598:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3318      	adds	r3, #24
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	4413      	add	r3, r2
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	6811      	ldr	r1, [r2, #0]
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3318      	adds	r3, #24
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	440b      	add	r3, r1
 80025b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e00e      	b.n	80025dc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e006      	b.n	80025dc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3724      	adds	r7, #36	@ 0x24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d003      	beq.n	800260c <HAL_CAN_GetRxMessage+0x24>
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b02      	cmp	r3, #2
 8002608:	f040 8103 	bne.w	8002812 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10e      	bne.n	8002630 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0f7      	b.n	8002820 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0e8      	b.n	8002820 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	331b      	adds	r3, #27
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0204 	and.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10c      	bne.n	8002686 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	331b      	adds	r3, #27
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	4413      	add	r3, r2
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0d5b      	lsrs	r3, r3, #21
 800267c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e00b      	b.n	800269e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	331b      	adds	r3, #27
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	331b      	adds	r3, #27
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0202 	and.w	r2, r3, #2
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	331b      	adds	r3, #27
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2208      	movs	r2, #8
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	e00b      	b.n	80026ec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	331b      	adds	r3, #27
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	331b      	adds	r3, #27
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	331b      	adds	r3, #27
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4413      	add	r3, r2
 8002726:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0a1a      	lsrs	r2, r3, #8
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0c1a      	lsrs	r2, r3, #16
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	3302      	adds	r3, #2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	4413      	add	r3, r2
 8002770:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e1a      	lsrs	r2, r3, #24
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	3303      	adds	r3, #3
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4413      	add	r3, r2
 800278a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3304      	adds	r3, #4
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0a1a      	lsrs	r2, r3, #8
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3305      	adds	r3, #5
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0c1a      	lsrs	r2, r3, #16
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	3306      	adds	r3, #6
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e1a      	lsrs	r2, r3, #24
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3307      	adds	r3, #7
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d108      	bne.n	80027fe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	e007      	b.n	800280e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0220 	orr.w	r2, r2, #32
 800280c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e006      	b.n	8002820 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002840:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002842:	7afb      	ldrb	r3, [r7, #11]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d002      	beq.n	800284e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d10f      	bne.n	800286e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e005      	b.n	800286e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d002      	beq.n	800289a <HAL_CAN_ActivateNotification+0x1e>
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d109      	bne.n	80028ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6959      	ldr	r1, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e006      	b.n	80028bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d07c      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f983 	bl	8002c36 <HAL_CAN_TxMailbox0CompleteCallback>
 8002930:	e016      	b.n	8002960 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
 8002944:	e00c      	b.n	8002960 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
 8002958:	e002      	b.n	8002960 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f989 	bl	8002c72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002972:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f963 	bl	8002c4a <HAL_CAN_TxMailbox1CompleteCallback>
 8002984:	e016      	b.n	80029b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
 8002998:	e00c      	b.n	80029b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ac:	e002      	b.n	80029b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f969 	bl	8002c86 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f943 	bl	8002c5e <HAL_CAN_TxMailbox2CompleteCallback>
 80029d8:	e016      	b.n	8002a08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ec:	e00c      	b.n	8002a08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a00:	e002      	b.n	8002a08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f949 	bl	8002c9a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2208      	movs	r2, #8
 8002a46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f930 	bl	8002cae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe fe04 	bl	8001674 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f908 	bl	8002cc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fdf2 	bl	80016b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2210      	movs	r2, #16
 8002aea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8f2 	bl	8002cd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8eb 	bl	8002cea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d07b      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d072      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d043      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d03e      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b96:	2b60      	cmp	r3, #96	@ 0x60
 8002b98:	d02b      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x32a>
 8002b9a:	2b60      	cmp	r3, #96	@ 0x60
 8002b9c:	d82e      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002b9e:	2b50      	cmp	r3, #80	@ 0x50
 8002ba0:	d022      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x320>
 8002ba2:	2b50      	cmp	r3, #80	@ 0x50
 8002ba4:	d82a      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002ba6:	2b40      	cmp	r3, #64	@ 0x40
 8002ba8:	d019      	beq.n	8002bde <HAL_CAN_IRQHandler+0x316>
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d826      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002bae:	2b30      	cmp	r3, #48	@ 0x30
 8002bb0:	d010      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x30c>
 8002bb2:	2b30      	cmp	r3, #48	@ 0x30
 8002bb4:	d822      	bhi.n	8002bfc <HAL_CAN_IRQHandler+0x334>
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d002      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x2f8>
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d005      	beq.n	8002bca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bbe:	e01d      	b.n	8002bfc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bc8:	e019      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	f043 0310 	orr.w	r3, r3, #16
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bd2:	e014      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	f043 0320 	orr.w	r3, r3, #32
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bdc:	e00f      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002be6:	e00a      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bf0:	e005      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bfa:	e000      	b.n	8002bfe <HAL_CAN_IRQHandler+0x336>
            break;
 8002bfc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2204      	movs	r2, #4
 8002c14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f868 	bl	8002cfe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c2e:	bf00      	nop
 8002c30:	3728      	adds	r7, #40	@ 0x28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4907      	ldr	r1, [pc, #28]	@ (8002db0 <__NVIC_EnableIRQ+0x38>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db0a      	blt.n	8002dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	490c      	ldr	r1, [pc, #48]	@ (8002e00 <__NVIC_SetPriority+0x4c>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ddc:	e00a      	b.n	8002df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4908      	ldr	r1, [pc, #32]	@ (8002e04 <__NVIC_SetPriority+0x50>)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	3b04      	subs	r3, #4
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	440b      	add	r3, r1
 8002df2:	761a      	strb	r2, [r3, #24]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	@ 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f1c3 0307 	rsb	r3, r3, #7
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf28      	it	cs
 8002e26:	2304      	movcs	r3, #4
 8002e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <NVIC_EncodePriority+0x30>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3b03      	subs	r3, #3
 8002e36:	e000      	b.n	8002e3a <NVIC_EncodePriority+0x32>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	4313      	orrs	r3, r2
         );
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	@ 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e80:	d301      	bcc.n	8002e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00f      	b.n	8002ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e86:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <SysTick_Config+0x40>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e8e:	210f      	movs	r1, #15
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	f7ff ff8e 	bl	8002db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <SysTick_Config+0x40>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9e:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <SysTick_Config+0x40>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010

08002eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff29 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff3e 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff8e 	bl	8002e08 <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff5d 	bl	8002db4 <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff31 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ffa2 	bl	8002e70 <SysTick_Config>
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e165      	b.n	8003220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f54:	2201      	movs	r2, #1
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	f040 8154 	bne.w	800321a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d005      	beq.n	8002f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d130      	bne.n	8002fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 0201 	and.w	r2, r3, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d017      	beq.n	8003028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d123      	bne.n	800307c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	08da      	lsrs	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3208      	adds	r2, #8
 800303c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	220f      	movs	r2, #15
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3208      	adds	r2, #8
 8003076:	69b9      	ldr	r1, [r7, #24]
 8003078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	2203      	movs	r2, #3
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0203 	and.w	r2, r3, #3
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80ae 	beq.w	800321a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030da:	4a58      	ldr	r2, [pc, #352]	@ (800323c <HAL_GPIO_Init+0x304>)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	3302      	adds	r3, #2
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4f      	ldr	r2, [pc, #316]	@ (8003240 <HAL_GPIO_Init+0x308>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d025      	beq.n	8003152 <HAL_GPIO_Init+0x21a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4e      	ldr	r2, [pc, #312]	@ (8003244 <HAL_GPIO_Init+0x30c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <HAL_GPIO_Init+0x216>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4d      	ldr	r2, [pc, #308]	@ (8003248 <HAL_GPIO_Init+0x310>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x212>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4c      	ldr	r2, [pc, #304]	@ (800324c <HAL_GPIO_Init+0x314>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x20e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4b      	ldr	r2, [pc, #300]	@ (8003250 <HAL_GPIO_Init+0x318>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x20a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4a      	ldr	r2, [pc, #296]	@ (8003254 <HAL_GPIO_Init+0x31c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x206>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a49      	ldr	r2, [pc, #292]	@ (8003258 <HAL_GPIO_Init+0x320>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x202>
 8003136:	2306      	movs	r3, #6
 8003138:	e00c      	b.n	8003154 <HAL_GPIO_Init+0x21c>
 800313a:	2307      	movs	r3, #7
 800313c:	e00a      	b.n	8003154 <HAL_GPIO_Init+0x21c>
 800313e:	2305      	movs	r3, #5
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x21c>
 8003142:	2304      	movs	r3, #4
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x21c>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x21c>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x21c>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x21c>
 8003152:	2300      	movs	r3, #0
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003164:	4935      	ldr	r1, [pc, #212]	@ (800323c <HAL_GPIO_Init+0x304>)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b3a      	ldr	r3, [pc, #232]	@ (800325c <HAL_GPIO_Init+0x324>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a31      	ldr	r2, [pc, #196]	@ (800325c <HAL_GPIO_Init+0x324>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b2f      	ldr	r3, [pc, #188]	@ (800325c <HAL_GPIO_Init+0x324>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a26      	ldr	r2, [pc, #152]	@ (800325c <HAL_GPIO_Init+0x324>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031c6:	4b25      	ldr	r3, [pc, #148]	@ (800325c <HAL_GPIO_Init+0x324>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ea:	4a1c      	ldr	r2, [pc, #112]	@ (800325c <HAL_GPIO_Init+0x324>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f0:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <HAL_GPIO_Init+0x324>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003214:	4a11      	ldr	r2, [pc, #68]	@ (800325c <HAL_GPIO_Init+0x324>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	f67f ae96 	bls.w	8002f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	@ 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40021400 	.word	0x40021400
 8003258:	40021800 	.word	0x40021800
 800325c:	40013c00 	.word	0x40013c00

08003260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003270:	787b      	ldrb	r3, [r7, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800327c:	e003      	b.n	8003286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	619a      	str	r2, [r3, #24]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032a4:	887a      	ldrh	r2, [r7, #2]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	041a      	lsls	r2, r3, #16
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	887b      	ldrh	r3, [r7, #2]
 80032b2:	400b      	ands	r3, r1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	619a      	str	r2, [r3, #24]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0cc      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b68      	ldr	r3, [pc, #416]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d90c      	bls.n	8003304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b65      	ldr	r3, [pc, #404]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b63      	ldr	r3, [pc, #396]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b8      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800331c:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a58      	ldr	r2, [pc, #352]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003334:	4b53      	ldr	r3, [pc, #332]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a52      	ldr	r2, [pc, #328]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800333e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b50      	ldr	r3, [pc, #320]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	494d      	ldr	r1, [pc, #308]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d044      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b47      	ldr	r3, [pc, #284]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d119      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e07f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d003      	beq.n	8003386 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	2b03      	cmp	r3, #3
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b3f      	ldr	r3, [pc, #252]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e067      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b37      	ldr	r3, [pc, #220]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4934      	ldr	r1, [pc, #208]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fdf8 	bl	8001fac <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fdf4 	bl	8001fac <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e04f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d20c      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b22      	ldr	r3, [pc, #136]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e032      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4916      	ldr	r1, [pc, #88]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490e      	ldr	r1, [pc, #56]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800344e:	f000 f855 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490a      	ldr	r1, [pc, #40]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a09      	ldr	r2, [pc, #36]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fd58 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00
 8003484:	40023800 	.word	0x40023800
 8003488:	08007eb8 	.word	0x08007eb8
 800348c:	20000010 	.word	0x20000010
 8003490:	20000014 	.word	0x20000014

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000010 	.word	0x20000010

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	@ (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08007ec8 	.word	0x08007ec8

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d8:	f7ff ffdc 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	@ (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08007ec8 	.word	0x08007ec8

080034fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003500:	b0ae      	sub	sp, #184	@ 0xb8
 8003502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003522:	4bcb      	ldr	r3, [pc, #812]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b0c      	cmp	r3, #12
 800352c:	f200 8204 	bhi.w	8003938 <HAL_RCC_GetSysClockFreq+0x43c>
 8003530:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003939 	.word	0x08003939
 8003540:	08003939 	.word	0x08003939
 8003544:	08003939 	.word	0x08003939
 8003548:	08003575 	.word	0x08003575
 800354c:	08003939 	.word	0x08003939
 8003550:	08003939 	.word	0x08003939
 8003554:	08003939 	.word	0x08003939
 8003558:	0800357d 	.word	0x0800357d
 800355c:	08003939 	.word	0x08003939
 8003560:	08003939 	.word	0x08003939
 8003564:	08003939 	.word	0x08003939
 8003568:	0800376d 	.word	0x0800376d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4bb9      	ldr	r3, [pc, #740]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x358>)
 800356e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003572:	e1e5      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003574:	4bb7      	ldr	r3, [pc, #732]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x358>)
 8003576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800357a:	e1e1      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800357c:	4bb4      	ldr	r3, [pc, #720]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003588:	4bb1      	ldr	r3, [pc, #708]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d071      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003594:	4bae      	ldr	r3, [pc, #696]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035a0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035ba:	4622      	mov	r2, r4
 80035bc:	462b      	mov	r3, r5
 80035be:	f04f 0000 	mov.w	r0, #0
 80035c2:	f04f 0100 	mov.w	r1, #0
 80035c6:	0159      	lsls	r1, r3, #5
 80035c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035cc:	0150      	lsls	r0, r2, #5
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4621      	mov	r1, r4
 80035d4:	1a51      	subs	r1, r2, r1
 80035d6:	6439      	str	r1, [r7, #64]	@ 0x40
 80035d8:	4629      	mov	r1, r5
 80035da:	eb63 0301 	sbc.w	r3, r3, r1
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035ec:	4649      	mov	r1, r9
 80035ee:	018b      	lsls	r3, r1, #6
 80035f0:	4641      	mov	r1, r8
 80035f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035f6:	4641      	mov	r1, r8
 80035f8:	018a      	lsls	r2, r1, #6
 80035fa:	4641      	mov	r1, r8
 80035fc:	1a51      	subs	r1, r2, r1
 80035fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003600:	4649      	mov	r1, r9
 8003602:	eb63 0301 	sbc.w	r3, r3, r1
 8003606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003614:	4649      	mov	r1, r9
 8003616:	00cb      	lsls	r3, r1, #3
 8003618:	4641      	mov	r1, r8
 800361a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361e:	4641      	mov	r1, r8
 8003620:	00ca      	lsls	r2, r1, #3
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	4603      	mov	r3, r0
 8003628:	4622      	mov	r2, r4
 800362a:	189b      	adds	r3, r3, r2
 800362c:	633b      	str	r3, [r7, #48]	@ 0x30
 800362e:	462b      	mov	r3, r5
 8003630:	460a      	mov	r2, r1
 8003632:	eb42 0303 	adc.w	r3, r2, r3
 8003636:	637b      	str	r3, [r7, #52]	@ 0x34
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003644:	4629      	mov	r1, r5
 8003646:	028b      	lsls	r3, r1, #10
 8003648:	4621      	mov	r1, r4
 800364a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800364e:	4621      	mov	r1, r4
 8003650:	028a      	lsls	r2, r1, #10
 8003652:	4610      	mov	r0, r2
 8003654:	4619      	mov	r1, r3
 8003656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003664:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003668:	f7fd fabe 	bl	8000be8 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4613      	mov	r3, r2
 8003672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003676:	e067      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003678:	4b75      	ldr	r3, [pc, #468]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003684:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003688:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800368c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003690:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003692:	2300      	movs	r3, #0
 8003694:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003696:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800369a:	4622      	mov	r2, r4
 800369c:	462b      	mov	r3, r5
 800369e:	f04f 0000 	mov.w	r0, #0
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	0159      	lsls	r1, r3, #5
 80036a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ac:	0150      	lsls	r0, r2, #5
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4621      	mov	r1, r4
 80036b4:	1a51      	subs	r1, r2, r1
 80036b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036b8:	4629      	mov	r1, r5
 80036ba:	eb63 0301 	sbc.w	r3, r3, r1
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80036cc:	4649      	mov	r1, r9
 80036ce:	018b      	lsls	r3, r1, #6
 80036d0:	4641      	mov	r1, r8
 80036d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036d6:	4641      	mov	r1, r8
 80036d8:	018a      	lsls	r2, r1, #6
 80036da:	4641      	mov	r1, r8
 80036dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e0:	4649      	mov	r1, r9
 80036e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036fa:	4692      	mov	sl, r2
 80036fc:	469b      	mov	fp, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	eb1a 0303 	adds.w	r3, sl, r3
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	462b      	mov	r3, r5
 8003708:	eb4b 0303 	adc.w	r3, fp, r3
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003730:	2200      	movs	r2, #0
 8003732:	673b      	str	r3, [r7, #112]	@ 0x70
 8003734:	677a      	str	r2, [r7, #116]	@ 0x74
 8003736:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800373a:	f7fd fa55 	bl	8000be8 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4613      	mov	r3, r2
 8003744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003748:	4b41      	ldr	r3, [pc, #260]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	3301      	adds	r3, #1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800375a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800375e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800376a:	e0e9      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800376c:	4b38      	ldr	r3, [pc, #224]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003778:	4b35      	ldr	r3, [pc, #212]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d069      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003784:	4b32      	ldr	r3, [pc, #200]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x354>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	2200      	movs	r2, #0
 800378c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800378e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	663b      	str	r3, [r7, #96]	@ 0x60
 8003798:	2300      	movs	r3, #0
 800379a:	667b      	str	r3, [r7, #100]	@ 0x64
 800379c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037a0:	4622      	mov	r2, r4
 80037a2:	462b      	mov	r3, r5
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0159      	lsls	r1, r3, #5
 80037ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b2:	0150      	lsls	r0, r2, #5
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4621      	mov	r1, r4
 80037ba:	1a51      	subs	r1, r2, r1
 80037bc:	61b9      	str	r1, [r7, #24]
 80037be:	4629      	mov	r1, r5
 80037c0:	eb63 0301 	sbc.w	r3, r3, r1
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037d2:	4659      	mov	r1, fp
 80037d4:	018b      	lsls	r3, r1, #6
 80037d6:	4651      	mov	r1, sl
 80037d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037dc:	4651      	mov	r1, sl
 80037de:	018a      	lsls	r2, r1, #6
 80037e0:	4651      	mov	r1, sl
 80037e2:	ebb2 0801 	subs.w	r8, r2, r1
 80037e6:	4659      	mov	r1, fp
 80037e8:	eb63 0901 	sbc.w	r9, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003800:	4690      	mov	r8, r2
 8003802:	4699      	mov	r9, r3
 8003804:	4623      	mov	r3, r4
 8003806:	eb18 0303 	adds.w	r3, r8, r3
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	462b      	mov	r3, r5
 800380e:	eb49 0303 	adc.w	r3, r9, r3
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003820:	4629      	mov	r1, r5
 8003822:	028b      	lsls	r3, r1, #10
 8003824:	4621      	mov	r1, r4
 8003826:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800382a:	4621      	mov	r1, r4
 800382c:	028a      	lsls	r2, r1, #10
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003836:	2200      	movs	r2, #0
 8003838:	65bb      	str	r3, [r7, #88]	@ 0x58
 800383a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800383c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003840:	f7fd f9d2 	bl	8000be8 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800384e:	e063      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x41c>
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003858:	4b3d      	ldr	r3, [pc, #244]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x454>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	2200      	movs	r2, #0
 8003860:	4618      	mov	r0, r3
 8003862:	4611      	mov	r1, r2
 8003864:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003868:	653b      	str	r3, [r7, #80]	@ 0x50
 800386a:	2300      	movs	r3, #0
 800386c:	657b      	str	r3, [r7, #84]	@ 0x54
 800386e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003872:	4642      	mov	r2, r8
 8003874:	464b      	mov	r3, r9
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	0159      	lsls	r1, r3, #5
 8003880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003884:	0150      	lsls	r0, r2, #5
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4641      	mov	r1, r8
 800388c:	1a51      	subs	r1, r2, r1
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	4649      	mov	r1, r9
 8003892:	eb63 0301 	sbc.w	r3, r3, r1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038a4:	4659      	mov	r1, fp
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	4651      	mov	r1, sl
 80038aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ae:	4651      	mov	r1, sl
 80038b0:	018a      	lsls	r2, r1, #6
 80038b2:	4651      	mov	r1, sl
 80038b4:	1a54      	subs	r4, r2, r1
 80038b6:	4659      	mov	r1, fp
 80038b8:	eb63 0501 	sbc.w	r5, r3, r1
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	00eb      	lsls	r3, r5, #3
 80038c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ca:	00e2      	lsls	r2, r4, #3
 80038cc:	4614      	mov	r4, r2
 80038ce:	461d      	mov	r5, r3
 80038d0:	4643      	mov	r3, r8
 80038d2:	18e3      	adds	r3, r4, r3
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	464b      	mov	r3, r9
 80038d8:	eb45 0303 	adc.w	r3, r5, r3
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ea:	4629      	mov	r1, r5
 80038ec:	028b      	lsls	r3, r1, #10
 80038ee:	4621      	mov	r1, r4
 80038f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f4:	4621      	mov	r1, r4
 80038f6:	028a      	lsls	r2, r1, #10
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003900:	2200      	movs	r2, #0
 8003902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003904:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003906:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800390a:	f7fd f96d 	bl	8000be8 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4613      	mov	r3, r2
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003918:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x454>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0f1b      	lsrs	r3, r3, #28
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800392a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800392e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003936:	e003      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x458>)
 800393a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800393e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003944:	4618      	mov	r0, r3
 8003946:	37b8      	adds	r7, #184	@ 0xb8
 8003948:	46bd      	mov	sp, r7
 800394a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400

08003958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e28d      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8083 	beq.w	8003a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003978:	4b94      	ldr	r3, [pc, #592]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b04      	cmp	r3, #4
 8003982:	d019      	beq.n	80039b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003984:	4b91      	ldr	r3, [pc, #580]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
        || \
 800398c:	2b08      	cmp	r3, #8
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003990:	4b8e      	ldr	r3, [pc, #568]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800399c:	d00c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b88      	ldr	r3, [pc, #544]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b84      	ldr	r3, [pc, #528]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x124>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d157      	bne.n	8003a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e25a      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x90>
 80039da:	4b7c      	ldr	r3, [pc, #496]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7b      	ldr	r2, [pc, #492]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xcc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0xb4>
 80039f2:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b73      	ldr	r3, [pc, #460]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a72      	ldr	r2, [pc, #456]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xcc>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b6c      	ldr	r3, [pc, #432]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fabe 	bl	8001fac <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe faba 	bl	8001fac <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e21f      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b61      	ldr	r3, [pc, #388]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xdc>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe faaa 	bl	8001fac <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe faa6 	bl	8001fac <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e20b      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x104>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d06f      	beq.n	8003b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a8a:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a96:	4b4d      	ldr	r3, [pc, #308]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d105      	bne.n	8003aae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d11c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aba:	4b44      	ldr	r3, [pc, #272]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d116      	bne.n	8003af4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_RCC_OscConfig+0x186>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e1d3      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4937      	ldr	r1, [pc, #220]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	e03a      	b.n	8003b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afc:	4b34      	ldr	r3, [pc, #208]	@ (8003bd0 <HAL_RCC_OscConfig+0x278>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fe fa53 	bl	8001fac <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fe fa4f 	bl	8001fac <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1b4      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4925      	ldr	r1, [pc, #148]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]
 8003b3c:	e015      	b.n	8003b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3e:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <HAL_RCC_OscConfig+0x278>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe fa32 	bl	8001fac <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4c:	f7fe fa2e 	bl	8001fac <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e193      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d036      	beq.n	8003be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7e:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <HAL_RCC_OscConfig+0x27c>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fe fa12 	bl	8001fac <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8c:	f7fe fa0e 	bl	8001fac <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e173      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x234>
 8003baa:	e01b      	b.n	8003be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fe f9fb 	bl	8001fac <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	e00e      	b.n	8003bd8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bba:	f7fe f9f7 	bl	8001fac <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d907      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e15c      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470000 	.word	0x42470000
 8003bd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ea      	bne.n	8003bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8097 	beq.w	8003d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf6:	4b83      	ldr	r3, [pc, #524]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	4b7f      	ldr	r3, [pc, #508]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c12:	4b7c      	ldr	r3, [pc, #496]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b79      	ldr	r3, [pc, #484]	@ (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b76      	ldr	r3, [pc, #472]	@ (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a75      	ldr	r2, [pc, #468]	@ (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe f9b7 	bl	8001fac <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe f9b3 	bl	8001fac <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e118      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b6c      	ldr	r3, [pc, #432]	@ (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x31e>
 8003c68:	4b66      	ldr	r3, [pc, #408]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	4a65      	ldr	r2, [pc, #404]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c74:	e01c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x358>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x340>
 8003c7e:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	4a60      	ldr	r2, [pc, #384]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x358>
 8003c98:	4b5a      	ldr	r3, [pc, #360]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4a59      	ldr	r2, [pc, #356]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca4:	4b57      	ldr	r3, [pc, #348]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a56      	ldr	r2, [pc, #344]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003caa:	f023 0304 	bic.w	r3, r3, #4
 8003cae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fe f978 	bl	8001fac <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe f974 	bl	8001fac <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0d7      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ee      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x368>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe f962 	bl	8001fac <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fe f95e 	bl	8001fac <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0c1      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d02:	4b40      	ldr	r3, [pc, #256]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ee      	bne.n	8003cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d14:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	4a3a      	ldr	r2, [pc, #232]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80ad 	beq.w	8003e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2a:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d060      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d145      	bne.n	8003dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b33      	ldr	r3, [pc, #204]	@ (8003e0c <HAL_RCC_OscConfig+0x4b4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe f932 	bl	8001fac <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fe f92e 	bl	8001fac <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e093      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b29      	ldr	r3, [pc, #164]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	071b      	lsls	r3, r3, #28
 8003d96:	491b      	ldr	r1, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x4b4>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fe f903 	bl	8001fac <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fe f8ff 	bl	8001fac <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e064      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x452>
 8003dc8:	e05c      	b.n	8003e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCC_OscConfig+0x4b4>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f8ec 	bl	8001fac <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe f8e8 	bl	8001fac <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e04d      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x480>
 8003df6:	e045      	b.n	8003e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e040      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e10:	4b1f      	ldr	r3, [pc, #124]	@ (8003e90 <HAL_RCC_OscConfig+0x538>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d030      	beq.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d129      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d122      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d119      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d10f      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e041      	b.n	8003f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fdac 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 fb4a 	bl	800456c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e097      	b.n	8004076 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fdb8 	bl	8001ad0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f000 faf0 	bl	800456c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003fd2:	f023 030c 	bic.w	r3, r3, #12
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	011a      	lsls	r2, r3, #4
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	4313      	orrs	r3, r2
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004010:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004018:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	4313      	orrs	r3, r2
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800408e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004096:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800409e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040a6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d110      	bne.n	80040d0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80040b4:	7b7b      	ldrb	r3, [r7, #13]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e069      	b.n	8004192 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040ce:	e031      	b.n	8004134 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d110      	bne.n	80040f8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040d6:	7bbb      	ldrb	r3, [r7, #14]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040dc:	7b3b      	ldrb	r3, [r7, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e055      	b.n	8004192 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040f6:	e01d      	b.n	8004134 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d108      	bne.n	8004110 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040fe:	7bbb      	ldrb	r3, [r7, #14]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004104:	7b7b      	ldrb	r3, [r7, #13]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d102      	bne.n	8004110 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800410a:	7b3b      	ldrb	r3, [r7, #12]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d001      	beq.n	8004114 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e03e      	b.n	8004192 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_Encoder_Start+0xc4>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d008      	beq.n	8004152 <HAL_TIM_Encoder_Start+0xd4>
 8004140:	e00f      	b.n	8004162 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2201      	movs	r2, #1
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fb4e 	bl	80047ec <TIM_CCxChannelCmd>
      break;
 8004150:	e016      	b.n	8004180 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	2104      	movs	r1, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fb46 	bl	80047ec <TIM_CCxChannelCmd>
      break;
 8004160:	e00e      	b.n	8004180 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2201      	movs	r2, #1
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fb3e 	bl	80047ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	2104      	movs	r1, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fb37 	bl	80047ec <TIM_CCxChannelCmd>
      break;
 800417e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01b      	beq.n	80041fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f06f 0202 	mvn.w	r2, #2
 80041ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f9a3 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 80041ea:	e005      	b.n	80041f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f995 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9a6 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01b      	beq.n	800424a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f06f 0204 	mvn.w	r2, #4
 800421a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f97d 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 8004236:	e005      	b.n	8004244 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f96f 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f980 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01b      	beq.n	8004296 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f06f 0208 	mvn.w	r2, #8
 8004266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f957 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 8004282:	e005      	b.n	8004290 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f949 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f95a 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01b      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f06f 0210 	mvn.w	r2, #16
 80042b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2208      	movs	r2, #8
 80042b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f931 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 80042ce:	e005      	b.n	80042dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f923 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f934 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0201 	mvn.w	r2, #1
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f901 	bl	8004508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fbc7 	bl	8004ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f905 	bl	8004558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f06f 0220 	mvn.w	r2, #32
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fb99 	bl	8004aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_TIM_ConfigClockSource+0x1c>
 8004392:	2302      	movs	r3, #2
 8004394:	e0b4      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x186>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ce:	d03e      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xd4>
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d4:	f200 8087 	bhi.w	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043dc:	f000 8086 	beq.w	80044ec <HAL_TIM_ConfigClockSource+0x172>
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e4:	d87f      	bhi.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 80043e6:	2b70      	cmp	r3, #112	@ 0x70
 80043e8:	d01a      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0xa6>
 80043ea:	2b70      	cmp	r3, #112	@ 0x70
 80043ec:	d87b      	bhi.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 80043ee:	2b60      	cmp	r3, #96	@ 0x60
 80043f0:	d050      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0x11a>
 80043f2:	2b60      	cmp	r3, #96	@ 0x60
 80043f4:	d877      	bhi.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 80043f6:	2b50      	cmp	r3, #80	@ 0x50
 80043f8:	d03c      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0xfa>
 80043fa:	2b50      	cmp	r3, #80	@ 0x50
 80043fc:	d873      	bhi.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d058      	beq.n	80044b4 <HAL_TIM_ConfigClockSource+0x13a>
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d86f      	bhi.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 8004406:	2b30      	cmp	r3, #48	@ 0x30
 8004408:	d064      	beq.n	80044d4 <HAL_TIM_ConfigClockSource+0x15a>
 800440a:	2b30      	cmp	r3, #48	@ 0x30
 800440c:	d86b      	bhi.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 800440e:	2b20      	cmp	r3, #32
 8004410:	d060      	beq.n	80044d4 <HAL_TIM_ConfigClockSource+0x15a>
 8004412:	2b20      	cmp	r3, #32
 8004414:	d867      	bhi.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d05c      	beq.n	80044d4 <HAL_TIM_ConfigClockSource+0x15a>
 800441a:	2b10      	cmp	r3, #16
 800441c:	d05a      	beq.n	80044d4 <HAL_TIM_ConfigClockSource+0x15a>
 800441e:	e062      	b.n	80044e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004430:	f000 f9bc 	bl	80047ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004442:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
      break;
 800444c:	e04f      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800445e:	f000 f9a5 	bl	80047ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004470:	609a      	str	r2, [r3, #8]
      break;
 8004472:	e03c      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004480:	461a      	mov	r2, r3
 8004482:	f000 f919 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2150      	movs	r1, #80	@ 0x50
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f972 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 8004492:	e02c      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a0:	461a      	mov	r2, r3
 80044a2:	f000 f938 	bl	8004716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2160      	movs	r1, #96	@ 0x60
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 f962 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80044b2:	e01c      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c0:	461a      	mov	r2, r3
 80044c2:	f000 f8f9 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2140      	movs	r1, #64	@ 0x40
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f952 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80044d2:	e00c      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 f949 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80044e4:	e003      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
      break;
 80044ea:	e000      	b.n	80044ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a43      	ldr	r2, [pc, #268]	@ (800468c <TIM_Base_SetConfig+0x120>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458a:	d00f      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a40      	ldr	r2, [pc, #256]	@ (8004690 <TIM_Base_SetConfig+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00b      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3f      	ldr	r2, [pc, #252]	@ (8004694 <TIM_Base_SetConfig+0x128>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a3e      	ldr	r2, [pc, #248]	@ (8004698 <TIM_Base_SetConfig+0x12c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3d      	ldr	r2, [pc, #244]	@ (800469c <TIM_Base_SetConfig+0x130>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a32      	ldr	r2, [pc, #200]	@ (800468c <TIM_Base_SetConfig+0x120>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d02b      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045cc:	d027      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004690 <TIM_Base_SetConfig+0x124>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d023      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004694 <TIM_Base_SetConfig+0x128>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01f      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004698 <TIM_Base_SetConfig+0x12c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01b      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	@ (800469c <TIM_Base_SetConfig+0x130>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d017      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	@ (80046a0 <TIM_Base_SetConfig+0x134>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	@ (80046a4 <TIM_Base_SetConfig+0x138>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00f      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <TIM_Base_SetConfig+0x13c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00b      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a28      	ldr	r2, [pc, #160]	@ (80046ac <TIM_Base_SetConfig+0x140>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a27      	ldr	r2, [pc, #156]	@ (80046b0 <TIM_Base_SetConfig+0x144>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a26      	ldr	r2, [pc, #152]	@ (80046b4 <TIM_Base_SetConfig+0x148>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a0e      	ldr	r2, [pc, #56]	@ (800468c <TIM_Base_SetConfig+0x120>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_Base_SetConfig+0xf2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a10      	ldr	r2, [pc, #64]	@ (800469c <TIM_Base_SetConfig+0x130>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d103      	bne.n	8004666 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f043 0204 	orr.w	r2, r3, #4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40010400 	.word	0x40010400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400
 80046a8:	40014800 	.word	0x40014800
 80046ac:	40001800 	.word	0x40001800
 80046b0:	40001c00 	.word	0x40001c00
 80046b4:	40002000 	.word	0x40002000

080046b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 030a 	bic.w	r3, r3, #10
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f023 0210 	bic.w	r2, r3, #16
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004752:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	f043 0307 	orr.w	r3, r3, #7
 8004798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2201      	movs	r2, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1a      	ldr	r2, [r3, #32]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_TIMEx_PWMN_Start+0x24>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e022      	b.n	80048a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b04      	cmp	r3, #4
 8004860:	d109      	bne.n	8004876 <HAL_TIMEx_PWMN_Start+0x3e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e015      	b.n	80048a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d109      	bne.n	8004890 <HAL_TIMEx_PWMN_Start+0x58>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e008      	b.n	80048a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e06d      	b.n	8004986 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_TIMEx_PWMN_Start+0x82>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b8:	e013      	b.n	80048e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d104      	bne.n	80048ca <HAL_TIMEx_PWMN_Start+0x92>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048c8:	e00b      	b.n	80048e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d104      	bne.n	80048da <HAL_TIMEx_PWMN_Start+0xa2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d8:	e003      	b.n	80048e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2204      	movs	r2, #4
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f8ee 	bl	8004acc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a22      	ldr	r2, [pc, #136]	@ (8004990 <HAL_TIMEx_PWMN_Start+0x158>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_TIMEx_PWMN_Start+0x118>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004912:	d01d      	beq.n	8004950 <HAL_TIMEx_PWMN_Start+0x118>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <HAL_TIMEx_PWMN_Start+0x15c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_TIMEx_PWMN_Start+0x118>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <HAL_TIMEx_PWMN_Start+0x160>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_TIMEx_PWMN_Start+0x118>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1b      	ldr	r2, [pc, #108]	@ (800499c <HAL_TIMEx_PWMN_Start+0x164>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_TIMEx_PWMN_Start+0x118>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1a      	ldr	r2, [pc, #104]	@ (80049a0 <HAL_TIMEx_PWMN_Start+0x168>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_TIMEx_PWMN_Start+0x118>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a18      	ldr	r2, [pc, #96]	@ (80049a4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIMEx_PWMN_Start+0x118>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a17      	ldr	r2, [pc, #92]	@ (80049a8 <HAL_TIMEx_PWMN_Start+0x170>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d111      	bne.n	8004974 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b06      	cmp	r3, #6
 8004960:	d010      	beq.n	8004984 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	e007      	b.n	8004984 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40001800 	.word	0x40001800

080049ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e05a      	b.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a10:	d01d      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1d      	ldr	r2, [pc, #116]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1b      	ldr	r2, [pc, #108]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a18      	ldr	r2, [pc, #96]	@ (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a17      	ldr	r2, [pc, #92]	@ (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40010400 	.word	0x40010400
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40001800 	.word	0x40001800

08004aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	2204      	movs	r2, #4
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e042      	b.n	8004bae <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fd f80d 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2224      	movs	r2, #36	@ 0x24
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f972 	bl	8004e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08a      	sub	sp, #40	@ 0x28
 8004bba:	af02      	add	r7, sp, #8
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d175      	bne.n	8004cc2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_UART_Transmit+0x2c>
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e06e      	b.n	8004cc4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2221      	movs	r2, #33	@ 0x21
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bf4:	f7fd f9da 	bl	8001fac <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0e:	d108      	bne.n	8004c22 <HAL_UART_Transmit+0x6c>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e003      	b.n	8004c2a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c2a:	e02e      	b.n	8004c8a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2180      	movs	r1, #128	@ 0x80
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f848 	bl	8004ccc <UART_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e03a      	b.n	8004cc4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c62:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	3302      	adds	r3, #2
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	e007      	b.n	8004c7c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1cb      	bne.n	8004c2c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2140      	movs	r1, #64	@ 0x40
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f814 	bl	8004ccc <UART_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e006      	b.n	8004cc4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cdc:	e03b      	b.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d037      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fd f961 	bl	8001fac <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e03a      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d023      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b80      	cmp	r3, #128	@ 0x80
 8004d12:	d020      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b40      	cmp	r3, #64	@ 0x40
 8004d18:	d01d      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d116      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f81d 	bl	8004d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2208      	movs	r2, #8
 8004d48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e00f      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d0b4      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b095      	sub	sp, #84	@ 0x54
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004da6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d119      	bne.n	8004e2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0310 	bic.w	r3, r3, #16
 8004e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e16:	61ba      	str	r2, [r7, #24]
 8004e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6979      	ldr	r1, [r7, #20]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	613b      	str	r3, [r7, #16]
   return(result);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e5      	bne.n	8004df6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e38:	bf00      	nop
 8004e3a:	3754      	adds	r7, #84	@ 0x54
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e48:	b0c0      	sub	sp, #256	@ 0x100
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	68d9      	ldr	r1, [r3, #12]
 8004e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	ea40 0301 	orr.w	r3, r0, r1
 8004e6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e9c:	f021 010c 	bic.w	r1, r1, #12
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebe:	6999      	ldr	r1, [r3, #24]
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	ea40 0301 	orr.w	r3, r0, r1
 8004eca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8005110 <UART_SetConfig+0x2cc>)
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d005      	beq.n	8004ee4 <UART_SetConfig+0xa0>
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b8d      	ldr	r3, [pc, #564]	@ (8005114 <UART_SetConfig+0x2d0>)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d104      	bne.n	8004eee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fe faf6 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004eec:	e003      	b.n	8004ef6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eee:	f7fe fadd 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8004ef2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f00:	f040 810c 	bne.w	800511c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f16:	4622      	mov	r2, r4
 8004f18:	462b      	mov	r3, r5
 8004f1a:	1891      	adds	r1, r2, r2
 8004f1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f1e:	415b      	adcs	r3, r3
 8004f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f26:	4621      	mov	r1, r4
 8004f28:	eb12 0801 	adds.w	r8, r2, r1
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	eb43 0901 	adc.w	r9, r3, r1
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f46:	4690      	mov	r8, r2
 8004f48:	4699      	mov	r9, r3
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	eb18 0303 	adds.w	r3, r8, r3
 8004f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f54:	462b      	mov	r3, r5
 8004f56:	eb49 0303 	adc.w	r3, r9, r3
 8004f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f72:	460b      	mov	r3, r1
 8004f74:	18db      	adds	r3, r3, r3
 8004f76:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f78:	4613      	mov	r3, r2
 8004f7a:	eb42 0303 	adc.w	r3, r2, r3
 8004f7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f88:	f7fb fe2e 	bl	8000be8 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4b61      	ldr	r3, [pc, #388]	@ (8005118 <UART_SetConfig+0x2d4>)
 8004f92:	fba3 2302 	umull	r2, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	011c      	lsls	r4, r3, #4
 8004f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	1891      	adds	r1, r2, r2
 8004fb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fb4:	415b      	adcs	r3, r3
 8004fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	eb12 0a01 	adds.w	sl, r2, r1
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	eb43 0b01 	adc.w	fp, r3, r1
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fdc:	4692      	mov	sl, r2
 8004fde:	469b      	mov	fp, r3
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	eb1a 0303 	adds.w	r3, sl, r3
 8004fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fea:	464b      	mov	r3, r9
 8004fec:	eb4b 0303 	adc.w	r3, fp, r3
 8004ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005000:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005004:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005008:	460b      	mov	r3, r1
 800500a:	18db      	adds	r3, r3, r3
 800500c:	643b      	str	r3, [r7, #64]	@ 0x40
 800500e:	4613      	mov	r3, r2
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	647b      	str	r3, [r7, #68]	@ 0x44
 8005016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800501a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800501e:	f7fb fde3 	bl	8000be8 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4611      	mov	r1, r2
 8005028:	4b3b      	ldr	r3, [pc, #236]	@ (8005118 <UART_SetConfig+0x2d4>)
 800502a:	fba3 2301 	umull	r2, r3, r3, r1
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2264      	movs	r2, #100	@ 0x64
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	1acb      	subs	r3, r1, r3
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800503e:	4b36      	ldr	r3, [pc, #216]	@ (8005118 <UART_SetConfig+0x2d4>)
 8005040:	fba3 2302 	umull	r2, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800504c:	441c      	add	r4, r3
 800504e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005058:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800505c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	1891      	adds	r1, r2, r2
 8005066:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005068:	415b      	adcs	r3, r3
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800506c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005070:	4641      	mov	r1, r8
 8005072:	1851      	adds	r1, r2, r1
 8005074:	6339      	str	r1, [r7, #48]	@ 0x30
 8005076:	4649      	mov	r1, r9
 8005078:	414b      	adcs	r3, r1
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005088:	4659      	mov	r1, fp
 800508a:	00cb      	lsls	r3, r1, #3
 800508c:	4651      	mov	r1, sl
 800508e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005092:	4651      	mov	r1, sl
 8005094:	00ca      	lsls	r2, r1, #3
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	4603      	mov	r3, r0
 800509c:	4642      	mov	r2, r8
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050a4:	464b      	mov	r3, r9
 80050a6:	460a      	mov	r2, r1
 80050a8:	eb42 0303 	adc.w	r3, r2, r3
 80050ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050c4:	460b      	mov	r3, r1
 80050c6:	18db      	adds	r3, r3, r3
 80050c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ca:	4613      	mov	r3, r2
 80050cc:	eb42 0303 	adc.w	r3, r2, r3
 80050d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050da:	f7fb fd85 	bl	8000be8 <__aeabi_uldivmod>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <UART_SetConfig+0x2d4>)
 80050e4:	fba3 1302 	umull	r1, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	2164      	movs	r1, #100	@ 0x64
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	3332      	adds	r3, #50	@ 0x32
 80050f6:	4a08      	ldr	r2, [pc, #32]	@ (8005118 <UART_SetConfig+0x2d4>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 0207 	and.w	r2, r3, #7
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4422      	add	r2, r4
 800510a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800510c:	e106      	b.n	800531c <UART_SetConfig+0x4d8>
 800510e:	bf00      	nop
 8005110:	40011000 	.word	0x40011000
 8005114:	40011400 	.word	0x40011400
 8005118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800511c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005120:	2200      	movs	r2, #0
 8005122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005126:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800512a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800512e:	4642      	mov	r2, r8
 8005130:	464b      	mov	r3, r9
 8005132:	1891      	adds	r1, r2, r2
 8005134:	6239      	str	r1, [r7, #32]
 8005136:	415b      	adcs	r3, r3
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
 800513a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800513e:	4641      	mov	r1, r8
 8005140:	1854      	adds	r4, r2, r1
 8005142:	4649      	mov	r1, r9
 8005144:	eb43 0501 	adc.w	r5, r3, r1
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	00eb      	lsls	r3, r5, #3
 8005152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005156:	00e2      	lsls	r2, r4, #3
 8005158:	4614      	mov	r4, r2
 800515a:	461d      	mov	r5, r3
 800515c:	4643      	mov	r3, r8
 800515e:	18e3      	adds	r3, r4, r3
 8005160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005164:	464b      	mov	r3, r9
 8005166:	eb45 0303 	adc.w	r3, r5, r3
 800516a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800516e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800517a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800518a:	4629      	mov	r1, r5
 800518c:	008b      	lsls	r3, r1, #2
 800518e:	4621      	mov	r1, r4
 8005190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005194:	4621      	mov	r1, r4
 8005196:	008a      	lsls	r2, r1, #2
 8005198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800519c:	f7fb fd24 	bl	8000be8 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4b60      	ldr	r3, [pc, #384]	@ (8005328 <UART_SetConfig+0x4e4>)
 80051a6:	fba3 2302 	umull	r2, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	011c      	lsls	r4, r3, #4
 80051ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	61b9      	str	r1, [r7, #24]
 80051c8:	415b      	adcs	r3, r3
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d0:	4641      	mov	r1, r8
 80051d2:	1851      	adds	r1, r2, r1
 80051d4:	6139      	str	r1, [r7, #16]
 80051d6:	4649      	mov	r1, r9
 80051d8:	414b      	adcs	r3, r1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e8:	4659      	mov	r1, fp
 80051ea:	00cb      	lsls	r3, r1, #3
 80051ec:	4651      	mov	r1, sl
 80051ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f2:	4651      	mov	r1, sl
 80051f4:	00ca      	lsls	r2, r1, #3
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	4642      	mov	r2, r8
 80051fe:	189b      	adds	r3, r3, r2
 8005200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005204:	464b      	mov	r3, r9
 8005206:	460a      	mov	r2, r1
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	67bb      	str	r3, [r7, #120]	@ 0x78
 800521a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005228:	4649      	mov	r1, r9
 800522a:	008b      	lsls	r3, r1, #2
 800522c:	4641      	mov	r1, r8
 800522e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005232:	4641      	mov	r1, r8
 8005234:	008a      	lsls	r2, r1, #2
 8005236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800523a:	f7fb fcd5 	bl	8000be8 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4611      	mov	r1, r2
 8005244:	4b38      	ldr	r3, [pc, #224]	@ (8005328 <UART_SetConfig+0x4e4>)
 8005246:	fba3 2301 	umull	r2, r3, r3, r1
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	2264      	movs	r2, #100	@ 0x64
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	1acb      	subs	r3, r1, r3
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	3332      	adds	r3, #50	@ 0x32
 8005258:	4a33      	ldr	r2, [pc, #204]	@ (8005328 <UART_SetConfig+0x4e4>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005264:	441c      	add	r4, r3
 8005266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526a:	2200      	movs	r2, #0
 800526c:	673b      	str	r3, [r7, #112]	@ 0x70
 800526e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005270:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	1891      	adds	r1, r2, r2
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	415b      	adcs	r3, r3
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005284:	4641      	mov	r1, r8
 8005286:	1851      	adds	r1, r2, r1
 8005288:	6039      	str	r1, [r7, #0]
 800528a:	4649      	mov	r1, r9
 800528c:	414b      	adcs	r3, r1
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800529c:	4659      	mov	r1, fp
 800529e:	00cb      	lsls	r3, r1, #3
 80052a0:	4651      	mov	r1, sl
 80052a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052a6:	4651      	mov	r1, sl
 80052a8:	00ca      	lsls	r2, r1, #3
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	4642      	mov	r2, r8
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b6:	464b      	mov	r3, r9
 80052b8:	460a      	mov	r2, r1
 80052ba:	eb42 0303 	adc.w	r3, r2, r3
 80052be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052d8:	4649      	mov	r1, r9
 80052da:	008b      	lsls	r3, r1, #2
 80052dc:	4641      	mov	r1, r8
 80052de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e2:	4641      	mov	r1, r8
 80052e4:	008a      	lsls	r2, r1, #2
 80052e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052ea:	f7fb fc7d 	bl	8000be8 <__aeabi_uldivmod>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <UART_SetConfig+0x4e4>)
 80052f4:	fba3 1302 	umull	r1, r3, r3, r2
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	2164      	movs	r1, #100	@ 0x64
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	3332      	adds	r3, #50	@ 0x32
 8005306:	4a08      	ldr	r2, [pc, #32]	@ (8005328 <UART_SetConfig+0x4e4>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	f003 020f 	and.w	r2, r3, #15
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4422      	add	r2, r4
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005322:	46bd      	mov	sp, r7
 8005324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005328:	51eb851f 	.word	0x51eb851f

0800532c <__cvt>:
 800532c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	ec57 6b10 	vmov	r6, r7, d0
 8005334:	2f00      	cmp	r7, #0
 8005336:	460c      	mov	r4, r1
 8005338:	4619      	mov	r1, r3
 800533a:	463b      	mov	r3, r7
 800533c:	bfbb      	ittet	lt
 800533e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005342:	461f      	movlt	r7, r3
 8005344:	2300      	movge	r3, #0
 8005346:	232d      	movlt	r3, #45	@ 0x2d
 8005348:	700b      	strb	r3, [r1, #0]
 800534a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800534c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005350:	4691      	mov	r9, r2
 8005352:	f023 0820 	bic.w	r8, r3, #32
 8005356:	bfbc      	itt	lt
 8005358:	4632      	movlt	r2, r6
 800535a:	4616      	movlt	r6, r2
 800535c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005360:	d005      	beq.n	800536e <__cvt+0x42>
 8005362:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005366:	d100      	bne.n	800536a <__cvt+0x3e>
 8005368:	3401      	adds	r4, #1
 800536a:	2102      	movs	r1, #2
 800536c:	e000      	b.n	8005370 <__cvt+0x44>
 800536e:	2103      	movs	r1, #3
 8005370:	ab03      	add	r3, sp, #12
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	ab02      	add	r3, sp, #8
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	ec47 6b10 	vmov	d0, r6, r7
 800537c:	4653      	mov	r3, sl
 800537e:	4622      	mov	r2, r4
 8005380:	f000 fe3a 	bl	8005ff8 <_dtoa_r>
 8005384:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005388:	4605      	mov	r5, r0
 800538a:	d119      	bne.n	80053c0 <__cvt+0x94>
 800538c:	f019 0f01 	tst.w	r9, #1
 8005390:	d00e      	beq.n	80053b0 <__cvt+0x84>
 8005392:	eb00 0904 	add.w	r9, r0, r4
 8005396:	2200      	movs	r2, #0
 8005398:	2300      	movs	r3, #0
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fb fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 80053a2:	b108      	cbz	r0, 80053a8 <__cvt+0x7c>
 80053a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80053a8:	2230      	movs	r2, #48	@ 0x30
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	454b      	cmp	r3, r9
 80053ae:	d31e      	bcc.n	80053ee <__cvt+0xc2>
 80053b0:	9b03      	ldr	r3, [sp, #12]
 80053b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053b4:	1b5b      	subs	r3, r3, r5
 80053b6:	4628      	mov	r0, r5
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	b004      	add	sp, #16
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053c4:	eb00 0904 	add.w	r9, r0, r4
 80053c8:	d1e5      	bne.n	8005396 <__cvt+0x6a>
 80053ca:	7803      	ldrb	r3, [r0, #0]
 80053cc:	2b30      	cmp	r3, #48	@ 0x30
 80053ce:	d10a      	bne.n	80053e6 <__cvt+0xba>
 80053d0:	2200      	movs	r2, #0
 80053d2:	2300      	movs	r3, #0
 80053d4:	4630      	mov	r0, r6
 80053d6:	4639      	mov	r1, r7
 80053d8:	f7fb fb96 	bl	8000b08 <__aeabi_dcmpeq>
 80053dc:	b918      	cbnz	r0, 80053e6 <__cvt+0xba>
 80053de:	f1c4 0401 	rsb	r4, r4, #1
 80053e2:	f8ca 4000 	str.w	r4, [sl]
 80053e6:	f8da 3000 	ldr.w	r3, [sl]
 80053ea:	4499      	add	r9, r3
 80053ec:	e7d3      	b.n	8005396 <__cvt+0x6a>
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	9103      	str	r1, [sp, #12]
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e7d9      	b.n	80053aa <__cvt+0x7e>

080053f6 <__exponent>:
 80053f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f8:	2900      	cmp	r1, #0
 80053fa:	bfba      	itte	lt
 80053fc:	4249      	neglt	r1, r1
 80053fe:	232d      	movlt	r3, #45	@ 0x2d
 8005400:	232b      	movge	r3, #43	@ 0x2b
 8005402:	2909      	cmp	r1, #9
 8005404:	7002      	strb	r2, [r0, #0]
 8005406:	7043      	strb	r3, [r0, #1]
 8005408:	dd29      	ble.n	800545e <__exponent+0x68>
 800540a:	f10d 0307 	add.w	r3, sp, #7
 800540e:	461d      	mov	r5, r3
 8005410:	270a      	movs	r7, #10
 8005412:	461a      	mov	r2, r3
 8005414:	fbb1 f6f7 	udiv	r6, r1, r7
 8005418:	fb07 1416 	mls	r4, r7, r6, r1
 800541c:	3430      	adds	r4, #48	@ 0x30
 800541e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005422:	460c      	mov	r4, r1
 8005424:	2c63      	cmp	r4, #99	@ 0x63
 8005426:	f103 33ff 	add.w	r3, r3, #4294967295
 800542a:	4631      	mov	r1, r6
 800542c:	dcf1      	bgt.n	8005412 <__exponent+0x1c>
 800542e:	3130      	adds	r1, #48	@ 0x30
 8005430:	1e94      	subs	r4, r2, #2
 8005432:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005436:	1c41      	adds	r1, r0, #1
 8005438:	4623      	mov	r3, r4
 800543a:	42ab      	cmp	r3, r5
 800543c:	d30a      	bcc.n	8005454 <__exponent+0x5e>
 800543e:	f10d 0309 	add.w	r3, sp, #9
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	42ac      	cmp	r4, r5
 8005446:	bf88      	it	hi
 8005448:	2300      	movhi	r3, #0
 800544a:	3302      	adds	r3, #2
 800544c:	4403      	add	r3, r0
 800544e:	1a18      	subs	r0, r3, r0
 8005450:	b003      	add	sp, #12
 8005452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005454:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005458:	f801 6f01 	strb.w	r6, [r1, #1]!
 800545c:	e7ed      	b.n	800543a <__exponent+0x44>
 800545e:	2330      	movs	r3, #48	@ 0x30
 8005460:	3130      	adds	r1, #48	@ 0x30
 8005462:	7083      	strb	r3, [r0, #2]
 8005464:	70c1      	strb	r1, [r0, #3]
 8005466:	1d03      	adds	r3, r0, #4
 8005468:	e7f1      	b.n	800544e <__exponent+0x58>
	...

0800546c <_printf_float>:
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	b08d      	sub	sp, #52	@ 0x34
 8005472:	460c      	mov	r4, r1
 8005474:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005478:	4616      	mov	r6, r2
 800547a:	461f      	mov	r7, r3
 800547c:	4605      	mov	r5, r0
 800547e:	f000 fcb9 	bl	8005df4 <_localeconv_r>
 8005482:	6803      	ldr	r3, [r0, #0]
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fa ff12 	bl	80002b0 <strlen>
 800548c:	2300      	movs	r3, #0
 800548e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005490:	f8d8 3000 	ldr.w	r3, [r8]
 8005494:	9005      	str	r0, [sp, #20]
 8005496:	3307      	adds	r3, #7
 8005498:	f023 0307 	bic.w	r3, r3, #7
 800549c:	f103 0208 	add.w	r2, r3, #8
 80054a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054a4:	f8d4 b000 	ldr.w	fp, [r4]
 80054a8:	f8c8 2000 	str.w	r2, [r8]
 80054ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80054ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005734 <_printf_float+0x2c8>)
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	f7fb fb50 	bl	8000b6c <__aeabi_dcmpun>
 80054cc:	bb70      	cbnz	r0, 800552c <_printf_float+0xc0>
 80054ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d2:	4b98      	ldr	r3, [pc, #608]	@ (8005734 <_printf_float+0x2c8>)
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295
 80054d8:	f7fb fb2a 	bl	8000b30 <__aeabi_dcmple>
 80054dc:	bb30      	cbnz	r0, 800552c <_printf_float+0xc0>
 80054de:	2200      	movs	r2, #0
 80054e0:	2300      	movs	r3, #0
 80054e2:	4640      	mov	r0, r8
 80054e4:	4649      	mov	r1, r9
 80054e6:	f7fb fb19 	bl	8000b1c <__aeabi_dcmplt>
 80054ea:	b110      	cbz	r0, 80054f2 <_printf_float+0x86>
 80054ec:	232d      	movs	r3, #45	@ 0x2d
 80054ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f2:	4a91      	ldr	r2, [pc, #580]	@ (8005738 <_printf_float+0x2cc>)
 80054f4:	4b91      	ldr	r3, [pc, #580]	@ (800573c <_printf_float+0x2d0>)
 80054f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054fa:	bf8c      	ite	hi
 80054fc:	4690      	movhi	r8, r2
 80054fe:	4698      	movls	r8, r3
 8005500:	2303      	movs	r3, #3
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	f02b 0304 	bic.w	r3, fp, #4
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	f04f 0900 	mov.w	r9, #0
 800550e:	9700      	str	r7, [sp, #0]
 8005510:	4633      	mov	r3, r6
 8005512:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005514:	4621      	mov	r1, r4
 8005516:	4628      	mov	r0, r5
 8005518:	f000 f9d2 	bl	80058c0 <_printf_common>
 800551c:	3001      	adds	r0, #1
 800551e:	f040 808d 	bne.w	800563c <_printf_float+0x1d0>
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	b00d      	add	sp, #52	@ 0x34
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	4640      	mov	r0, r8
 8005532:	4649      	mov	r1, r9
 8005534:	f7fb fb1a 	bl	8000b6c <__aeabi_dcmpun>
 8005538:	b140      	cbz	r0, 800554c <_printf_float+0xe0>
 800553a:	464b      	mov	r3, r9
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfbc      	itt	lt
 8005540:	232d      	movlt	r3, #45	@ 0x2d
 8005542:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005546:	4a7e      	ldr	r2, [pc, #504]	@ (8005740 <_printf_float+0x2d4>)
 8005548:	4b7e      	ldr	r3, [pc, #504]	@ (8005744 <_printf_float+0x2d8>)
 800554a:	e7d4      	b.n	80054f6 <_printf_float+0x8a>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005552:	9206      	str	r2, [sp, #24]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	d13b      	bne.n	80055d0 <_printf_float+0x164>
 8005558:	2306      	movs	r3, #6
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005560:	2300      	movs	r3, #0
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	9303      	str	r3, [sp, #12]
 8005566:	ab0a      	add	r3, sp, #40	@ 0x28
 8005568:	e9cd a301 	strd	sl, r3, [sp, #4]
 800556c:	ab09      	add	r3, sp, #36	@ 0x24
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	6861      	ldr	r1, [r4, #4]
 8005572:	ec49 8b10 	vmov	d0, r8, r9
 8005576:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800557a:	4628      	mov	r0, r5
 800557c:	f7ff fed6 	bl	800532c <__cvt>
 8005580:	9b06      	ldr	r3, [sp, #24]
 8005582:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005584:	2b47      	cmp	r3, #71	@ 0x47
 8005586:	4680      	mov	r8, r0
 8005588:	d129      	bne.n	80055de <_printf_float+0x172>
 800558a:	1cc8      	adds	r0, r1, #3
 800558c:	db02      	blt.n	8005594 <_printf_float+0x128>
 800558e:	6863      	ldr	r3, [r4, #4]
 8005590:	4299      	cmp	r1, r3
 8005592:	dd41      	ble.n	8005618 <_printf_float+0x1ac>
 8005594:	f1aa 0a02 	sub.w	sl, sl, #2
 8005598:	fa5f fa8a 	uxtb.w	sl, sl
 800559c:	3901      	subs	r1, #1
 800559e:	4652      	mov	r2, sl
 80055a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80055a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80055a6:	f7ff ff26 	bl	80053f6 <__exponent>
 80055aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055ac:	1813      	adds	r3, r2, r0
 80055ae:	2a01      	cmp	r2, #1
 80055b0:	4681      	mov	r9, r0
 80055b2:	6123      	str	r3, [r4, #16]
 80055b4:	dc02      	bgt.n	80055bc <_printf_float+0x150>
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	07d2      	lsls	r2, r2, #31
 80055ba:	d501      	bpl.n	80055c0 <_printf_float+0x154>
 80055bc:	3301      	adds	r3, #1
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0a2      	beq.n	800550e <_printf_float+0xa2>
 80055c8:	232d      	movs	r3, #45	@ 0x2d
 80055ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ce:	e79e      	b.n	800550e <_printf_float+0xa2>
 80055d0:	9a06      	ldr	r2, [sp, #24]
 80055d2:	2a47      	cmp	r2, #71	@ 0x47
 80055d4:	d1c2      	bne.n	800555c <_printf_float+0xf0>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1c0      	bne.n	800555c <_printf_float+0xf0>
 80055da:	2301      	movs	r3, #1
 80055dc:	e7bd      	b.n	800555a <_printf_float+0xee>
 80055de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055e2:	d9db      	bls.n	800559c <_printf_float+0x130>
 80055e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055e8:	d118      	bne.n	800561c <_printf_float+0x1b0>
 80055ea:	2900      	cmp	r1, #0
 80055ec:	6863      	ldr	r3, [r4, #4]
 80055ee:	dd0b      	ble.n	8005608 <_printf_float+0x19c>
 80055f0:	6121      	str	r1, [r4, #16]
 80055f2:	b913      	cbnz	r3, 80055fa <_printf_float+0x18e>
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	07d0      	lsls	r0, r2, #31
 80055f8:	d502      	bpl.n	8005600 <_printf_float+0x194>
 80055fa:	3301      	adds	r3, #1
 80055fc:	440b      	add	r3, r1
 80055fe:	6123      	str	r3, [r4, #16]
 8005600:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005602:	f04f 0900 	mov.w	r9, #0
 8005606:	e7db      	b.n	80055c0 <_printf_float+0x154>
 8005608:	b913      	cbnz	r3, 8005610 <_printf_float+0x1a4>
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	07d2      	lsls	r2, r2, #31
 800560e:	d501      	bpl.n	8005614 <_printf_float+0x1a8>
 8005610:	3302      	adds	r3, #2
 8005612:	e7f4      	b.n	80055fe <_printf_float+0x192>
 8005614:	2301      	movs	r3, #1
 8005616:	e7f2      	b.n	80055fe <_printf_float+0x192>
 8005618:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800561c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800561e:	4299      	cmp	r1, r3
 8005620:	db05      	blt.n	800562e <_printf_float+0x1c2>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	6121      	str	r1, [r4, #16]
 8005626:	07d8      	lsls	r0, r3, #31
 8005628:	d5ea      	bpl.n	8005600 <_printf_float+0x194>
 800562a:	1c4b      	adds	r3, r1, #1
 800562c:	e7e7      	b.n	80055fe <_printf_float+0x192>
 800562e:	2900      	cmp	r1, #0
 8005630:	bfd4      	ite	le
 8005632:	f1c1 0202 	rsble	r2, r1, #2
 8005636:	2201      	movgt	r2, #1
 8005638:	4413      	add	r3, r2
 800563a:	e7e0      	b.n	80055fe <_printf_float+0x192>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	055a      	lsls	r2, r3, #21
 8005640:	d407      	bmi.n	8005652 <_printf_float+0x1e6>
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	4642      	mov	r2, r8
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	47b8      	blx	r7
 800564c:	3001      	adds	r0, #1
 800564e:	d12b      	bne.n	80056a8 <_printf_float+0x23c>
 8005650:	e767      	b.n	8005522 <_printf_float+0xb6>
 8005652:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005656:	f240 80dd 	bls.w	8005814 <_printf_float+0x3a8>
 800565a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	f7fb fa51 	bl	8000b08 <__aeabi_dcmpeq>
 8005666:	2800      	cmp	r0, #0
 8005668:	d033      	beq.n	80056d2 <_printf_float+0x266>
 800566a:	4a37      	ldr	r2, [pc, #220]	@ (8005748 <_printf_float+0x2dc>)
 800566c:	2301      	movs	r3, #1
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	f43f af54 	beq.w	8005522 <_printf_float+0xb6>
 800567a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800567e:	4543      	cmp	r3, r8
 8005680:	db02      	blt.n	8005688 <_printf_float+0x21c>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	07d8      	lsls	r0, r3, #31
 8005686:	d50f      	bpl.n	80056a8 <_printf_float+0x23c>
 8005688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	f43f af45 	beq.w	8005522 <_printf_float+0xb6>
 8005698:	f04f 0900 	mov.w	r9, #0
 800569c:	f108 38ff 	add.w	r8, r8, #4294967295
 80056a0:	f104 0a1a 	add.w	sl, r4, #26
 80056a4:	45c8      	cmp	r8, r9
 80056a6:	dc09      	bgt.n	80056bc <_printf_float+0x250>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	079b      	lsls	r3, r3, #30
 80056ac:	f100 8103 	bmi.w	80058b6 <_printf_float+0x44a>
 80056b0:	68e0      	ldr	r0, [r4, #12]
 80056b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056b4:	4298      	cmp	r0, r3
 80056b6:	bfb8      	it	lt
 80056b8:	4618      	movlt	r0, r3
 80056ba:	e734      	b.n	8005526 <_printf_float+0xba>
 80056bc:	2301      	movs	r3, #1
 80056be:	4652      	mov	r2, sl
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	f43f af2b 	beq.w	8005522 <_printf_float+0xb6>
 80056cc:	f109 0901 	add.w	r9, r9, #1
 80056d0:	e7e8      	b.n	80056a4 <_printf_float+0x238>
 80056d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	dc39      	bgt.n	800574c <_printf_float+0x2e0>
 80056d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005748 <_printf_float+0x2dc>)
 80056da:	2301      	movs	r3, #1
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	f43f af1d 	beq.w	8005522 <_printf_float+0xb6>
 80056e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80056ec:	ea59 0303 	orrs.w	r3, r9, r3
 80056f0:	d102      	bne.n	80056f8 <_printf_float+0x28c>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	07d9      	lsls	r1, r3, #31
 80056f6:	d5d7      	bpl.n	80056a8 <_printf_float+0x23c>
 80056f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f af0d 	beq.w	8005522 <_printf_float+0xb6>
 8005708:	f04f 0a00 	mov.w	sl, #0
 800570c:	f104 0b1a 	add.w	fp, r4, #26
 8005710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005712:	425b      	negs	r3, r3
 8005714:	4553      	cmp	r3, sl
 8005716:	dc01      	bgt.n	800571c <_printf_float+0x2b0>
 8005718:	464b      	mov	r3, r9
 800571a:	e793      	b.n	8005644 <_printf_float+0x1d8>
 800571c:	2301      	movs	r3, #1
 800571e:	465a      	mov	r2, fp
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f aefb 	beq.w	8005522 <_printf_float+0xb6>
 800572c:	f10a 0a01 	add.w	sl, sl, #1
 8005730:	e7ee      	b.n	8005710 <_printf_float+0x2a4>
 8005732:	bf00      	nop
 8005734:	7fefffff 	.word	0x7fefffff
 8005738:	08007ed4 	.word	0x08007ed4
 800573c:	08007ed0 	.word	0x08007ed0
 8005740:	08007edc 	.word	0x08007edc
 8005744:	08007ed8 	.word	0x08007ed8
 8005748:	08007ee0 	.word	0x08007ee0
 800574c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800574e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005752:	4553      	cmp	r3, sl
 8005754:	bfa8      	it	ge
 8005756:	4653      	movge	r3, sl
 8005758:	2b00      	cmp	r3, #0
 800575a:	4699      	mov	r9, r3
 800575c:	dc36      	bgt.n	80057cc <_printf_float+0x360>
 800575e:	f04f 0b00 	mov.w	fp, #0
 8005762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005766:	f104 021a 	add.w	r2, r4, #26
 800576a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800576c:	9306      	str	r3, [sp, #24]
 800576e:	eba3 0309 	sub.w	r3, r3, r9
 8005772:	455b      	cmp	r3, fp
 8005774:	dc31      	bgt.n	80057da <_printf_float+0x36e>
 8005776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005778:	459a      	cmp	sl, r3
 800577a:	dc3a      	bgt.n	80057f2 <_printf_float+0x386>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	07da      	lsls	r2, r3, #31
 8005780:	d437      	bmi.n	80057f2 <_printf_float+0x386>
 8005782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005784:	ebaa 0903 	sub.w	r9, sl, r3
 8005788:	9b06      	ldr	r3, [sp, #24]
 800578a:	ebaa 0303 	sub.w	r3, sl, r3
 800578e:	4599      	cmp	r9, r3
 8005790:	bfa8      	it	ge
 8005792:	4699      	movge	r9, r3
 8005794:	f1b9 0f00 	cmp.w	r9, #0
 8005798:	dc33      	bgt.n	8005802 <_printf_float+0x396>
 800579a:	f04f 0800 	mov.w	r8, #0
 800579e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057a2:	f104 0b1a 	add.w	fp, r4, #26
 80057a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a8:	ebaa 0303 	sub.w	r3, sl, r3
 80057ac:	eba3 0309 	sub.w	r3, r3, r9
 80057b0:	4543      	cmp	r3, r8
 80057b2:	f77f af79 	ble.w	80056a8 <_printf_float+0x23c>
 80057b6:	2301      	movs	r3, #1
 80057b8:	465a      	mov	r2, fp
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f aeae 	beq.w	8005522 <_printf_float+0xb6>
 80057c6:	f108 0801 	add.w	r8, r8, #1
 80057ca:	e7ec      	b.n	80057a6 <_printf_float+0x33a>
 80057cc:	4642      	mov	r2, r8
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	d1c2      	bne.n	800575e <_printf_float+0x2f2>
 80057d8:	e6a3      	b.n	8005522 <_printf_float+0xb6>
 80057da:	2301      	movs	r3, #1
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	9206      	str	r2, [sp, #24]
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	f43f ae9c 	beq.w	8005522 <_printf_float+0xb6>
 80057ea:	9a06      	ldr	r2, [sp, #24]
 80057ec:	f10b 0b01 	add.w	fp, fp, #1
 80057f0:	e7bb      	b.n	800576a <_printf_float+0x2fe>
 80057f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	d1c0      	bne.n	8005782 <_printf_float+0x316>
 8005800:	e68f      	b.n	8005522 <_printf_float+0xb6>
 8005802:	9a06      	ldr	r2, [sp, #24]
 8005804:	464b      	mov	r3, r9
 8005806:	4442      	add	r2, r8
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	d1c3      	bne.n	800579a <_printf_float+0x32e>
 8005812:	e686      	b.n	8005522 <_printf_float+0xb6>
 8005814:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005818:	f1ba 0f01 	cmp.w	sl, #1
 800581c:	dc01      	bgt.n	8005822 <_printf_float+0x3b6>
 800581e:	07db      	lsls	r3, r3, #31
 8005820:	d536      	bpl.n	8005890 <_printf_float+0x424>
 8005822:	2301      	movs	r3, #1
 8005824:	4642      	mov	r2, r8
 8005826:	4631      	mov	r1, r6
 8005828:	4628      	mov	r0, r5
 800582a:	47b8      	blx	r7
 800582c:	3001      	adds	r0, #1
 800582e:	f43f ae78 	beq.w	8005522 <_printf_float+0xb6>
 8005832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f ae70 	beq.w	8005522 <_printf_float+0xb6>
 8005842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800584e:	f7fb f95b 	bl	8000b08 <__aeabi_dcmpeq>
 8005852:	b9c0      	cbnz	r0, 8005886 <_printf_float+0x41a>
 8005854:	4653      	mov	r3, sl
 8005856:	f108 0201 	add.w	r2, r8, #1
 800585a:	4631      	mov	r1, r6
 800585c:	4628      	mov	r0, r5
 800585e:	47b8      	blx	r7
 8005860:	3001      	adds	r0, #1
 8005862:	d10c      	bne.n	800587e <_printf_float+0x412>
 8005864:	e65d      	b.n	8005522 <_printf_float+0xb6>
 8005866:	2301      	movs	r3, #1
 8005868:	465a      	mov	r2, fp
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	f43f ae56 	beq.w	8005522 <_printf_float+0xb6>
 8005876:	f108 0801 	add.w	r8, r8, #1
 800587a:	45d0      	cmp	r8, sl
 800587c:	dbf3      	blt.n	8005866 <_printf_float+0x3fa>
 800587e:	464b      	mov	r3, r9
 8005880:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005884:	e6df      	b.n	8005646 <_printf_float+0x1da>
 8005886:	f04f 0800 	mov.w	r8, #0
 800588a:	f104 0b1a 	add.w	fp, r4, #26
 800588e:	e7f4      	b.n	800587a <_printf_float+0x40e>
 8005890:	2301      	movs	r3, #1
 8005892:	4642      	mov	r2, r8
 8005894:	e7e1      	b.n	800585a <_printf_float+0x3ee>
 8005896:	2301      	movs	r3, #1
 8005898:	464a      	mov	r2, r9
 800589a:	4631      	mov	r1, r6
 800589c:	4628      	mov	r0, r5
 800589e:	47b8      	blx	r7
 80058a0:	3001      	adds	r0, #1
 80058a2:	f43f ae3e 	beq.w	8005522 <_printf_float+0xb6>
 80058a6:	f108 0801 	add.w	r8, r8, #1
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058ae:	1a5b      	subs	r3, r3, r1
 80058b0:	4543      	cmp	r3, r8
 80058b2:	dcf0      	bgt.n	8005896 <_printf_float+0x42a>
 80058b4:	e6fc      	b.n	80056b0 <_printf_float+0x244>
 80058b6:	f04f 0800 	mov.w	r8, #0
 80058ba:	f104 0919 	add.w	r9, r4, #25
 80058be:	e7f4      	b.n	80058aa <_printf_float+0x43e>

080058c0 <_printf_common>:
 80058c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	4616      	mov	r6, r2
 80058c6:	4698      	mov	r8, r3
 80058c8:	688a      	ldr	r2, [r1, #8]
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfb8      	it	lt
 80058d4:	4613      	movlt	r3, r2
 80058d6:	6033      	str	r3, [r6, #0]
 80058d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058dc:	4607      	mov	r7, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b10a      	cbz	r2, 80058e6 <_printf_common+0x26>
 80058e2:	3301      	adds	r3, #1
 80058e4:	6033      	str	r3, [r6, #0]
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	0699      	lsls	r1, r3, #26
 80058ea:	bf42      	ittt	mi
 80058ec:	6833      	ldrmi	r3, [r6, #0]
 80058ee:	3302      	addmi	r3, #2
 80058f0:	6033      	strmi	r3, [r6, #0]
 80058f2:	6825      	ldr	r5, [r4, #0]
 80058f4:	f015 0506 	ands.w	r5, r5, #6
 80058f8:	d106      	bne.n	8005908 <_printf_common+0x48>
 80058fa:	f104 0a19 	add.w	sl, r4, #25
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	6832      	ldr	r2, [r6, #0]
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	42ab      	cmp	r3, r5
 8005906:	dc26      	bgt.n	8005956 <_printf_common+0x96>
 8005908:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	3b00      	subs	r3, #0
 8005910:	bf18      	it	ne
 8005912:	2301      	movne	r3, #1
 8005914:	0692      	lsls	r2, r2, #26
 8005916:	d42b      	bmi.n	8005970 <_printf_common+0xb0>
 8005918:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800591c:	4641      	mov	r1, r8
 800591e:	4638      	mov	r0, r7
 8005920:	47c8      	blx	r9
 8005922:	3001      	adds	r0, #1
 8005924:	d01e      	beq.n	8005964 <_printf_common+0xa4>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	2b04      	cmp	r3, #4
 8005930:	bf02      	ittt	eq
 8005932:	68e5      	ldreq	r5, [r4, #12]
 8005934:	6833      	ldreq	r3, [r6, #0]
 8005936:	1aed      	subeq	r5, r5, r3
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	bf0c      	ite	eq
 800593c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005940:	2500      	movne	r5, #0
 8005942:	4293      	cmp	r3, r2
 8005944:	bfc4      	itt	gt
 8005946:	1a9b      	subgt	r3, r3, r2
 8005948:	18ed      	addgt	r5, r5, r3
 800594a:	2600      	movs	r6, #0
 800594c:	341a      	adds	r4, #26
 800594e:	42b5      	cmp	r5, r6
 8005950:	d11a      	bne.n	8005988 <_printf_common+0xc8>
 8005952:	2000      	movs	r0, #0
 8005954:	e008      	b.n	8005968 <_printf_common+0xa8>
 8005956:	2301      	movs	r3, #1
 8005958:	4652      	mov	r2, sl
 800595a:	4641      	mov	r1, r8
 800595c:	4638      	mov	r0, r7
 800595e:	47c8      	blx	r9
 8005960:	3001      	adds	r0, #1
 8005962:	d103      	bne.n	800596c <_printf_common+0xac>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596c:	3501      	adds	r5, #1
 800596e:	e7c6      	b.n	80058fe <_printf_common+0x3e>
 8005970:	18e1      	adds	r1, r4, r3
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	2030      	movs	r0, #48	@ 0x30
 8005976:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800597a:	4422      	add	r2, r4
 800597c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005980:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005984:	3302      	adds	r3, #2
 8005986:	e7c7      	b.n	8005918 <_printf_common+0x58>
 8005988:	2301      	movs	r3, #1
 800598a:	4622      	mov	r2, r4
 800598c:	4641      	mov	r1, r8
 800598e:	4638      	mov	r0, r7
 8005990:	47c8      	blx	r9
 8005992:	3001      	adds	r0, #1
 8005994:	d0e6      	beq.n	8005964 <_printf_common+0xa4>
 8005996:	3601      	adds	r6, #1
 8005998:	e7d9      	b.n	800594e <_printf_common+0x8e>
	...

0800599c <_printf_i>:
 800599c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	7e0f      	ldrb	r7, [r1, #24]
 80059a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059a4:	2f78      	cmp	r7, #120	@ 0x78
 80059a6:	4691      	mov	r9, r2
 80059a8:	4680      	mov	r8, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	469a      	mov	sl, r3
 80059ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059b2:	d807      	bhi.n	80059c4 <_printf_i+0x28>
 80059b4:	2f62      	cmp	r7, #98	@ 0x62
 80059b6:	d80a      	bhi.n	80059ce <_printf_i+0x32>
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	f000 80d1 	beq.w	8005b60 <_printf_i+0x1c4>
 80059be:	2f58      	cmp	r7, #88	@ 0x58
 80059c0:	f000 80b8 	beq.w	8005b34 <_printf_i+0x198>
 80059c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059cc:	e03a      	b.n	8005a44 <_printf_i+0xa8>
 80059ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059d2:	2b15      	cmp	r3, #21
 80059d4:	d8f6      	bhi.n	80059c4 <_printf_i+0x28>
 80059d6:	a101      	add	r1, pc, #4	@ (adr r1, 80059dc <_printf_i+0x40>)
 80059d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059dc:	08005a35 	.word	0x08005a35
 80059e0:	08005a49 	.word	0x08005a49
 80059e4:	080059c5 	.word	0x080059c5
 80059e8:	080059c5 	.word	0x080059c5
 80059ec:	080059c5 	.word	0x080059c5
 80059f0:	080059c5 	.word	0x080059c5
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	080059c5 	.word	0x080059c5
 80059fc:	080059c5 	.word	0x080059c5
 8005a00:	080059c5 	.word	0x080059c5
 8005a04:	080059c5 	.word	0x080059c5
 8005a08:	08005b47 	.word	0x08005b47
 8005a0c:	08005a73 	.word	0x08005a73
 8005a10:	08005b01 	.word	0x08005b01
 8005a14:	080059c5 	.word	0x080059c5
 8005a18:	080059c5 	.word	0x080059c5
 8005a1c:	08005b69 	.word	0x08005b69
 8005a20:	080059c5 	.word	0x080059c5
 8005a24:	08005a73 	.word	0x08005a73
 8005a28:	080059c5 	.word	0x080059c5
 8005a2c:	080059c5 	.word	0x080059c5
 8005a30:	08005b09 	.word	0x08005b09
 8005a34:	6833      	ldr	r3, [r6, #0]
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6032      	str	r2, [r6, #0]
 8005a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a44:	2301      	movs	r3, #1
 8005a46:	e09c      	b.n	8005b82 <_printf_i+0x1e6>
 8005a48:	6833      	ldr	r3, [r6, #0]
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	6031      	str	r1, [r6, #0]
 8005a50:	0606      	lsls	r6, r0, #24
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0xbc>
 8005a54:	681d      	ldr	r5, [r3, #0]
 8005a56:	e003      	b.n	8005a60 <_printf_i+0xc4>
 8005a58:	0645      	lsls	r5, r0, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0xb8>
 8005a5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	da03      	bge.n	8005a6c <_printf_i+0xd0>
 8005a64:	232d      	movs	r3, #45	@ 0x2d
 8005a66:	426d      	negs	r5, r5
 8005a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a6c:	4858      	ldr	r0, [pc, #352]	@ (8005bd0 <_printf_i+0x234>)
 8005a6e:	230a      	movs	r3, #10
 8005a70:	e011      	b.n	8005a96 <_printf_i+0xfa>
 8005a72:	6821      	ldr	r1, [r4, #0]
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	0608      	lsls	r0, r1, #24
 8005a78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a7c:	d402      	bmi.n	8005a84 <_printf_i+0xe8>
 8005a7e:	0649      	lsls	r1, r1, #25
 8005a80:	bf48      	it	mi
 8005a82:	b2ad      	uxthmi	r5, r5
 8005a84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a86:	4852      	ldr	r0, [pc, #328]	@ (8005bd0 <_printf_i+0x234>)
 8005a88:	6033      	str	r3, [r6, #0]
 8005a8a:	bf14      	ite	ne
 8005a8c:	230a      	movne	r3, #10
 8005a8e:	2308      	moveq	r3, #8
 8005a90:	2100      	movs	r1, #0
 8005a92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a96:	6866      	ldr	r6, [r4, #4]
 8005a98:	60a6      	str	r6, [r4, #8]
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	db05      	blt.n	8005aaa <_printf_i+0x10e>
 8005a9e:	6821      	ldr	r1, [r4, #0]
 8005aa0:	432e      	orrs	r6, r5
 8005aa2:	f021 0104 	bic.w	r1, r1, #4
 8005aa6:	6021      	str	r1, [r4, #0]
 8005aa8:	d04b      	beq.n	8005b42 <_printf_i+0x1a6>
 8005aaa:	4616      	mov	r6, r2
 8005aac:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ab0:	fb03 5711 	mls	r7, r3, r1, r5
 8005ab4:	5dc7      	ldrb	r7, [r0, r7]
 8005ab6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aba:	462f      	mov	r7, r5
 8005abc:	42bb      	cmp	r3, r7
 8005abe:	460d      	mov	r5, r1
 8005ac0:	d9f4      	bls.n	8005aac <_printf_i+0x110>
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d10b      	bne.n	8005ade <_printf_i+0x142>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	07df      	lsls	r7, r3, #31
 8005aca:	d508      	bpl.n	8005ade <_printf_i+0x142>
 8005acc:	6923      	ldr	r3, [r4, #16]
 8005ace:	6861      	ldr	r1, [r4, #4]
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	bfde      	ittt	le
 8005ad4:	2330      	movle	r3, #48	@ 0x30
 8005ad6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ada:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ade:	1b92      	subs	r2, r2, r6
 8005ae0:	6122      	str	r2, [r4, #16]
 8005ae2:	f8cd a000 	str.w	sl, [sp]
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	aa03      	add	r2, sp, #12
 8005aea:	4621      	mov	r1, r4
 8005aec:	4640      	mov	r0, r8
 8005aee:	f7ff fee7 	bl	80058c0 <_printf_common>
 8005af2:	3001      	adds	r0, #1
 8005af4:	d14a      	bne.n	8005b8c <_printf_i+0x1f0>
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	b004      	add	sp, #16
 8005afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	f043 0320 	orr.w	r3, r3, #32
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	4832      	ldr	r0, [pc, #200]	@ (8005bd4 <_printf_i+0x238>)
 8005b0a:	2778      	movs	r7, #120	@ 0x78
 8005b0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	6831      	ldr	r1, [r6, #0]
 8005b14:	061f      	lsls	r7, r3, #24
 8005b16:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b1a:	d402      	bmi.n	8005b22 <_printf_i+0x186>
 8005b1c:	065f      	lsls	r7, r3, #25
 8005b1e:	bf48      	it	mi
 8005b20:	b2ad      	uxthmi	r5, r5
 8005b22:	6031      	str	r1, [r6, #0]
 8005b24:	07d9      	lsls	r1, r3, #31
 8005b26:	bf44      	itt	mi
 8005b28:	f043 0320 	orrmi.w	r3, r3, #32
 8005b2c:	6023      	strmi	r3, [r4, #0]
 8005b2e:	b11d      	cbz	r5, 8005b38 <_printf_i+0x19c>
 8005b30:	2310      	movs	r3, #16
 8005b32:	e7ad      	b.n	8005a90 <_printf_i+0xf4>
 8005b34:	4826      	ldr	r0, [pc, #152]	@ (8005bd0 <_printf_i+0x234>)
 8005b36:	e7e9      	b.n	8005b0c <_printf_i+0x170>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	e7f6      	b.n	8005b30 <_printf_i+0x194>
 8005b42:	4616      	mov	r6, r2
 8005b44:	e7bd      	b.n	8005ac2 <_printf_i+0x126>
 8005b46:	6833      	ldr	r3, [r6, #0]
 8005b48:	6825      	ldr	r5, [r4, #0]
 8005b4a:	6961      	ldr	r1, [r4, #20]
 8005b4c:	1d18      	adds	r0, r3, #4
 8005b4e:	6030      	str	r0, [r6, #0]
 8005b50:	062e      	lsls	r6, r5, #24
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	d501      	bpl.n	8005b5a <_printf_i+0x1be>
 8005b56:	6019      	str	r1, [r3, #0]
 8005b58:	e002      	b.n	8005b60 <_printf_i+0x1c4>
 8005b5a:	0668      	lsls	r0, r5, #25
 8005b5c:	d5fb      	bpl.n	8005b56 <_printf_i+0x1ba>
 8005b5e:	8019      	strh	r1, [r3, #0]
 8005b60:	2300      	movs	r3, #0
 8005b62:	6123      	str	r3, [r4, #16]
 8005b64:	4616      	mov	r6, r2
 8005b66:	e7bc      	b.n	8005ae2 <_printf_i+0x146>
 8005b68:	6833      	ldr	r3, [r6, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	6032      	str	r2, [r6, #0]
 8005b6e:	681e      	ldr	r6, [r3, #0]
 8005b70:	6862      	ldr	r2, [r4, #4]
 8005b72:	2100      	movs	r1, #0
 8005b74:	4630      	mov	r0, r6
 8005b76:	f7fa fb4b 	bl	8000210 <memchr>
 8005b7a:	b108      	cbz	r0, 8005b80 <_printf_i+0x1e4>
 8005b7c:	1b80      	subs	r0, r0, r6
 8005b7e:	6060      	str	r0, [r4, #4]
 8005b80:	6863      	ldr	r3, [r4, #4]
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	2300      	movs	r3, #0
 8005b86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b8a:	e7aa      	b.n	8005ae2 <_printf_i+0x146>
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	4632      	mov	r2, r6
 8005b90:	4649      	mov	r1, r9
 8005b92:	4640      	mov	r0, r8
 8005b94:	47d0      	blx	sl
 8005b96:	3001      	adds	r0, #1
 8005b98:	d0ad      	beq.n	8005af6 <_printf_i+0x15a>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	079b      	lsls	r3, r3, #30
 8005b9e:	d413      	bmi.n	8005bc8 <_printf_i+0x22c>
 8005ba0:	68e0      	ldr	r0, [r4, #12]
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	bfb8      	it	lt
 8005ba8:	4618      	movlt	r0, r3
 8005baa:	e7a6      	b.n	8005afa <_printf_i+0x15e>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4632      	mov	r2, r6
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	47d0      	blx	sl
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d09d      	beq.n	8005af6 <_printf_i+0x15a>
 8005bba:	3501      	adds	r5, #1
 8005bbc:	68e3      	ldr	r3, [r4, #12]
 8005bbe:	9903      	ldr	r1, [sp, #12]
 8005bc0:	1a5b      	subs	r3, r3, r1
 8005bc2:	42ab      	cmp	r3, r5
 8005bc4:	dcf2      	bgt.n	8005bac <_printf_i+0x210>
 8005bc6:	e7eb      	b.n	8005ba0 <_printf_i+0x204>
 8005bc8:	2500      	movs	r5, #0
 8005bca:	f104 0619 	add.w	r6, r4, #25
 8005bce:	e7f5      	b.n	8005bbc <_printf_i+0x220>
 8005bd0:	08007ee2 	.word	0x08007ee2
 8005bd4:	08007ef3 	.word	0x08007ef3

08005bd8 <std>:
 8005bd8:	2300      	movs	r3, #0
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
 8005bde:	e9c0 3300 	strd	r3, r3, [r0]
 8005be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005be6:	6083      	str	r3, [r0, #8]
 8005be8:	8181      	strh	r1, [r0, #12]
 8005bea:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bec:	81c2      	strh	r2, [r0, #14]
 8005bee:	6183      	str	r3, [r0, #24]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	305c      	adds	r0, #92	@ 0x5c
 8005bf6:	f000 f8f4 	bl	8005de2 <memset>
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <std+0x58>)
 8005bfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <std+0x5c>)
 8005c00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <std+0x60>)
 8005c04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c06:	4b0d      	ldr	r3, [pc, #52]	@ (8005c3c <std+0x64>)
 8005c08:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <std+0x68>)
 8005c0c:	6224      	str	r4, [r4, #32]
 8005c0e:	429c      	cmp	r4, r3
 8005c10:	d006      	beq.n	8005c20 <std+0x48>
 8005c12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c16:	4294      	cmp	r4, r2
 8005c18:	d002      	beq.n	8005c20 <std+0x48>
 8005c1a:	33d0      	adds	r3, #208	@ 0xd0
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	d105      	bne.n	8005c2c <std+0x54>
 8005c20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f000 b958 	b.w	8005edc <__retarget_lock_init_recursive>
 8005c2c:	bd10      	pop	{r4, pc}
 8005c2e:	bf00      	nop
 8005c30:	08005d5d 	.word	0x08005d5d
 8005c34:	08005d7f 	.word	0x08005d7f
 8005c38:	08005db7 	.word	0x08005db7
 8005c3c:	08005ddb 	.word	0x08005ddb
 8005c40:	200003f8 	.word	0x200003f8

08005c44 <stdio_exit_handler>:
 8005c44:	4a02      	ldr	r2, [pc, #8]	@ (8005c50 <stdio_exit_handler+0xc>)
 8005c46:	4903      	ldr	r1, [pc, #12]	@ (8005c54 <stdio_exit_handler+0x10>)
 8005c48:	4803      	ldr	r0, [pc, #12]	@ (8005c58 <stdio_exit_handler+0x14>)
 8005c4a:	f000 b869 	b.w	8005d20 <_fwalk_sglue>
 8005c4e:	bf00      	nop
 8005c50:	2000001c 	.word	0x2000001c
 8005c54:	08007595 	.word	0x08007595
 8005c58:	2000002c 	.word	0x2000002c

08005c5c <cleanup_stdio>:
 8005c5c:	6841      	ldr	r1, [r0, #4]
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <cleanup_stdio+0x34>)
 8005c60:	4299      	cmp	r1, r3
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	d001      	beq.n	8005c6c <cleanup_stdio+0x10>
 8005c68:	f001 fc94 	bl	8007594 <_fflush_r>
 8005c6c:	68a1      	ldr	r1, [r4, #8]
 8005c6e:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <cleanup_stdio+0x38>)
 8005c70:	4299      	cmp	r1, r3
 8005c72:	d002      	beq.n	8005c7a <cleanup_stdio+0x1e>
 8005c74:	4620      	mov	r0, r4
 8005c76:	f001 fc8d 	bl	8007594 <_fflush_r>
 8005c7a:	68e1      	ldr	r1, [r4, #12]
 8005c7c:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <cleanup_stdio+0x3c>)
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	d004      	beq.n	8005c8c <cleanup_stdio+0x30>
 8005c82:	4620      	mov	r0, r4
 8005c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c88:	f001 bc84 	b.w	8007594 <_fflush_r>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	bf00      	nop
 8005c90:	200003f8 	.word	0x200003f8
 8005c94:	20000460 	.word	0x20000460
 8005c98:	200004c8 	.word	0x200004c8

08005c9c <global_stdio_init.part.0>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <global_stdio_init.part.0+0x30>)
 8005ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8005cd0 <global_stdio_init.part.0+0x34>)
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd4 <global_stdio_init.part.0+0x38>)
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2104      	movs	r1, #4
 8005cac:	f7ff ff94 	bl	8005bd8 <std>
 8005cb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2109      	movs	r1, #9
 8005cb8:	f7ff ff8e 	bl	8005bd8 <std>
 8005cbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc6:	2112      	movs	r1, #18
 8005cc8:	f7ff bf86 	b.w	8005bd8 <std>
 8005ccc:	20000530 	.word	0x20000530
 8005cd0:	200003f8 	.word	0x200003f8
 8005cd4:	08005c45 	.word	0x08005c45

08005cd8 <__sfp_lock_acquire>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	@ (8005ce0 <__sfp_lock_acquire+0x8>)
 8005cda:	f000 b900 	b.w	8005ede <__retarget_lock_acquire_recursive>
 8005cde:	bf00      	nop
 8005ce0:	20000539 	.word	0x20000539

08005ce4 <__sfp_lock_release>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	@ (8005cec <__sfp_lock_release+0x8>)
 8005ce6:	f000 b8fb 	b.w	8005ee0 <__retarget_lock_release_recursive>
 8005cea:	bf00      	nop
 8005cec:	20000539 	.word	0x20000539

08005cf0 <__sinit>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	f7ff fff0 	bl	8005cd8 <__sfp_lock_acquire>
 8005cf8:	6a23      	ldr	r3, [r4, #32]
 8005cfa:	b11b      	cbz	r3, 8005d04 <__sinit+0x14>
 8005cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d00:	f7ff bff0 	b.w	8005ce4 <__sfp_lock_release>
 8005d04:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <__sinit+0x28>)
 8005d06:	6223      	str	r3, [r4, #32]
 8005d08:	4b04      	ldr	r3, [pc, #16]	@ (8005d1c <__sinit+0x2c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f5      	bne.n	8005cfc <__sinit+0xc>
 8005d10:	f7ff ffc4 	bl	8005c9c <global_stdio_init.part.0>
 8005d14:	e7f2      	b.n	8005cfc <__sinit+0xc>
 8005d16:	bf00      	nop
 8005d18:	08005c5d 	.word	0x08005c5d
 8005d1c:	20000530 	.word	0x20000530

08005d20 <_fwalk_sglue>:
 8005d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d24:	4607      	mov	r7, r0
 8005d26:	4688      	mov	r8, r1
 8005d28:	4614      	mov	r4, r2
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d30:	f1b9 0901 	subs.w	r9, r9, #1
 8005d34:	d505      	bpl.n	8005d42 <_fwalk_sglue+0x22>
 8005d36:	6824      	ldr	r4, [r4, #0]
 8005d38:	2c00      	cmp	r4, #0
 8005d3a:	d1f7      	bne.n	8005d2c <_fwalk_sglue+0xc>
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d42:	89ab      	ldrh	r3, [r5, #12]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d907      	bls.n	8005d58 <_fwalk_sglue+0x38>
 8005d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	d003      	beq.n	8005d58 <_fwalk_sglue+0x38>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4638      	mov	r0, r7
 8005d54:	47c0      	blx	r8
 8005d56:	4306      	orrs	r6, r0
 8005d58:	3568      	adds	r5, #104	@ 0x68
 8005d5a:	e7e9      	b.n	8005d30 <_fwalk_sglue+0x10>

08005d5c <__sread>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	f000 f86c 	bl	8005e40 <_read_r>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	bfab      	itete	ge
 8005d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d70:	181b      	addge	r3, r3, r0
 8005d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d76:	bfac      	ite	ge
 8005d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d7a:	81a3      	strhlt	r3, [r4, #12]
 8005d7c:	bd10      	pop	{r4, pc}

08005d7e <__swrite>:
 8005d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	461f      	mov	r7, r3
 8005d84:	898b      	ldrh	r3, [r1, #12]
 8005d86:	05db      	lsls	r3, r3, #23
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	d505      	bpl.n	8005d9c <__swrite+0x1e>
 8005d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d94:	2302      	movs	r3, #2
 8005d96:	2200      	movs	r2, #0
 8005d98:	f000 f840 	bl	8005e1c <_lseek_r>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	4632      	mov	r2, r6
 8005daa:	463b      	mov	r3, r7
 8005dac:	4628      	mov	r0, r5
 8005dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db2:	f000 b857 	b.w	8005e64 <_write_r>

08005db6 <__sseek>:
 8005db6:	b510      	push	{r4, lr}
 8005db8:	460c      	mov	r4, r1
 8005dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbe:	f000 f82d 	bl	8005e1c <_lseek_r>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	bf15      	itete	ne
 8005dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dd2:	81a3      	strheq	r3, [r4, #12]
 8005dd4:	bf18      	it	ne
 8005dd6:	81a3      	strhne	r3, [r4, #12]
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <__sclose>:
 8005dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dde:	f000 b80d 	b.w	8005dfc <_close_r>

08005de2 <memset>:
 8005de2:	4402      	add	r2, r0
 8005de4:	4603      	mov	r3, r0
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d100      	bne.n	8005dec <memset+0xa>
 8005dea:	4770      	bx	lr
 8005dec:	f803 1b01 	strb.w	r1, [r3], #1
 8005df0:	e7f9      	b.n	8005de6 <memset+0x4>
	...

08005df4 <_localeconv_r>:
 8005df4:	4800      	ldr	r0, [pc, #0]	@ (8005df8 <_localeconv_r+0x4>)
 8005df6:	4770      	bx	lr
 8005df8:	20000168 	.word	0x20000168

08005dfc <_close_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d06      	ldr	r5, [pc, #24]	@ (8005e18 <_close_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7fb ffb0 	bl	8001d6c <_close>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_close_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_close_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20000534 	.word	0x20000534

08005e1c <_lseek_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d07      	ldr	r5, [pc, #28]	@ (8005e3c <_lseek_r+0x20>)
 8005e20:	4604      	mov	r4, r0
 8005e22:	4608      	mov	r0, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	2200      	movs	r2, #0
 8005e28:	602a      	str	r2, [r5, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f7fb ffc5 	bl	8001dba <_lseek>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_lseek_r+0x1e>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_lseek_r+0x1e>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000534 	.word	0x20000534

08005e40 <_read_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	@ (8005e60 <_read_r+0x20>)
 8005e44:	4604      	mov	r4, r0
 8005e46:	4608      	mov	r0, r1
 8005e48:	4611      	mov	r1, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fb ff53 	bl	8001cfa <_read>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_read_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_read_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000534 	.word	0x20000534

08005e64 <_write_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d07      	ldr	r5, [pc, #28]	@ (8005e84 <_write_r+0x20>)
 8005e68:	4604      	mov	r4, r0
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f7fb ff5e 	bl	8001d34 <_write>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_write_r+0x1e>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_write_r+0x1e>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	20000534 	.word	0x20000534

08005e88 <__errno>:
 8005e88:	4b01      	ldr	r3, [pc, #4]	@ (8005e90 <__errno+0x8>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000028 	.word	0x20000028

08005e94 <__libc_init_array>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	4d0d      	ldr	r5, [pc, #52]	@ (8005ecc <__libc_init_array+0x38>)
 8005e98:	4c0d      	ldr	r4, [pc, #52]	@ (8005ed0 <__libc_init_array+0x3c>)
 8005e9a:	1b64      	subs	r4, r4, r5
 8005e9c:	10a4      	asrs	r4, r4, #2
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	42a6      	cmp	r6, r4
 8005ea2:	d109      	bne.n	8005eb8 <__libc_init_array+0x24>
 8005ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8005ed4 <__libc_init_array+0x40>)
 8005ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8005ed8 <__libc_init_array+0x44>)
 8005ea8:	f001 fff8 	bl	8007e9c <_init>
 8005eac:	1b64      	subs	r4, r4, r5
 8005eae:	10a4      	asrs	r4, r4, #2
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	42a6      	cmp	r6, r4
 8005eb4:	d105      	bne.n	8005ec2 <__libc_init_array+0x2e>
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebc:	4798      	blx	r3
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	e7ee      	b.n	8005ea0 <__libc_init_array+0xc>
 8005ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec6:	4798      	blx	r3
 8005ec8:	3601      	adds	r6, #1
 8005eca:	e7f2      	b.n	8005eb2 <__libc_init_array+0x1e>
 8005ecc:	08008260 	.word	0x08008260
 8005ed0:	08008260 	.word	0x08008260
 8005ed4:	08008260 	.word	0x08008260
 8005ed8:	08008264 	.word	0x08008264

08005edc <__retarget_lock_init_recursive>:
 8005edc:	4770      	bx	lr

08005ede <__retarget_lock_acquire_recursive>:
 8005ede:	4770      	bx	lr

08005ee0 <__retarget_lock_release_recursive>:
 8005ee0:	4770      	bx	lr

08005ee2 <quorem>:
 8005ee2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee6:	6903      	ldr	r3, [r0, #16]
 8005ee8:	690c      	ldr	r4, [r1, #16]
 8005eea:	42a3      	cmp	r3, r4
 8005eec:	4607      	mov	r7, r0
 8005eee:	db7e      	blt.n	8005fee <quorem+0x10c>
 8005ef0:	3c01      	subs	r4, #1
 8005ef2:	f101 0814 	add.w	r8, r1, #20
 8005ef6:	00a3      	lsls	r3, r4, #2
 8005ef8:	f100 0514 	add.w	r5, r0, #20
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f14:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f18:	d32e      	bcc.n	8005f78 <quorem+0x96>
 8005f1a:	f04f 0a00 	mov.w	sl, #0
 8005f1e:	46c4      	mov	ip, r8
 8005f20:	46ae      	mov	lr, r5
 8005f22:	46d3      	mov	fp, sl
 8005f24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f28:	b298      	uxth	r0, r3
 8005f2a:	fb06 a000 	mla	r0, r6, r0, sl
 8005f2e:	0c02      	lsrs	r2, r0, #16
 8005f30:	0c1b      	lsrs	r3, r3, #16
 8005f32:	fb06 2303 	mla	r3, r6, r3, r2
 8005f36:	f8de 2000 	ldr.w	r2, [lr]
 8005f3a:	b280      	uxth	r0, r0
 8005f3c:	b292      	uxth	r2, r2
 8005f3e:	1a12      	subs	r2, r2, r0
 8005f40:	445a      	add	r2, fp
 8005f42:	f8de 0000 	ldr.w	r0, [lr]
 8005f46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f54:	b292      	uxth	r2, r2
 8005f56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f5a:	45e1      	cmp	r9, ip
 8005f5c:	f84e 2b04 	str.w	r2, [lr], #4
 8005f60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f64:	d2de      	bcs.n	8005f24 <quorem+0x42>
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	58eb      	ldr	r3, [r5, r3]
 8005f6a:	b92b      	cbnz	r3, 8005f78 <quorem+0x96>
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	429d      	cmp	r5, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	d32f      	bcc.n	8005fd6 <quorem+0xf4>
 8005f76:	613c      	str	r4, [r7, #16]
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f001 f97f 	bl	800727c <__mcmp>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	db25      	blt.n	8005fce <quorem+0xec>
 8005f82:	4629      	mov	r1, r5
 8005f84:	2000      	movs	r0, #0
 8005f86:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f8a:	f8d1 c000 	ldr.w	ip, [r1]
 8005f8e:	fa1f fe82 	uxth.w	lr, r2
 8005f92:	fa1f f38c 	uxth.w	r3, ip
 8005f96:	eba3 030e 	sub.w	r3, r3, lr
 8005f9a:	4403      	add	r3, r0
 8005f9c:	0c12      	lsrs	r2, r2, #16
 8005f9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fa2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fac:	45c1      	cmp	r9, r8
 8005fae:	f841 3b04 	str.w	r3, [r1], #4
 8005fb2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fb6:	d2e6      	bcs.n	8005f86 <quorem+0xa4>
 8005fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fc0:	b922      	cbnz	r2, 8005fcc <quorem+0xea>
 8005fc2:	3b04      	subs	r3, #4
 8005fc4:	429d      	cmp	r5, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	d30b      	bcc.n	8005fe2 <quorem+0x100>
 8005fca:	613c      	str	r4, [r7, #16]
 8005fcc:	3601      	adds	r6, #1
 8005fce:	4630      	mov	r0, r6
 8005fd0:	b003      	add	sp, #12
 8005fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	d1cb      	bne.n	8005f76 <quorem+0x94>
 8005fde:	3c01      	subs	r4, #1
 8005fe0:	e7c6      	b.n	8005f70 <quorem+0x8e>
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	d1ef      	bne.n	8005fca <quorem+0xe8>
 8005fea:	3c01      	subs	r4, #1
 8005fec:	e7ea      	b.n	8005fc4 <quorem+0xe2>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e7ee      	b.n	8005fd0 <quorem+0xee>
 8005ff2:	0000      	movs	r0, r0
 8005ff4:	0000      	movs	r0, r0
	...

08005ff8 <_dtoa_r>:
 8005ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	69c7      	ldr	r7, [r0, #28]
 8005ffe:	b097      	sub	sp, #92	@ 0x5c
 8006000:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006004:	ec55 4b10 	vmov	r4, r5, d0
 8006008:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800600a:	9107      	str	r1, [sp, #28]
 800600c:	4681      	mov	r9, r0
 800600e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006010:	9311      	str	r3, [sp, #68]	@ 0x44
 8006012:	b97f      	cbnz	r7, 8006034 <_dtoa_r+0x3c>
 8006014:	2010      	movs	r0, #16
 8006016:	f000 fe09 	bl	8006c2c <malloc>
 800601a:	4602      	mov	r2, r0
 800601c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006020:	b920      	cbnz	r0, 800602c <_dtoa_r+0x34>
 8006022:	4ba9      	ldr	r3, [pc, #676]	@ (80062c8 <_dtoa_r+0x2d0>)
 8006024:	21ef      	movs	r1, #239	@ 0xef
 8006026:	48a9      	ldr	r0, [pc, #676]	@ (80062cc <_dtoa_r+0x2d4>)
 8006028:	f001 fafa 	bl	8007620 <__assert_func>
 800602c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006030:	6007      	str	r7, [r0, #0]
 8006032:	60c7      	str	r7, [r0, #12]
 8006034:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	b159      	cbz	r1, 8006054 <_dtoa_r+0x5c>
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	604a      	str	r2, [r1, #4]
 8006040:	2301      	movs	r3, #1
 8006042:	4093      	lsls	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
 8006046:	4648      	mov	r0, r9
 8006048:	f000 fee6 	bl	8006e18 <_Bfree>
 800604c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	1e2b      	subs	r3, r5, #0
 8006056:	bfb9      	ittee	lt
 8006058:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800605c:	9305      	strlt	r3, [sp, #20]
 800605e:	2300      	movge	r3, #0
 8006060:	6033      	strge	r3, [r6, #0]
 8006062:	9f05      	ldr	r7, [sp, #20]
 8006064:	4b9a      	ldr	r3, [pc, #616]	@ (80062d0 <_dtoa_r+0x2d8>)
 8006066:	bfbc      	itt	lt
 8006068:	2201      	movlt	r2, #1
 800606a:	6032      	strlt	r2, [r6, #0]
 800606c:	43bb      	bics	r3, r7
 800606e:	d112      	bne.n	8006096 <_dtoa_r+0x9e>
 8006070:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006072:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800607c:	4323      	orrs	r3, r4
 800607e:	f000 855a 	beq.w	8006b36 <_dtoa_r+0xb3e>
 8006082:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006084:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80062e4 <_dtoa_r+0x2ec>
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 855c 	beq.w	8006b46 <_dtoa_r+0xb4e>
 800608e:	f10a 0303 	add.w	r3, sl, #3
 8006092:	f000 bd56 	b.w	8006b42 <_dtoa_r+0xb4a>
 8006096:	ed9d 7b04 	vldr	d7, [sp, #16]
 800609a:	2200      	movs	r2, #0
 800609c:	ec51 0b17 	vmov	r0, r1, d7
 80060a0:	2300      	movs	r3, #0
 80060a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80060a6:	f7fa fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80060aa:	4680      	mov	r8, r0
 80060ac:	b158      	cbz	r0, 80060c6 <_dtoa_r+0xce>
 80060ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80060b0:	2301      	movs	r3, #1
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060b6:	b113      	cbz	r3, 80060be <_dtoa_r+0xc6>
 80060b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80060ba:	4b86      	ldr	r3, [pc, #536]	@ (80062d4 <_dtoa_r+0x2dc>)
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80062e8 <_dtoa_r+0x2f0>
 80060c2:	f000 bd40 	b.w	8006b46 <_dtoa_r+0xb4e>
 80060c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80060ca:	aa14      	add	r2, sp, #80	@ 0x50
 80060cc:	a915      	add	r1, sp, #84	@ 0x54
 80060ce:	4648      	mov	r0, r9
 80060d0:	f001 f984 	bl	80073dc <__d2b>
 80060d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80060d8:	9002      	str	r0, [sp, #8]
 80060da:	2e00      	cmp	r6, #0
 80060dc:	d078      	beq.n	80061d0 <_dtoa_r+0x1d8>
 80060de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80060e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80060ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80060f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80060f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80060f8:	4619      	mov	r1, r3
 80060fa:	2200      	movs	r2, #0
 80060fc:	4b76      	ldr	r3, [pc, #472]	@ (80062d8 <_dtoa_r+0x2e0>)
 80060fe:	f7fa f8e3 	bl	80002c8 <__aeabi_dsub>
 8006102:	a36b      	add	r3, pc, #428	@ (adr r3, 80062b0 <_dtoa_r+0x2b8>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa fa96 	bl	8000638 <__aeabi_dmul>
 800610c:	a36a      	add	r3, pc, #424	@ (adr r3, 80062b8 <_dtoa_r+0x2c0>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa f8db 	bl	80002cc <__adddf3>
 8006116:	4604      	mov	r4, r0
 8006118:	4630      	mov	r0, r6
 800611a:	460d      	mov	r5, r1
 800611c:	f7fa fa22 	bl	8000564 <__aeabi_i2d>
 8006120:	a367      	add	r3, pc, #412	@ (adr r3, 80062c0 <_dtoa_r+0x2c8>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f7fa fa87 	bl	8000638 <__aeabi_dmul>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	f7fa f8cb 	bl	80002cc <__adddf3>
 8006136:	4604      	mov	r4, r0
 8006138:	460d      	mov	r5, r1
 800613a:	f7fa fd2d 	bl	8000b98 <__aeabi_d2iz>
 800613e:	2200      	movs	r2, #0
 8006140:	4607      	mov	r7, r0
 8006142:	2300      	movs	r3, #0
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa fce8 	bl	8000b1c <__aeabi_dcmplt>
 800614c:	b140      	cbz	r0, 8006160 <_dtoa_r+0x168>
 800614e:	4638      	mov	r0, r7
 8006150:	f7fa fa08 	bl	8000564 <__aeabi_i2d>
 8006154:	4622      	mov	r2, r4
 8006156:	462b      	mov	r3, r5
 8006158:	f7fa fcd6 	bl	8000b08 <__aeabi_dcmpeq>
 800615c:	b900      	cbnz	r0, 8006160 <_dtoa_r+0x168>
 800615e:	3f01      	subs	r7, #1
 8006160:	2f16      	cmp	r7, #22
 8006162:	d852      	bhi.n	800620a <_dtoa_r+0x212>
 8006164:	4b5d      	ldr	r3, [pc, #372]	@ (80062dc <_dtoa_r+0x2e4>)
 8006166:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006172:	f7fa fcd3 	bl	8000b1c <__aeabi_dcmplt>
 8006176:	2800      	cmp	r0, #0
 8006178:	d049      	beq.n	800620e <_dtoa_r+0x216>
 800617a:	3f01      	subs	r7, #1
 800617c:	2300      	movs	r3, #0
 800617e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006180:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006182:	1b9b      	subs	r3, r3, r6
 8006184:	1e5a      	subs	r2, r3, #1
 8006186:	bf45      	ittet	mi
 8006188:	f1c3 0301 	rsbmi	r3, r3, #1
 800618c:	9300      	strmi	r3, [sp, #0]
 800618e:	2300      	movpl	r3, #0
 8006190:	2300      	movmi	r3, #0
 8006192:	9206      	str	r2, [sp, #24]
 8006194:	bf54      	ite	pl
 8006196:	9300      	strpl	r3, [sp, #0]
 8006198:	9306      	strmi	r3, [sp, #24]
 800619a:	2f00      	cmp	r7, #0
 800619c:	db39      	blt.n	8006212 <_dtoa_r+0x21a>
 800619e:	9b06      	ldr	r3, [sp, #24]
 80061a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80061a2:	443b      	add	r3, r7
 80061a4:	9306      	str	r3, [sp, #24]
 80061a6:	2300      	movs	r3, #0
 80061a8:	9308      	str	r3, [sp, #32]
 80061aa:	9b07      	ldr	r3, [sp, #28]
 80061ac:	2b09      	cmp	r3, #9
 80061ae:	d863      	bhi.n	8006278 <_dtoa_r+0x280>
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	bfc4      	itt	gt
 80061b4:	3b04      	subgt	r3, #4
 80061b6:	9307      	strgt	r3, [sp, #28]
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	f1a3 0302 	sub.w	r3, r3, #2
 80061be:	bfcc      	ite	gt
 80061c0:	2400      	movgt	r4, #0
 80061c2:	2401      	movle	r4, #1
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d863      	bhi.n	8006290 <_dtoa_r+0x298>
 80061c8:	e8df f003 	tbb	[pc, r3]
 80061cc:	2b375452 	.word	0x2b375452
 80061d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80061d4:	441e      	add	r6, r3
 80061d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80061da:	2b20      	cmp	r3, #32
 80061dc:	bfc1      	itttt	gt
 80061de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80061e2:	409f      	lslgt	r7, r3
 80061e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80061e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80061ec:	bfd6      	itet	le
 80061ee:	f1c3 0320 	rsble	r3, r3, #32
 80061f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80061f6:	fa04 f003 	lslle.w	r0, r4, r3
 80061fa:	f7fa f9a3 	bl	8000544 <__aeabi_ui2d>
 80061fe:	2201      	movs	r2, #1
 8006200:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006204:	3e01      	subs	r6, #1
 8006206:	9212      	str	r2, [sp, #72]	@ 0x48
 8006208:	e776      	b.n	80060f8 <_dtoa_r+0x100>
 800620a:	2301      	movs	r3, #1
 800620c:	e7b7      	b.n	800617e <_dtoa_r+0x186>
 800620e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006210:	e7b6      	b.n	8006180 <_dtoa_r+0x188>
 8006212:	9b00      	ldr	r3, [sp, #0]
 8006214:	1bdb      	subs	r3, r3, r7
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	427b      	negs	r3, r7
 800621a:	9308      	str	r3, [sp, #32]
 800621c:	2300      	movs	r3, #0
 800621e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006220:	e7c3      	b.n	80061aa <_dtoa_r+0x1b2>
 8006222:	2301      	movs	r3, #1
 8006224:	9309      	str	r3, [sp, #36]	@ 0x24
 8006226:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006228:	eb07 0b03 	add.w	fp, r7, r3
 800622c:	f10b 0301 	add.w	r3, fp, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	bfb8      	it	lt
 8006236:	2301      	movlt	r3, #1
 8006238:	e006      	b.n	8006248 <_dtoa_r+0x250>
 800623a:	2301      	movs	r3, #1
 800623c:	9309      	str	r3, [sp, #36]	@ 0x24
 800623e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006240:	2b00      	cmp	r3, #0
 8006242:	dd28      	ble.n	8006296 <_dtoa_r+0x29e>
 8006244:	469b      	mov	fp, r3
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800624c:	2100      	movs	r1, #0
 800624e:	2204      	movs	r2, #4
 8006250:	f102 0514 	add.w	r5, r2, #20
 8006254:	429d      	cmp	r5, r3
 8006256:	d926      	bls.n	80062a6 <_dtoa_r+0x2ae>
 8006258:	6041      	str	r1, [r0, #4]
 800625a:	4648      	mov	r0, r9
 800625c:	f000 fd9c 	bl	8006d98 <_Balloc>
 8006260:	4682      	mov	sl, r0
 8006262:	2800      	cmp	r0, #0
 8006264:	d142      	bne.n	80062ec <_dtoa_r+0x2f4>
 8006266:	4b1e      	ldr	r3, [pc, #120]	@ (80062e0 <_dtoa_r+0x2e8>)
 8006268:	4602      	mov	r2, r0
 800626a:	f240 11af 	movw	r1, #431	@ 0x1af
 800626e:	e6da      	b.n	8006026 <_dtoa_r+0x2e>
 8006270:	2300      	movs	r3, #0
 8006272:	e7e3      	b.n	800623c <_dtoa_r+0x244>
 8006274:	2300      	movs	r3, #0
 8006276:	e7d5      	b.n	8006224 <_dtoa_r+0x22c>
 8006278:	2401      	movs	r4, #1
 800627a:	2300      	movs	r3, #0
 800627c:	9307      	str	r3, [sp, #28]
 800627e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006280:	f04f 3bff 	mov.w	fp, #4294967295
 8006284:	2200      	movs	r2, #0
 8006286:	f8cd b00c 	str.w	fp, [sp, #12]
 800628a:	2312      	movs	r3, #18
 800628c:	920c      	str	r2, [sp, #48]	@ 0x30
 800628e:	e7db      	b.n	8006248 <_dtoa_r+0x250>
 8006290:	2301      	movs	r3, #1
 8006292:	9309      	str	r3, [sp, #36]	@ 0x24
 8006294:	e7f4      	b.n	8006280 <_dtoa_r+0x288>
 8006296:	f04f 0b01 	mov.w	fp, #1
 800629a:	f8cd b00c 	str.w	fp, [sp, #12]
 800629e:	465b      	mov	r3, fp
 80062a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80062a4:	e7d0      	b.n	8006248 <_dtoa_r+0x250>
 80062a6:	3101      	adds	r1, #1
 80062a8:	0052      	lsls	r2, r2, #1
 80062aa:	e7d1      	b.n	8006250 <_dtoa_r+0x258>
 80062ac:	f3af 8000 	nop.w
 80062b0:	636f4361 	.word	0x636f4361
 80062b4:	3fd287a7 	.word	0x3fd287a7
 80062b8:	8b60c8b3 	.word	0x8b60c8b3
 80062bc:	3fc68a28 	.word	0x3fc68a28
 80062c0:	509f79fb 	.word	0x509f79fb
 80062c4:	3fd34413 	.word	0x3fd34413
 80062c8:	08007f11 	.word	0x08007f11
 80062cc:	08007f28 	.word	0x08007f28
 80062d0:	7ff00000 	.word	0x7ff00000
 80062d4:	08007ee1 	.word	0x08007ee1
 80062d8:	3ff80000 	.word	0x3ff80000
 80062dc:	08008078 	.word	0x08008078
 80062e0:	08007f80 	.word	0x08007f80
 80062e4:	08007f0d 	.word	0x08007f0d
 80062e8:	08007ee0 	.word	0x08007ee0
 80062ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80062f0:	6018      	str	r0, [r3, #0]
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	2b0e      	cmp	r3, #14
 80062f6:	f200 80a1 	bhi.w	800643c <_dtoa_r+0x444>
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	f000 809e 	beq.w	800643c <_dtoa_r+0x444>
 8006300:	2f00      	cmp	r7, #0
 8006302:	dd33      	ble.n	800636c <_dtoa_r+0x374>
 8006304:	4b9c      	ldr	r3, [pc, #624]	@ (8006578 <_dtoa_r+0x580>)
 8006306:	f007 020f 	and.w	r2, r7, #15
 800630a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800630e:	ed93 7b00 	vldr	d7, [r3]
 8006312:	05f8      	lsls	r0, r7, #23
 8006314:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006318:	ea4f 1427 	mov.w	r4, r7, asr #4
 800631c:	d516      	bpl.n	800634c <_dtoa_r+0x354>
 800631e:	4b97      	ldr	r3, [pc, #604]	@ (800657c <_dtoa_r+0x584>)
 8006320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006328:	f7fa fab0 	bl	800088c <__aeabi_ddiv>
 800632c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006330:	f004 040f 	and.w	r4, r4, #15
 8006334:	2603      	movs	r6, #3
 8006336:	4d91      	ldr	r5, [pc, #580]	@ (800657c <_dtoa_r+0x584>)
 8006338:	b954      	cbnz	r4, 8006350 <_dtoa_r+0x358>
 800633a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800633e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006342:	f7fa faa3 	bl	800088c <__aeabi_ddiv>
 8006346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800634a:	e028      	b.n	800639e <_dtoa_r+0x3a6>
 800634c:	2602      	movs	r6, #2
 800634e:	e7f2      	b.n	8006336 <_dtoa_r+0x33e>
 8006350:	07e1      	lsls	r1, r4, #31
 8006352:	d508      	bpl.n	8006366 <_dtoa_r+0x36e>
 8006354:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006358:	e9d5 2300 	ldrd	r2, r3, [r5]
 800635c:	f7fa f96c 	bl	8000638 <__aeabi_dmul>
 8006360:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006364:	3601      	adds	r6, #1
 8006366:	1064      	asrs	r4, r4, #1
 8006368:	3508      	adds	r5, #8
 800636a:	e7e5      	b.n	8006338 <_dtoa_r+0x340>
 800636c:	f000 80af 	beq.w	80064ce <_dtoa_r+0x4d6>
 8006370:	427c      	negs	r4, r7
 8006372:	4b81      	ldr	r3, [pc, #516]	@ (8006578 <_dtoa_r+0x580>)
 8006374:	4d81      	ldr	r5, [pc, #516]	@ (800657c <_dtoa_r+0x584>)
 8006376:	f004 020f 	and.w	r2, r4, #15
 800637a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006386:	f7fa f957 	bl	8000638 <__aeabi_dmul>
 800638a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800638e:	1124      	asrs	r4, r4, #4
 8006390:	2300      	movs	r3, #0
 8006392:	2602      	movs	r6, #2
 8006394:	2c00      	cmp	r4, #0
 8006396:	f040 808f 	bne.w	80064b8 <_dtoa_r+0x4c0>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1d3      	bne.n	8006346 <_dtoa_r+0x34e>
 800639e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8094 	beq.w	80064d2 <_dtoa_r+0x4da>
 80063aa:	4b75      	ldr	r3, [pc, #468]	@ (8006580 <_dtoa_r+0x588>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa fbb3 	bl	8000b1c <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f000 808b 	beq.w	80064d2 <_dtoa_r+0x4da>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8087 	beq.w	80064d2 <_dtoa_r+0x4da>
 80063c4:	f1bb 0f00 	cmp.w	fp, #0
 80063c8:	dd34      	ble.n	8006434 <_dtoa_r+0x43c>
 80063ca:	4620      	mov	r0, r4
 80063cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006584 <_dtoa_r+0x58c>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7fa f931 	bl	8000638 <__aeabi_dmul>
 80063d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063da:	f107 38ff 	add.w	r8, r7, #4294967295
 80063de:	3601      	adds	r6, #1
 80063e0:	465c      	mov	r4, fp
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7fa f8be 	bl	8000564 <__aeabi_i2d>
 80063e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ec:	f7fa f924 	bl	8000638 <__aeabi_dmul>
 80063f0:	4b65      	ldr	r3, [pc, #404]	@ (8006588 <_dtoa_r+0x590>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	f7f9 ff6a 	bl	80002cc <__adddf3>
 80063f8:	4605      	mov	r5, r0
 80063fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80063fe:	2c00      	cmp	r4, #0
 8006400:	d16a      	bne.n	80064d8 <_dtoa_r+0x4e0>
 8006402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006406:	4b61      	ldr	r3, [pc, #388]	@ (800658c <_dtoa_r+0x594>)
 8006408:	2200      	movs	r2, #0
 800640a:	f7f9 ff5d 	bl	80002c8 <__aeabi_dsub>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006416:	462a      	mov	r2, r5
 8006418:	4633      	mov	r3, r6
 800641a:	f7fa fb9d 	bl	8000b58 <__aeabi_dcmpgt>
 800641e:	2800      	cmp	r0, #0
 8006420:	f040 8298 	bne.w	8006954 <_dtoa_r+0x95c>
 8006424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006428:	462a      	mov	r2, r5
 800642a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800642e:	f7fa fb75 	bl	8000b1c <__aeabi_dcmplt>
 8006432:	bb38      	cbnz	r0, 8006484 <_dtoa_r+0x48c>
 8006434:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006438:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800643c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800643e:	2b00      	cmp	r3, #0
 8006440:	f2c0 8157 	blt.w	80066f2 <_dtoa_r+0x6fa>
 8006444:	2f0e      	cmp	r7, #14
 8006446:	f300 8154 	bgt.w	80066f2 <_dtoa_r+0x6fa>
 800644a:	4b4b      	ldr	r3, [pc, #300]	@ (8006578 <_dtoa_r+0x580>)
 800644c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006450:	ed93 7b00 	vldr	d7, [r3]
 8006454:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006456:	2b00      	cmp	r3, #0
 8006458:	ed8d 7b00 	vstr	d7, [sp]
 800645c:	f280 80e5 	bge.w	800662a <_dtoa_r+0x632>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f300 80e1 	bgt.w	800662a <_dtoa_r+0x632>
 8006468:	d10c      	bne.n	8006484 <_dtoa_r+0x48c>
 800646a:	4b48      	ldr	r3, [pc, #288]	@ (800658c <_dtoa_r+0x594>)
 800646c:	2200      	movs	r2, #0
 800646e:	ec51 0b17 	vmov	r0, r1, d7
 8006472:	f7fa f8e1 	bl	8000638 <__aeabi_dmul>
 8006476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800647a:	f7fa fb63 	bl	8000b44 <__aeabi_dcmpge>
 800647e:	2800      	cmp	r0, #0
 8006480:	f000 8266 	beq.w	8006950 <_dtoa_r+0x958>
 8006484:	2400      	movs	r4, #0
 8006486:	4625      	mov	r5, r4
 8006488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800648a:	4656      	mov	r6, sl
 800648c:	ea6f 0803 	mvn.w	r8, r3
 8006490:	2700      	movs	r7, #0
 8006492:	4621      	mov	r1, r4
 8006494:	4648      	mov	r0, r9
 8006496:	f000 fcbf 	bl	8006e18 <_Bfree>
 800649a:	2d00      	cmp	r5, #0
 800649c:	f000 80bd 	beq.w	800661a <_dtoa_r+0x622>
 80064a0:	b12f      	cbz	r7, 80064ae <_dtoa_r+0x4b6>
 80064a2:	42af      	cmp	r7, r5
 80064a4:	d003      	beq.n	80064ae <_dtoa_r+0x4b6>
 80064a6:	4639      	mov	r1, r7
 80064a8:	4648      	mov	r0, r9
 80064aa:	f000 fcb5 	bl	8006e18 <_Bfree>
 80064ae:	4629      	mov	r1, r5
 80064b0:	4648      	mov	r0, r9
 80064b2:	f000 fcb1 	bl	8006e18 <_Bfree>
 80064b6:	e0b0      	b.n	800661a <_dtoa_r+0x622>
 80064b8:	07e2      	lsls	r2, r4, #31
 80064ba:	d505      	bpl.n	80064c8 <_dtoa_r+0x4d0>
 80064bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064c0:	f7fa f8ba 	bl	8000638 <__aeabi_dmul>
 80064c4:	3601      	adds	r6, #1
 80064c6:	2301      	movs	r3, #1
 80064c8:	1064      	asrs	r4, r4, #1
 80064ca:	3508      	adds	r5, #8
 80064cc:	e762      	b.n	8006394 <_dtoa_r+0x39c>
 80064ce:	2602      	movs	r6, #2
 80064d0:	e765      	b.n	800639e <_dtoa_r+0x3a6>
 80064d2:	9c03      	ldr	r4, [sp, #12]
 80064d4:	46b8      	mov	r8, r7
 80064d6:	e784      	b.n	80063e2 <_dtoa_r+0x3ea>
 80064d8:	4b27      	ldr	r3, [pc, #156]	@ (8006578 <_dtoa_r+0x580>)
 80064da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064e4:	4454      	add	r4, sl
 80064e6:	2900      	cmp	r1, #0
 80064e8:	d054      	beq.n	8006594 <_dtoa_r+0x59c>
 80064ea:	4929      	ldr	r1, [pc, #164]	@ (8006590 <_dtoa_r+0x598>)
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7fa f9cd 	bl	800088c <__aeabi_ddiv>
 80064f2:	4633      	mov	r3, r6
 80064f4:	462a      	mov	r2, r5
 80064f6:	f7f9 fee7 	bl	80002c8 <__aeabi_dsub>
 80064fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80064fe:	4656      	mov	r6, sl
 8006500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006504:	f7fa fb48 	bl	8000b98 <__aeabi_d2iz>
 8006508:	4605      	mov	r5, r0
 800650a:	f7fa f82b 	bl	8000564 <__aeabi_i2d>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006516:	f7f9 fed7 	bl	80002c8 <__aeabi_dsub>
 800651a:	3530      	adds	r5, #48	@ 0x30
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006524:	f806 5b01 	strb.w	r5, [r6], #1
 8006528:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800652c:	f7fa faf6 	bl	8000b1c <__aeabi_dcmplt>
 8006530:	2800      	cmp	r0, #0
 8006532:	d172      	bne.n	800661a <_dtoa_r+0x622>
 8006534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006538:	4911      	ldr	r1, [pc, #68]	@ (8006580 <_dtoa_r+0x588>)
 800653a:	2000      	movs	r0, #0
 800653c:	f7f9 fec4 	bl	80002c8 <__aeabi_dsub>
 8006540:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006544:	f7fa faea 	bl	8000b1c <__aeabi_dcmplt>
 8006548:	2800      	cmp	r0, #0
 800654a:	f040 80b4 	bne.w	80066b6 <_dtoa_r+0x6be>
 800654e:	42a6      	cmp	r6, r4
 8006550:	f43f af70 	beq.w	8006434 <_dtoa_r+0x43c>
 8006554:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006558:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <_dtoa_r+0x58c>)
 800655a:	2200      	movs	r2, #0
 800655c:	f7fa f86c 	bl	8000638 <__aeabi_dmul>
 8006560:	4b08      	ldr	r3, [pc, #32]	@ (8006584 <_dtoa_r+0x58c>)
 8006562:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006566:	2200      	movs	r2, #0
 8006568:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800656c:	f7fa f864 	bl	8000638 <__aeabi_dmul>
 8006570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006574:	e7c4      	b.n	8006500 <_dtoa_r+0x508>
 8006576:	bf00      	nop
 8006578:	08008078 	.word	0x08008078
 800657c:	08008050 	.word	0x08008050
 8006580:	3ff00000 	.word	0x3ff00000
 8006584:	40240000 	.word	0x40240000
 8006588:	401c0000 	.word	0x401c0000
 800658c:	40140000 	.word	0x40140000
 8006590:	3fe00000 	.word	0x3fe00000
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	f7fa f84e 	bl	8000638 <__aeabi_dmul>
 800659c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80065a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80065a2:	4656      	mov	r6, sl
 80065a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065a8:	f7fa faf6 	bl	8000b98 <__aeabi_d2iz>
 80065ac:	4605      	mov	r5, r0
 80065ae:	f7f9 ffd9 	bl	8000564 <__aeabi_i2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ba:	f7f9 fe85 	bl	80002c8 <__aeabi_dsub>
 80065be:	3530      	adds	r5, #48	@ 0x30
 80065c0:	f806 5b01 	strb.w	r5, [r6], #1
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	d124      	bne.n	800661e <_dtoa_r+0x626>
 80065d4:	4baf      	ldr	r3, [pc, #700]	@ (8006894 <_dtoa_r+0x89c>)
 80065d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80065da:	f7f9 fe77 	bl	80002cc <__adddf3>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065e6:	f7fa fab7 	bl	8000b58 <__aeabi_dcmpgt>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d163      	bne.n	80066b6 <_dtoa_r+0x6be>
 80065ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80065f2:	49a8      	ldr	r1, [pc, #672]	@ (8006894 <_dtoa_r+0x89c>)
 80065f4:	2000      	movs	r0, #0
 80065f6:	f7f9 fe67 	bl	80002c8 <__aeabi_dsub>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006602:	f7fa fa8b 	bl	8000b1c <__aeabi_dcmplt>
 8006606:	2800      	cmp	r0, #0
 8006608:	f43f af14 	beq.w	8006434 <_dtoa_r+0x43c>
 800660c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800660e:	1e73      	subs	r3, r6, #1
 8006610:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006612:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006616:	2b30      	cmp	r3, #48	@ 0x30
 8006618:	d0f8      	beq.n	800660c <_dtoa_r+0x614>
 800661a:	4647      	mov	r7, r8
 800661c:	e03b      	b.n	8006696 <_dtoa_r+0x69e>
 800661e:	4b9e      	ldr	r3, [pc, #632]	@ (8006898 <_dtoa_r+0x8a0>)
 8006620:	f7fa f80a 	bl	8000638 <__aeabi_dmul>
 8006624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006628:	e7bc      	b.n	80065a4 <_dtoa_r+0x5ac>
 800662a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800662e:	4656      	mov	r6, sl
 8006630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7fa f928 	bl	800088c <__aeabi_ddiv>
 800663c:	f7fa faac 	bl	8000b98 <__aeabi_d2iz>
 8006640:	4680      	mov	r8, r0
 8006642:	f7f9 ff8f 	bl	8000564 <__aeabi_i2d>
 8006646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800664a:	f7f9 fff5 	bl	8000638 <__aeabi_dmul>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4620      	mov	r0, r4
 8006654:	4629      	mov	r1, r5
 8006656:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800665a:	f7f9 fe35 	bl	80002c8 <__aeabi_dsub>
 800665e:	f806 4b01 	strb.w	r4, [r6], #1
 8006662:	9d03      	ldr	r5, [sp, #12]
 8006664:	eba6 040a 	sub.w	r4, r6, sl
 8006668:	42a5      	cmp	r5, r4
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	d133      	bne.n	80066d8 <_dtoa_r+0x6e0>
 8006670:	f7f9 fe2c 	bl	80002cc <__adddf3>
 8006674:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006678:	4604      	mov	r4, r0
 800667a:	460d      	mov	r5, r1
 800667c:	f7fa fa6c 	bl	8000b58 <__aeabi_dcmpgt>
 8006680:	b9c0      	cbnz	r0, 80066b4 <_dtoa_r+0x6bc>
 8006682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	f7fa fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800668e:	b110      	cbz	r0, 8006696 <_dtoa_r+0x69e>
 8006690:	f018 0f01 	tst.w	r8, #1
 8006694:	d10e      	bne.n	80066b4 <_dtoa_r+0x6bc>
 8006696:	9902      	ldr	r1, [sp, #8]
 8006698:	4648      	mov	r0, r9
 800669a:	f000 fbbd 	bl	8006e18 <_Bfree>
 800669e:	2300      	movs	r3, #0
 80066a0:	7033      	strb	r3, [r6, #0]
 80066a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80066a4:	3701      	adds	r7, #1
 80066a6:	601f      	str	r7, [r3, #0]
 80066a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 824b 	beq.w	8006b46 <_dtoa_r+0xb4e>
 80066b0:	601e      	str	r6, [r3, #0]
 80066b2:	e248      	b.n	8006b46 <_dtoa_r+0xb4e>
 80066b4:	46b8      	mov	r8, r7
 80066b6:	4633      	mov	r3, r6
 80066b8:	461e      	mov	r6, r3
 80066ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066be:	2a39      	cmp	r2, #57	@ 0x39
 80066c0:	d106      	bne.n	80066d0 <_dtoa_r+0x6d8>
 80066c2:	459a      	cmp	sl, r3
 80066c4:	d1f8      	bne.n	80066b8 <_dtoa_r+0x6c0>
 80066c6:	2230      	movs	r2, #48	@ 0x30
 80066c8:	f108 0801 	add.w	r8, r8, #1
 80066cc:	f88a 2000 	strb.w	r2, [sl]
 80066d0:	781a      	ldrb	r2, [r3, #0]
 80066d2:	3201      	adds	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e7a0      	b.n	800661a <_dtoa_r+0x622>
 80066d8:	4b6f      	ldr	r3, [pc, #444]	@ (8006898 <_dtoa_r+0x8a0>)
 80066da:	2200      	movs	r2, #0
 80066dc:	f7f9 ffac 	bl	8000638 <__aeabi_dmul>
 80066e0:	2200      	movs	r2, #0
 80066e2:	2300      	movs	r3, #0
 80066e4:	4604      	mov	r4, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	f7fa fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d09f      	beq.n	8006630 <_dtoa_r+0x638>
 80066f0:	e7d1      	b.n	8006696 <_dtoa_r+0x69e>
 80066f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	f000 80ea 	beq.w	80068ce <_dtoa_r+0x8d6>
 80066fa:	9a07      	ldr	r2, [sp, #28]
 80066fc:	2a01      	cmp	r2, #1
 80066fe:	f300 80cd 	bgt.w	800689c <_dtoa_r+0x8a4>
 8006702:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006704:	2a00      	cmp	r2, #0
 8006706:	f000 80c1 	beq.w	800688c <_dtoa_r+0x894>
 800670a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800670e:	9c08      	ldr	r4, [sp, #32]
 8006710:	9e00      	ldr	r6, [sp, #0]
 8006712:	9a00      	ldr	r2, [sp, #0]
 8006714:	441a      	add	r2, r3
 8006716:	9200      	str	r2, [sp, #0]
 8006718:	9a06      	ldr	r2, [sp, #24]
 800671a:	2101      	movs	r1, #1
 800671c:	441a      	add	r2, r3
 800671e:	4648      	mov	r0, r9
 8006720:	9206      	str	r2, [sp, #24]
 8006722:	f000 fc2d 	bl	8006f80 <__i2b>
 8006726:	4605      	mov	r5, r0
 8006728:	b166      	cbz	r6, 8006744 <_dtoa_r+0x74c>
 800672a:	9b06      	ldr	r3, [sp, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dd09      	ble.n	8006744 <_dtoa_r+0x74c>
 8006730:	42b3      	cmp	r3, r6
 8006732:	9a00      	ldr	r2, [sp, #0]
 8006734:	bfa8      	it	ge
 8006736:	4633      	movge	r3, r6
 8006738:	1ad2      	subs	r2, r2, r3
 800673a:	9200      	str	r2, [sp, #0]
 800673c:	9a06      	ldr	r2, [sp, #24]
 800673e:	1af6      	subs	r6, r6, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	9306      	str	r3, [sp, #24]
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	b30b      	cbz	r3, 800678c <_dtoa_r+0x794>
 8006748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80c6 	beq.w	80068dc <_dtoa_r+0x8e4>
 8006750:	2c00      	cmp	r4, #0
 8006752:	f000 80c0 	beq.w	80068d6 <_dtoa_r+0x8de>
 8006756:	4629      	mov	r1, r5
 8006758:	4622      	mov	r2, r4
 800675a:	4648      	mov	r0, r9
 800675c:	f000 fcc8 	bl	80070f0 <__pow5mult>
 8006760:	9a02      	ldr	r2, [sp, #8]
 8006762:	4601      	mov	r1, r0
 8006764:	4605      	mov	r5, r0
 8006766:	4648      	mov	r0, r9
 8006768:	f000 fc20 	bl	8006fac <__multiply>
 800676c:	9902      	ldr	r1, [sp, #8]
 800676e:	4680      	mov	r8, r0
 8006770:	4648      	mov	r0, r9
 8006772:	f000 fb51 	bl	8006e18 <_Bfree>
 8006776:	9b08      	ldr	r3, [sp, #32]
 8006778:	1b1b      	subs	r3, r3, r4
 800677a:	9308      	str	r3, [sp, #32]
 800677c:	f000 80b1 	beq.w	80068e2 <_dtoa_r+0x8ea>
 8006780:	9a08      	ldr	r2, [sp, #32]
 8006782:	4641      	mov	r1, r8
 8006784:	4648      	mov	r0, r9
 8006786:	f000 fcb3 	bl	80070f0 <__pow5mult>
 800678a:	9002      	str	r0, [sp, #8]
 800678c:	2101      	movs	r1, #1
 800678e:	4648      	mov	r0, r9
 8006790:	f000 fbf6 	bl	8006f80 <__i2b>
 8006794:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006796:	4604      	mov	r4, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 81d8 	beq.w	8006b4e <_dtoa_r+0xb56>
 800679e:	461a      	mov	r2, r3
 80067a0:	4601      	mov	r1, r0
 80067a2:	4648      	mov	r0, r9
 80067a4:	f000 fca4 	bl	80070f0 <__pow5mult>
 80067a8:	9b07      	ldr	r3, [sp, #28]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	4604      	mov	r4, r0
 80067ae:	f300 809f 	bgt.w	80068f0 <_dtoa_r+0x8f8>
 80067b2:	9b04      	ldr	r3, [sp, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f040 8097 	bne.w	80068e8 <_dtoa_r+0x8f0>
 80067ba:	9b05      	ldr	r3, [sp, #20]
 80067bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 8093 	bne.w	80068ec <_dtoa_r+0x8f4>
 80067c6:	9b05      	ldr	r3, [sp, #20]
 80067c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067cc:	0d1b      	lsrs	r3, r3, #20
 80067ce:	051b      	lsls	r3, r3, #20
 80067d0:	b133      	cbz	r3, 80067e0 <_dtoa_r+0x7e8>
 80067d2:	9b00      	ldr	r3, [sp, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	9b06      	ldr	r3, [sp, #24]
 80067da:	3301      	adds	r3, #1
 80067dc:	9306      	str	r3, [sp, #24]
 80067de:	2301      	movs	r3, #1
 80067e0:	9308      	str	r3, [sp, #32]
 80067e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 81b8 	beq.w	8006b5a <_dtoa_r+0xb62>
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067f0:	6918      	ldr	r0, [r3, #16]
 80067f2:	f000 fb79 	bl	8006ee8 <__hi0bits>
 80067f6:	f1c0 0020 	rsb	r0, r0, #32
 80067fa:	9b06      	ldr	r3, [sp, #24]
 80067fc:	4418      	add	r0, r3
 80067fe:	f010 001f 	ands.w	r0, r0, #31
 8006802:	f000 8082 	beq.w	800690a <_dtoa_r+0x912>
 8006806:	f1c0 0320 	rsb	r3, r0, #32
 800680a:	2b04      	cmp	r3, #4
 800680c:	dd73      	ble.n	80068f6 <_dtoa_r+0x8fe>
 800680e:	9b00      	ldr	r3, [sp, #0]
 8006810:	f1c0 001c 	rsb	r0, r0, #28
 8006814:	4403      	add	r3, r0
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	9b06      	ldr	r3, [sp, #24]
 800681a:	4403      	add	r3, r0
 800681c:	4406      	add	r6, r0
 800681e:	9306      	str	r3, [sp, #24]
 8006820:	9b00      	ldr	r3, [sp, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	dd05      	ble.n	8006832 <_dtoa_r+0x83a>
 8006826:	9902      	ldr	r1, [sp, #8]
 8006828:	461a      	mov	r2, r3
 800682a:	4648      	mov	r0, r9
 800682c:	f000 fcba 	bl	80071a4 <__lshift>
 8006830:	9002      	str	r0, [sp, #8]
 8006832:	9b06      	ldr	r3, [sp, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	dd05      	ble.n	8006844 <_dtoa_r+0x84c>
 8006838:	4621      	mov	r1, r4
 800683a:	461a      	mov	r2, r3
 800683c:	4648      	mov	r0, r9
 800683e:	f000 fcb1 	bl	80071a4 <__lshift>
 8006842:	4604      	mov	r4, r0
 8006844:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d061      	beq.n	800690e <_dtoa_r+0x916>
 800684a:	9802      	ldr	r0, [sp, #8]
 800684c:	4621      	mov	r1, r4
 800684e:	f000 fd15 	bl	800727c <__mcmp>
 8006852:	2800      	cmp	r0, #0
 8006854:	da5b      	bge.n	800690e <_dtoa_r+0x916>
 8006856:	2300      	movs	r3, #0
 8006858:	9902      	ldr	r1, [sp, #8]
 800685a:	220a      	movs	r2, #10
 800685c:	4648      	mov	r0, r9
 800685e:	f000 fafd 	bl	8006e5c <__multadd>
 8006862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006864:	9002      	str	r0, [sp, #8]
 8006866:	f107 38ff 	add.w	r8, r7, #4294967295
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8177 	beq.w	8006b5e <_dtoa_r+0xb66>
 8006870:	4629      	mov	r1, r5
 8006872:	2300      	movs	r3, #0
 8006874:	220a      	movs	r2, #10
 8006876:	4648      	mov	r0, r9
 8006878:	f000 faf0 	bl	8006e5c <__multadd>
 800687c:	f1bb 0f00 	cmp.w	fp, #0
 8006880:	4605      	mov	r5, r0
 8006882:	dc6f      	bgt.n	8006964 <_dtoa_r+0x96c>
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	2b02      	cmp	r3, #2
 8006888:	dc49      	bgt.n	800691e <_dtoa_r+0x926>
 800688a:	e06b      	b.n	8006964 <_dtoa_r+0x96c>
 800688c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800688e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006892:	e73c      	b.n	800670e <_dtoa_r+0x716>
 8006894:	3fe00000 	.word	0x3fe00000
 8006898:	40240000 	.word	0x40240000
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	1e5c      	subs	r4, r3, #1
 80068a0:	9b08      	ldr	r3, [sp, #32]
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	db09      	blt.n	80068ba <_dtoa_r+0x8c2>
 80068a6:	1b1c      	subs	r4, r3, r4
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f6bf af30 	bge.w	8006710 <_dtoa_r+0x718>
 80068b0:	9b00      	ldr	r3, [sp, #0]
 80068b2:	9a03      	ldr	r2, [sp, #12]
 80068b4:	1a9e      	subs	r6, r3, r2
 80068b6:	2300      	movs	r3, #0
 80068b8:	e72b      	b.n	8006712 <_dtoa_r+0x71a>
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068be:	9408      	str	r4, [sp, #32]
 80068c0:	1ae3      	subs	r3, r4, r3
 80068c2:	441a      	add	r2, r3
 80068c4:	9e00      	ldr	r6, [sp, #0]
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80068ca:	2400      	movs	r4, #0
 80068cc:	e721      	b.n	8006712 <_dtoa_r+0x71a>
 80068ce:	9c08      	ldr	r4, [sp, #32]
 80068d0:	9e00      	ldr	r6, [sp, #0]
 80068d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80068d4:	e728      	b.n	8006728 <_dtoa_r+0x730>
 80068d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80068da:	e751      	b.n	8006780 <_dtoa_r+0x788>
 80068dc:	9a08      	ldr	r2, [sp, #32]
 80068de:	9902      	ldr	r1, [sp, #8]
 80068e0:	e750      	b.n	8006784 <_dtoa_r+0x78c>
 80068e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80068e6:	e751      	b.n	800678c <_dtoa_r+0x794>
 80068e8:	2300      	movs	r3, #0
 80068ea:	e779      	b.n	80067e0 <_dtoa_r+0x7e8>
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	e777      	b.n	80067e0 <_dtoa_r+0x7e8>
 80068f0:	2300      	movs	r3, #0
 80068f2:	9308      	str	r3, [sp, #32]
 80068f4:	e779      	b.n	80067ea <_dtoa_r+0x7f2>
 80068f6:	d093      	beq.n	8006820 <_dtoa_r+0x828>
 80068f8:	9a00      	ldr	r2, [sp, #0]
 80068fa:	331c      	adds	r3, #28
 80068fc:	441a      	add	r2, r3
 80068fe:	9200      	str	r2, [sp, #0]
 8006900:	9a06      	ldr	r2, [sp, #24]
 8006902:	441a      	add	r2, r3
 8006904:	441e      	add	r6, r3
 8006906:	9206      	str	r2, [sp, #24]
 8006908:	e78a      	b.n	8006820 <_dtoa_r+0x828>
 800690a:	4603      	mov	r3, r0
 800690c:	e7f4      	b.n	80068f8 <_dtoa_r+0x900>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	46b8      	mov	r8, r7
 8006914:	dc20      	bgt.n	8006958 <_dtoa_r+0x960>
 8006916:	469b      	mov	fp, r3
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	2b02      	cmp	r3, #2
 800691c:	dd1e      	ble.n	800695c <_dtoa_r+0x964>
 800691e:	f1bb 0f00 	cmp.w	fp, #0
 8006922:	f47f adb1 	bne.w	8006488 <_dtoa_r+0x490>
 8006926:	4621      	mov	r1, r4
 8006928:	465b      	mov	r3, fp
 800692a:	2205      	movs	r2, #5
 800692c:	4648      	mov	r0, r9
 800692e:	f000 fa95 	bl	8006e5c <__multadd>
 8006932:	4601      	mov	r1, r0
 8006934:	4604      	mov	r4, r0
 8006936:	9802      	ldr	r0, [sp, #8]
 8006938:	f000 fca0 	bl	800727c <__mcmp>
 800693c:	2800      	cmp	r0, #0
 800693e:	f77f ada3 	ble.w	8006488 <_dtoa_r+0x490>
 8006942:	4656      	mov	r6, sl
 8006944:	2331      	movs	r3, #49	@ 0x31
 8006946:	f806 3b01 	strb.w	r3, [r6], #1
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	e59f      	b.n	8006490 <_dtoa_r+0x498>
 8006950:	9c03      	ldr	r4, [sp, #12]
 8006952:	46b8      	mov	r8, r7
 8006954:	4625      	mov	r5, r4
 8006956:	e7f4      	b.n	8006942 <_dtoa_r+0x94a>
 8006958:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800695c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8101 	beq.w	8006b66 <_dtoa_r+0xb6e>
 8006964:	2e00      	cmp	r6, #0
 8006966:	dd05      	ble.n	8006974 <_dtoa_r+0x97c>
 8006968:	4629      	mov	r1, r5
 800696a:	4632      	mov	r2, r6
 800696c:	4648      	mov	r0, r9
 800696e:	f000 fc19 	bl	80071a4 <__lshift>
 8006972:	4605      	mov	r5, r0
 8006974:	9b08      	ldr	r3, [sp, #32]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d05c      	beq.n	8006a34 <_dtoa_r+0xa3c>
 800697a:	6869      	ldr	r1, [r5, #4]
 800697c:	4648      	mov	r0, r9
 800697e:	f000 fa0b 	bl	8006d98 <_Balloc>
 8006982:	4606      	mov	r6, r0
 8006984:	b928      	cbnz	r0, 8006992 <_dtoa_r+0x99a>
 8006986:	4b82      	ldr	r3, [pc, #520]	@ (8006b90 <_dtoa_r+0xb98>)
 8006988:	4602      	mov	r2, r0
 800698a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800698e:	f7ff bb4a 	b.w	8006026 <_dtoa_r+0x2e>
 8006992:	692a      	ldr	r2, [r5, #16]
 8006994:	3202      	adds	r2, #2
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	f105 010c 	add.w	r1, r5, #12
 800699c:	300c      	adds	r0, #12
 800699e:	f000 fe31 	bl	8007604 <memcpy>
 80069a2:	2201      	movs	r2, #1
 80069a4:	4631      	mov	r1, r6
 80069a6:	4648      	mov	r0, r9
 80069a8:	f000 fbfc 	bl	80071a4 <__lshift>
 80069ac:	f10a 0301 	add.w	r3, sl, #1
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	eb0a 030b 	add.w	r3, sl, fp
 80069b6:	9308      	str	r3, [sp, #32]
 80069b8:	9b04      	ldr	r3, [sp, #16]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	462f      	mov	r7, r5
 80069c0:	9306      	str	r3, [sp, #24]
 80069c2:	4605      	mov	r5, r0
 80069c4:	9b00      	ldr	r3, [sp, #0]
 80069c6:	9802      	ldr	r0, [sp, #8]
 80069c8:	4621      	mov	r1, r4
 80069ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80069ce:	f7ff fa88 	bl	8005ee2 <quorem>
 80069d2:	4603      	mov	r3, r0
 80069d4:	3330      	adds	r3, #48	@ 0x30
 80069d6:	9003      	str	r0, [sp, #12]
 80069d8:	4639      	mov	r1, r7
 80069da:	9802      	ldr	r0, [sp, #8]
 80069dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069de:	f000 fc4d 	bl	800727c <__mcmp>
 80069e2:	462a      	mov	r2, r5
 80069e4:	9004      	str	r0, [sp, #16]
 80069e6:	4621      	mov	r1, r4
 80069e8:	4648      	mov	r0, r9
 80069ea:	f000 fc63 	bl	80072b4 <__mdiff>
 80069ee:	68c2      	ldr	r2, [r0, #12]
 80069f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f2:	4606      	mov	r6, r0
 80069f4:	bb02      	cbnz	r2, 8006a38 <_dtoa_r+0xa40>
 80069f6:	4601      	mov	r1, r0
 80069f8:	9802      	ldr	r0, [sp, #8]
 80069fa:	f000 fc3f 	bl	800727c <__mcmp>
 80069fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a00:	4602      	mov	r2, r0
 8006a02:	4631      	mov	r1, r6
 8006a04:	4648      	mov	r0, r9
 8006a06:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a0a:	f000 fa05 	bl	8006e18 <_Bfree>
 8006a0e:	9b07      	ldr	r3, [sp, #28]
 8006a10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a12:	9e00      	ldr	r6, [sp, #0]
 8006a14:	ea42 0103 	orr.w	r1, r2, r3
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	4319      	orrs	r1, r3
 8006a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1e:	d10d      	bne.n	8006a3c <_dtoa_r+0xa44>
 8006a20:	2b39      	cmp	r3, #57	@ 0x39
 8006a22:	d027      	beq.n	8006a74 <_dtoa_r+0xa7c>
 8006a24:	9a04      	ldr	r2, [sp, #16]
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	dd01      	ble.n	8006a2e <_dtoa_r+0xa36>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	3331      	adds	r3, #49	@ 0x31
 8006a2e:	f88b 3000 	strb.w	r3, [fp]
 8006a32:	e52e      	b.n	8006492 <_dtoa_r+0x49a>
 8006a34:	4628      	mov	r0, r5
 8006a36:	e7b9      	b.n	80069ac <_dtoa_r+0x9b4>
 8006a38:	2201      	movs	r2, #1
 8006a3a:	e7e2      	b.n	8006a02 <_dtoa_r+0xa0a>
 8006a3c:	9904      	ldr	r1, [sp, #16]
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	db04      	blt.n	8006a4c <_dtoa_r+0xa54>
 8006a42:	9807      	ldr	r0, [sp, #28]
 8006a44:	4301      	orrs	r1, r0
 8006a46:	9806      	ldr	r0, [sp, #24]
 8006a48:	4301      	orrs	r1, r0
 8006a4a:	d120      	bne.n	8006a8e <_dtoa_r+0xa96>
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	ddee      	ble.n	8006a2e <_dtoa_r+0xa36>
 8006a50:	9902      	ldr	r1, [sp, #8]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2201      	movs	r2, #1
 8006a56:	4648      	mov	r0, r9
 8006a58:	f000 fba4 	bl	80071a4 <__lshift>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	9002      	str	r0, [sp, #8]
 8006a60:	f000 fc0c 	bl	800727c <__mcmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	dc02      	bgt.n	8006a70 <_dtoa_r+0xa78>
 8006a6a:	d1e0      	bne.n	8006a2e <_dtoa_r+0xa36>
 8006a6c:	07da      	lsls	r2, r3, #31
 8006a6e:	d5de      	bpl.n	8006a2e <_dtoa_r+0xa36>
 8006a70:	2b39      	cmp	r3, #57	@ 0x39
 8006a72:	d1da      	bne.n	8006a2a <_dtoa_r+0xa32>
 8006a74:	2339      	movs	r3, #57	@ 0x39
 8006a76:	f88b 3000 	strb.w	r3, [fp]
 8006a7a:	4633      	mov	r3, r6
 8006a7c:	461e      	mov	r6, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a84:	2a39      	cmp	r2, #57	@ 0x39
 8006a86:	d04e      	beq.n	8006b26 <_dtoa_r+0xb2e>
 8006a88:	3201      	adds	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	e501      	b.n	8006492 <_dtoa_r+0x49a>
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	dd03      	ble.n	8006a9a <_dtoa_r+0xaa2>
 8006a92:	2b39      	cmp	r3, #57	@ 0x39
 8006a94:	d0ee      	beq.n	8006a74 <_dtoa_r+0xa7c>
 8006a96:	3301      	adds	r3, #1
 8006a98:	e7c9      	b.n	8006a2e <_dtoa_r+0xa36>
 8006a9a:	9a00      	ldr	r2, [sp, #0]
 8006a9c:	9908      	ldr	r1, [sp, #32]
 8006a9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006aa2:	428a      	cmp	r2, r1
 8006aa4:	d028      	beq.n	8006af8 <_dtoa_r+0xb00>
 8006aa6:	9902      	ldr	r1, [sp, #8]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	220a      	movs	r2, #10
 8006aac:	4648      	mov	r0, r9
 8006aae:	f000 f9d5 	bl	8006e5c <__multadd>
 8006ab2:	42af      	cmp	r7, r5
 8006ab4:	9002      	str	r0, [sp, #8]
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	f04f 020a 	mov.w	r2, #10
 8006abe:	4639      	mov	r1, r7
 8006ac0:	4648      	mov	r0, r9
 8006ac2:	d107      	bne.n	8006ad4 <_dtoa_r+0xadc>
 8006ac4:	f000 f9ca 	bl	8006e5c <__multadd>
 8006ac8:	4607      	mov	r7, r0
 8006aca:	4605      	mov	r5, r0
 8006acc:	9b00      	ldr	r3, [sp, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	e777      	b.n	80069c4 <_dtoa_r+0x9cc>
 8006ad4:	f000 f9c2 	bl	8006e5c <__multadd>
 8006ad8:	4629      	mov	r1, r5
 8006ada:	4607      	mov	r7, r0
 8006adc:	2300      	movs	r3, #0
 8006ade:	220a      	movs	r2, #10
 8006ae0:	4648      	mov	r0, r9
 8006ae2:	f000 f9bb 	bl	8006e5c <__multadd>
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	e7f0      	b.n	8006acc <_dtoa_r+0xad4>
 8006aea:	f1bb 0f00 	cmp.w	fp, #0
 8006aee:	bfcc      	ite	gt
 8006af0:	465e      	movgt	r6, fp
 8006af2:	2601      	movle	r6, #1
 8006af4:	4456      	add	r6, sl
 8006af6:	2700      	movs	r7, #0
 8006af8:	9902      	ldr	r1, [sp, #8]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	4648      	mov	r0, r9
 8006b00:	f000 fb50 	bl	80071a4 <__lshift>
 8006b04:	4621      	mov	r1, r4
 8006b06:	9002      	str	r0, [sp, #8]
 8006b08:	f000 fbb8 	bl	800727c <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	dcb4      	bgt.n	8006a7a <_dtoa_r+0xa82>
 8006b10:	d102      	bne.n	8006b18 <_dtoa_r+0xb20>
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	07db      	lsls	r3, r3, #31
 8006b16:	d4b0      	bmi.n	8006a7a <_dtoa_r+0xa82>
 8006b18:	4633      	mov	r3, r6
 8006b1a:	461e      	mov	r6, r3
 8006b1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b20:	2a30      	cmp	r2, #48	@ 0x30
 8006b22:	d0fa      	beq.n	8006b1a <_dtoa_r+0xb22>
 8006b24:	e4b5      	b.n	8006492 <_dtoa_r+0x49a>
 8006b26:	459a      	cmp	sl, r3
 8006b28:	d1a8      	bne.n	8006a7c <_dtoa_r+0xa84>
 8006b2a:	2331      	movs	r3, #49	@ 0x31
 8006b2c:	f108 0801 	add.w	r8, r8, #1
 8006b30:	f88a 3000 	strb.w	r3, [sl]
 8006b34:	e4ad      	b.n	8006492 <_dtoa_r+0x49a>
 8006b36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006b94 <_dtoa_r+0xb9c>
 8006b3c:	b11b      	cbz	r3, 8006b46 <_dtoa_r+0xb4e>
 8006b3e:	f10a 0308 	add.w	r3, sl, #8
 8006b42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	4650      	mov	r0, sl
 8006b48:	b017      	add	sp, #92	@ 0x5c
 8006b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4e:	9b07      	ldr	r3, [sp, #28]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	f77f ae2e 	ble.w	80067b2 <_dtoa_r+0x7ba>
 8006b56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b58:	9308      	str	r3, [sp, #32]
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	e64d      	b.n	80067fa <_dtoa_r+0x802>
 8006b5e:	f1bb 0f00 	cmp.w	fp, #0
 8006b62:	f77f aed9 	ble.w	8006918 <_dtoa_r+0x920>
 8006b66:	4656      	mov	r6, sl
 8006b68:	9802      	ldr	r0, [sp, #8]
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	f7ff f9b9 	bl	8005ee2 <quorem>
 8006b70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006b74:	f806 3b01 	strb.w	r3, [r6], #1
 8006b78:	eba6 020a 	sub.w	r2, r6, sl
 8006b7c:	4593      	cmp	fp, r2
 8006b7e:	ddb4      	ble.n	8006aea <_dtoa_r+0xaf2>
 8006b80:	9902      	ldr	r1, [sp, #8]
 8006b82:	2300      	movs	r3, #0
 8006b84:	220a      	movs	r2, #10
 8006b86:	4648      	mov	r0, r9
 8006b88:	f000 f968 	bl	8006e5c <__multadd>
 8006b8c:	9002      	str	r0, [sp, #8]
 8006b8e:	e7eb      	b.n	8006b68 <_dtoa_r+0xb70>
 8006b90:	08007f80 	.word	0x08007f80
 8006b94:	08007f04 	.word	0x08007f04

08006b98 <_free_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	d041      	beq.n	8006c24 <_free_r+0x8c>
 8006ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba4:	1f0c      	subs	r4, r1, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bfb8      	it	lt
 8006baa:	18e4      	addlt	r4, r4, r3
 8006bac:	f000 f8e8 	bl	8006d80 <__malloc_lock>
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c28 <_free_r+0x90>)
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	b933      	cbnz	r3, 8006bc4 <_free_r+0x2c>
 8006bb6:	6063      	str	r3, [r4, #4]
 8006bb8:	6014      	str	r4, [r2, #0]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc0:	f000 b8e4 	b.w	8006d8c <__malloc_unlock>
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	d908      	bls.n	8006bda <_free_r+0x42>
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	1821      	adds	r1, r4, r0
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf01      	itttt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	1809      	addeq	r1, r1, r0
 8006bd6:	6021      	streq	r1, [r4, #0]
 8006bd8:	e7ed      	b.n	8006bb6 <_free_r+0x1e>
 8006bda:	461a      	mov	r2, r3
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	b10b      	cbz	r3, 8006be4 <_free_r+0x4c>
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	d9fa      	bls.n	8006bda <_free_r+0x42>
 8006be4:	6811      	ldr	r1, [r2, #0]
 8006be6:	1850      	adds	r0, r2, r1
 8006be8:	42a0      	cmp	r0, r4
 8006bea:	d10b      	bne.n	8006c04 <_free_r+0x6c>
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	4401      	add	r1, r0
 8006bf0:	1850      	adds	r0, r2, r1
 8006bf2:	4283      	cmp	r3, r0
 8006bf4:	6011      	str	r1, [r2, #0]
 8006bf6:	d1e0      	bne.n	8006bba <_free_r+0x22>
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	6053      	str	r3, [r2, #4]
 8006bfe:	4408      	add	r0, r1
 8006c00:	6010      	str	r0, [r2, #0]
 8006c02:	e7da      	b.n	8006bba <_free_r+0x22>
 8006c04:	d902      	bls.n	8006c0c <_free_r+0x74>
 8006c06:	230c      	movs	r3, #12
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	e7d6      	b.n	8006bba <_free_r+0x22>
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	1821      	adds	r1, r4, r0
 8006c10:	428b      	cmp	r3, r1
 8006c12:	bf04      	itt	eq
 8006c14:	6819      	ldreq	r1, [r3, #0]
 8006c16:	685b      	ldreq	r3, [r3, #4]
 8006c18:	6063      	str	r3, [r4, #4]
 8006c1a:	bf04      	itt	eq
 8006c1c:	1809      	addeq	r1, r1, r0
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	6054      	str	r4, [r2, #4]
 8006c22:	e7ca      	b.n	8006bba <_free_r+0x22>
 8006c24:	bd38      	pop	{r3, r4, r5, pc}
 8006c26:	bf00      	nop
 8006c28:	20000540 	.word	0x20000540

08006c2c <malloc>:
 8006c2c:	4b02      	ldr	r3, [pc, #8]	@ (8006c38 <malloc+0xc>)
 8006c2e:	4601      	mov	r1, r0
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f000 b825 	b.w	8006c80 <_malloc_r>
 8006c36:	bf00      	nop
 8006c38:	20000028 	.word	0x20000028

08006c3c <sbrk_aligned>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c7c <sbrk_aligned+0x40>)
 8006c40:	460c      	mov	r4, r1
 8006c42:	6831      	ldr	r1, [r6, #0]
 8006c44:	4605      	mov	r5, r0
 8006c46:	b911      	cbnz	r1, 8006c4e <sbrk_aligned+0x12>
 8006c48:	f000 fccc 	bl	80075e4 <_sbrk_r>
 8006c4c:	6030      	str	r0, [r6, #0]
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 fcc7 	bl	80075e4 <_sbrk_r>
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	d103      	bne.n	8006c62 <sbrk_aligned+0x26>
 8006c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c5e:	4620      	mov	r0, r4
 8006c60:	bd70      	pop	{r4, r5, r6, pc}
 8006c62:	1cc4      	adds	r4, r0, #3
 8006c64:	f024 0403 	bic.w	r4, r4, #3
 8006c68:	42a0      	cmp	r0, r4
 8006c6a:	d0f8      	beq.n	8006c5e <sbrk_aligned+0x22>
 8006c6c:	1a21      	subs	r1, r4, r0
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fcb8 	bl	80075e4 <_sbrk_r>
 8006c74:	3001      	adds	r0, #1
 8006c76:	d1f2      	bne.n	8006c5e <sbrk_aligned+0x22>
 8006c78:	e7ef      	b.n	8006c5a <sbrk_aligned+0x1e>
 8006c7a:	bf00      	nop
 8006c7c:	2000053c 	.word	0x2000053c

08006c80 <_malloc_r>:
 8006c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c84:	1ccd      	adds	r5, r1, #3
 8006c86:	f025 0503 	bic.w	r5, r5, #3
 8006c8a:	3508      	adds	r5, #8
 8006c8c:	2d0c      	cmp	r5, #12
 8006c8e:	bf38      	it	cc
 8006c90:	250c      	movcc	r5, #12
 8006c92:	2d00      	cmp	r5, #0
 8006c94:	4606      	mov	r6, r0
 8006c96:	db01      	blt.n	8006c9c <_malloc_r+0x1c>
 8006c98:	42a9      	cmp	r1, r5
 8006c9a:	d904      	bls.n	8006ca6 <_malloc_r+0x26>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	6033      	str	r3, [r6, #0]
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d7c <_malloc_r+0xfc>
 8006caa:	f000 f869 	bl	8006d80 <__malloc_lock>
 8006cae:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb2:	461c      	mov	r4, r3
 8006cb4:	bb44      	cbnz	r4, 8006d08 <_malloc_r+0x88>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff ffbf 	bl	8006c3c <sbrk_aligned>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	d158      	bne.n	8006d76 <_malloc_r+0xf6>
 8006cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8006cc8:	4627      	mov	r7, r4
 8006cca:	2f00      	cmp	r7, #0
 8006ccc:	d143      	bne.n	8006d56 <_malloc_r+0xd6>
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	d04b      	beq.n	8006d6a <_malloc_r+0xea>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	4639      	mov	r1, r7
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	eb04 0903 	add.w	r9, r4, r3
 8006cdc:	f000 fc82 	bl	80075e4 <_sbrk_r>
 8006ce0:	4581      	cmp	r9, r0
 8006ce2:	d142      	bne.n	8006d6a <_malloc_r+0xea>
 8006ce4:	6821      	ldr	r1, [r4, #0]
 8006ce6:	1a6d      	subs	r5, r5, r1
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ffa6 	bl	8006c3c <sbrk_aligned>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d03a      	beq.n	8006d6a <_malloc_r+0xea>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	442b      	add	r3, r5
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	bb62      	cbnz	r2, 8006d5c <_malloc_r+0xdc>
 8006d02:	f8c8 7000 	str.w	r7, [r8]
 8006d06:	e00f      	b.n	8006d28 <_malloc_r+0xa8>
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	1b52      	subs	r2, r2, r5
 8006d0c:	d420      	bmi.n	8006d50 <_malloc_r+0xd0>
 8006d0e:	2a0b      	cmp	r2, #11
 8006d10:	d917      	bls.n	8006d42 <_malloc_r+0xc2>
 8006d12:	1961      	adds	r1, r4, r5
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	6025      	str	r5, [r4, #0]
 8006d18:	bf18      	it	ne
 8006d1a:	6059      	strne	r1, [r3, #4]
 8006d1c:	6863      	ldr	r3, [r4, #4]
 8006d1e:	bf08      	it	eq
 8006d20:	f8c8 1000 	streq.w	r1, [r8]
 8006d24:	5162      	str	r2, [r4, r5]
 8006d26:	604b      	str	r3, [r1, #4]
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f000 f82f 	bl	8006d8c <__malloc_unlock>
 8006d2e:	f104 000b 	add.w	r0, r4, #11
 8006d32:	1d23      	adds	r3, r4, #4
 8006d34:	f020 0007 	bic.w	r0, r0, #7
 8006d38:	1ac2      	subs	r2, r0, r3
 8006d3a:	bf1c      	itt	ne
 8006d3c:	1a1b      	subne	r3, r3, r0
 8006d3e:	50a3      	strne	r3, [r4, r2]
 8006d40:	e7af      	b.n	8006ca2 <_malloc_r+0x22>
 8006d42:	6862      	ldr	r2, [r4, #4]
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	bf0c      	ite	eq
 8006d48:	f8c8 2000 	streq.w	r2, [r8]
 8006d4c:	605a      	strne	r2, [r3, #4]
 8006d4e:	e7eb      	b.n	8006d28 <_malloc_r+0xa8>
 8006d50:	4623      	mov	r3, r4
 8006d52:	6864      	ldr	r4, [r4, #4]
 8006d54:	e7ae      	b.n	8006cb4 <_malloc_r+0x34>
 8006d56:	463c      	mov	r4, r7
 8006d58:	687f      	ldr	r7, [r7, #4]
 8006d5a:	e7b6      	b.n	8006cca <_malloc_r+0x4a>
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	d1fb      	bne.n	8006d5c <_malloc_r+0xdc>
 8006d64:	2300      	movs	r3, #0
 8006d66:	6053      	str	r3, [r2, #4]
 8006d68:	e7de      	b.n	8006d28 <_malloc_r+0xa8>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 f80c 	bl	8006d8c <__malloc_unlock>
 8006d74:	e794      	b.n	8006ca0 <_malloc_r+0x20>
 8006d76:	6005      	str	r5, [r0, #0]
 8006d78:	e7d6      	b.n	8006d28 <_malloc_r+0xa8>
 8006d7a:	bf00      	nop
 8006d7c:	20000540 	.word	0x20000540

08006d80 <__malloc_lock>:
 8006d80:	4801      	ldr	r0, [pc, #4]	@ (8006d88 <__malloc_lock+0x8>)
 8006d82:	f7ff b8ac 	b.w	8005ede <__retarget_lock_acquire_recursive>
 8006d86:	bf00      	nop
 8006d88:	20000538 	.word	0x20000538

08006d8c <__malloc_unlock>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	@ (8006d94 <__malloc_unlock+0x8>)
 8006d8e:	f7ff b8a7 	b.w	8005ee0 <__retarget_lock_release_recursive>
 8006d92:	bf00      	nop
 8006d94:	20000538 	.word	0x20000538

08006d98 <_Balloc>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	69c6      	ldr	r6, [r0, #28]
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	460d      	mov	r5, r1
 8006da0:	b976      	cbnz	r6, 8006dc0 <_Balloc+0x28>
 8006da2:	2010      	movs	r0, #16
 8006da4:	f7ff ff42 	bl	8006c2c <malloc>
 8006da8:	4602      	mov	r2, r0
 8006daa:	61e0      	str	r0, [r4, #28]
 8006dac:	b920      	cbnz	r0, 8006db8 <_Balloc+0x20>
 8006dae:	4b18      	ldr	r3, [pc, #96]	@ (8006e10 <_Balloc+0x78>)
 8006db0:	4818      	ldr	r0, [pc, #96]	@ (8006e14 <_Balloc+0x7c>)
 8006db2:	216b      	movs	r1, #107	@ 0x6b
 8006db4:	f000 fc34 	bl	8007620 <__assert_func>
 8006db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dbc:	6006      	str	r6, [r0, #0]
 8006dbe:	60c6      	str	r6, [r0, #12]
 8006dc0:	69e6      	ldr	r6, [r4, #28]
 8006dc2:	68f3      	ldr	r3, [r6, #12]
 8006dc4:	b183      	cbz	r3, 8006de8 <_Balloc+0x50>
 8006dc6:	69e3      	ldr	r3, [r4, #28]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dce:	b9b8      	cbnz	r0, 8006e00 <_Balloc+0x68>
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	fa01 f605 	lsl.w	r6, r1, r5
 8006dd6:	1d72      	adds	r2, r6, #5
 8006dd8:	0092      	lsls	r2, r2, #2
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 fc3e 	bl	800765c <_calloc_r>
 8006de0:	b160      	cbz	r0, 8006dfc <_Balloc+0x64>
 8006de2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006de6:	e00e      	b.n	8006e06 <_Balloc+0x6e>
 8006de8:	2221      	movs	r2, #33	@ 0x21
 8006dea:	2104      	movs	r1, #4
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fc35 	bl	800765c <_calloc_r>
 8006df2:	69e3      	ldr	r3, [r4, #28]
 8006df4:	60f0      	str	r0, [r6, #12]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e4      	bne.n	8006dc6 <_Balloc+0x2e>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	6802      	ldr	r2, [r0, #0]
 8006e02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e06:	2300      	movs	r3, #0
 8006e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e0c:	e7f7      	b.n	8006dfe <_Balloc+0x66>
 8006e0e:	bf00      	nop
 8006e10:	08007f11 	.word	0x08007f11
 8006e14:	08007f91 	.word	0x08007f91

08006e18 <_Bfree>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	69c6      	ldr	r6, [r0, #28]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b976      	cbnz	r6, 8006e40 <_Bfree+0x28>
 8006e22:	2010      	movs	r0, #16
 8006e24:	f7ff ff02 	bl	8006c2c <malloc>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	61e8      	str	r0, [r5, #28]
 8006e2c:	b920      	cbnz	r0, 8006e38 <_Bfree+0x20>
 8006e2e:	4b09      	ldr	r3, [pc, #36]	@ (8006e54 <_Bfree+0x3c>)
 8006e30:	4809      	ldr	r0, [pc, #36]	@ (8006e58 <_Bfree+0x40>)
 8006e32:	218f      	movs	r1, #143	@ 0x8f
 8006e34:	f000 fbf4 	bl	8007620 <__assert_func>
 8006e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e3c:	6006      	str	r6, [r0, #0]
 8006e3e:	60c6      	str	r6, [r0, #12]
 8006e40:	b13c      	cbz	r4, 8006e52 <_Bfree+0x3a>
 8006e42:	69eb      	ldr	r3, [r5, #28]
 8006e44:	6862      	ldr	r2, [r4, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e4c:	6021      	str	r1, [r4, #0]
 8006e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	08007f11 	.word	0x08007f11
 8006e58:	08007f91 	.word	0x08007f91

08006e5c <__multadd>:
 8006e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e60:	690d      	ldr	r5, [r1, #16]
 8006e62:	4607      	mov	r7, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	461e      	mov	r6, r3
 8006e68:	f101 0c14 	add.w	ip, r1, #20
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e72:	b299      	uxth	r1, r3
 8006e74:	fb02 6101 	mla	r1, r2, r1, r6
 8006e78:	0c1e      	lsrs	r6, r3, #16
 8006e7a:	0c0b      	lsrs	r3, r1, #16
 8006e7c:	fb02 3306 	mla	r3, r2, r6, r3
 8006e80:	b289      	uxth	r1, r1
 8006e82:	3001      	adds	r0, #1
 8006e84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e88:	4285      	cmp	r5, r0
 8006e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e92:	dcec      	bgt.n	8006e6e <__multadd+0x12>
 8006e94:	b30e      	cbz	r6, 8006eda <__multadd+0x7e>
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	dc19      	bgt.n	8006ed0 <__multadd+0x74>
 8006e9c:	6861      	ldr	r1, [r4, #4]
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	3101      	adds	r1, #1
 8006ea2:	f7ff ff79 	bl	8006d98 <_Balloc>
 8006ea6:	4680      	mov	r8, r0
 8006ea8:	b928      	cbnz	r0, 8006eb6 <__multadd+0x5a>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <__multadd+0x84>)
 8006eae:	480d      	ldr	r0, [pc, #52]	@ (8006ee4 <__multadd+0x88>)
 8006eb0:	21ba      	movs	r1, #186	@ 0xba
 8006eb2:	f000 fbb5 	bl	8007620 <__assert_func>
 8006eb6:	6922      	ldr	r2, [r4, #16]
 8006eb8:	3202      	adds	r2, #2
 8006eba:	f104 010c 	add.w	r1, r4, #12
 8006ebe:	0092      	lsls	r2, r2, #2
 8006ec0:	300c      	adds	r0, #12
 8006ec2:	f000 fb9f 	bl	8007604 <memcpy>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f7ff ffa5 	bl	8006e18 <_Bfree>
 8006ece:	4644      	mov	r4, r8
 8006ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	615e      	str	r6, [r3, #20]
 8006ed8:	6125      	str	r5, [r4, #16]
 8006eda:	4620      	mov	r0, r4
 8006edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee0:	08007f80 	.word	0x08007f80
 8006ee4:	08007f91 	.word	0x08007f91

08006ee8 <__hi0bits>:
 8006ee8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006eec:	4603      	mov	r3, r0
 8006eee:	bf36      	itet	cc
 8006ef0:	0403      	lslcc	r3, r0, #16
 8006ef2:	2000      	movcs	r0, #0
 8006ef4:	2010      	movcc	r0, #16
 8006ef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006efa:	bf3c      	itt	cc
 8006efc:	021b      	lslcc	r3, r3, #8
 8006efe:	3008      	addcc	r0, #8
 8006f00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f04:	bf3c      	itt	cc
 8006f06:	011b      	lslcc	r3, r3, #4
 8006f08:	3004      	addcc	r0, #4
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0e:	bf3c      	itt	cc
 8006f10:	009b      	lslcc	r3, r3, #2
 8006f12:	3002      	addcc	r0, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	db05      	blt.n	8006f24 <__hi0bits+0x3c>
 8006f18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f1c:	f100 0001 	add.w	r0, r0, #1
 8006f20:	bf08      	it	eq
 8006f22:	2020      	moveq	r0, #32
 8006f24:	4770      	bx	lr

08006f26 <__lo0bits>:
 8006f26:	6803      	ldr	r3, [r0, #0]
 8006f28:	4602      	mov	r2, r0
 8006f2a:	f013 0007 	ands.w	r0, r3, #7
 8006f2e:	d00b      	beq.n	8006f48 <__lo0bits+0x22>
 8006f30:	07d9      	lsls	r1, r3, #31
 8006f32:	d421      	bmi.n	8006f78 <__lo0bits+0x52>
 8006f34:	0798      	lsls	r0, r3, #30
 8006f36:	bf49      	itett	mi
 8006f38:	085b      	lsrmi	r3, r3, #1
 8006f3a:	089b      	lsrpl	r3, r3, #2
 8006f3c:	2001      	movmi	r0, #1
 8006f3e:	6013      	strmi	r3, [r2, #0]
 8006f40:	bf5c      	itt	pl
 8006f42:	6013      	strpl	r3, [r2, #0]
 8006f44:	2002      	movpl	r0, #2
 8006f46:	4770      	bx	lr
 8006f48:	b299      	uxth	r1, r3
 8006f4a:	b909      	cbnz	r1, 8006f50 <__lo0bits+0x2a>
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	2010      	movs	r0, #16
 8006f50:	b2d9      	uxtb	r1, r3
 8006f52:	b909      	cbnz	r1, 8006f58 <__lo0bits+0x32>
 8006f54:	3008      	adds	r0, #8
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	0719      	lsls	r1, r3, #28
 8006f5a:	bf04      	itt	eq
 8006f5c:	091b      	lsreq	r3, r3, #4
 8006f5e:	3004      	addeq	r0, #4
 8006f60:	0799      	lsls	r1, r3, #30
 8006f62:	bf04      	itt	eq
 8006f64:	089b      	lsreq	r3, r3, #2
 8006f66:	3002      	addeq	r0, #2
 8006f68:	07d9      	lsls	r1, r3, #31
 8006f6a:	d403      	bmi.n	8006f74 <__lo0bits+0x4e>
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	f100 0001 	add.w	r0, r0, #1
 8006f72:	d003      	beq.n	8006f7c <__lo0bits+0x56>
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4770      	bx	lr
 8006f78:	2000      	movs	r0, #0
 8006f7a:	4770      	bx	lr
 8006f7c:	2020      	movs	r0, #32
 8006f7e:	4770      	bx	lr

08006f80 <__i2b>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	2101      	movs	r1, #1
 8006f86:	f7ff ff07 	bl	8006d98 <_Balloc>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	b928      	cbnz	r0, 8006f9a <__i2b+0x1a>
 8006f8e:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <__i2b+0x24>)
 8006f90:	4805      	ldr	r0, [pc, #20]	@ (8006fa8 <__i2b+0x28>)
 8006f92:	f240 1145 	movw	r1, #325	@ 0x145
 8006f96:	f000 fb43 	bl	8007620 <__assert_func>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	6144      	str	r4, [r0, #20]
 8006f9e:	6103      	str	r3, [r0, #16]
 8006fa0:	bd10      	pop	{r4, pc}
 8006fa2:	bf00      	nop
 8006fa4:	08007f80 	.word	0x08007f80
 8006fa8:	08007f91 	.word	0x08007f91

08006fac <__multiply>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	4617      	mov	r7, r2
 8006fb2:	690a      	ldr	r2, [r1, #16]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	bfa8      	it	ge
 8006fba:	463b      	movge	r3, r7
 8006fbc:	4689      	mov	r9, r1
 8006fbe:	bfa4      	itt	ge
 8006fc0:	460f      	movge	r7, r1
 8006fc2:	4699      	movge	r9, r3
 8006fc4:	693d      	ldr	r5, [r7, #16]
 8006fc6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	eb05 060a 	add.w	r6, r5, sl
 8006fd2:	42b3      	cmp	r3, r6
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	bfb8      	it	lt
 8006fd8:	3101      	addlt	r1, #1
 8006fda:	f7ff fedd 	bl	8006d98 <_Balloc>
 8006fde:	b930      	cbnz	r0, 8006fee <__multiply+0x42>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	4b41      	ldr	r3, [pc, #260]	@ (80070e8 <__multiply+0x13c>)
 8006fe4:	4841      	ldr	r0, [pc, #260]	@ (80070ec <__multiply+0x140>)
 8006fe6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006fea:	f000 fb19 	bl	8007620 <__assert_func>
 8006fee:	f100 0414 	add.w	r4, r0, #20
 8006ff2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4573      	cmp	r3, lr
 8006ffc:	d320      	bcc.n	8007040 <__multiply+0x94>
 8006ffe:	f107 0814 	add.w	r8, r7, #20
 8007002:	f109 0114 	add.w	r1, r9, #20
 8007006:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800700a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800700e:	9302      	str	r3, [sp, #8]
 8007010:	1beb      	subs	r3, r5, r7
 8007012:	3b15      	subs	r3, #21
 8007014:	f023 0303 	bic.w	r3, r3, #3
 8007018:	3304      	adds	r3, #4
 800701a:	3715      	adds	r7, #21
 800701c:	42bd      	cmp	r5, r7
 800701e:	bf38      	it	cc
 8007020:	2304      	movcc	r3, #4
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	9b02      	ldr	r3, [sp, #8]
 8007026:	9103      	str	r1, [sp, #12]
 8007028:	428b      	cmp	r3, r1
 800702a:	d80c      	bhi.n	8007046 <__multiply+0x9a>
 800702c:	2e00      	cmp	r6, #0
 800702e:	dd03      	ble.n	8007038 <__multiply+0x8c>
 8007030:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007034:	2b00      	cmp	r3, #0
 8007036:	d055      	beq.n	80070e4 <__multiply+0x138>
 8007038:	6106      	str	r6, [r0, #16]
 800703a:	b005      	add	sp, #20
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	f843 2b04 	str.w	r2, [r3], #4
 8007044:	e7d9      	b.n	8006ffa <__multiply+0x4e>
 8007046:	f8b1 a000 	ldrh.w	sl, [r1]
 800704a:	f1ba 0f00 	cmp.w	sl, #0
 800704e:	d01f      	beq.n	8007090 <__multiply+0xe4>
 8007050:	46c4      	mov	ip, r8
 8007052:	46a1      	mov	r9, r4
 8007054:	2700      	movs	r7, #0
 8007056:	f85c 2b04 	ldr.w	r2, [ip], #4
 800705a:	f8d9 3000 	ldr.w	r3, [r9]
 800705e:	fa1f fb82 	uxth.w	fp, r2
 8007062:	b29b      	uxth	r3, r3
 8007064:	fb0a 330b 	mla	r3, sl, fp, r3
 8007068:	443b      	add	r3, r7
 800706a:	f8d9 7000 	ldr.w	r7, [r9]
 800706e:	0c12      	lsrs	r2, r2, #16
 8007070:	0c3f      	lsrs	r7, r7, #16
 8007072:	fb0a 7202 	mla	r2, sl, r2, r7
 8007076:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800707a:	b29b      	uxth	r3, r3
 800707c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007080:	4565      	cmp	r5, ip
 8007082:	f849 3b04 	str.w	r3, [r9], #4
 8007086:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800708a:	d8e4      	bhi.n	8007056 <__multiply+0xaa>
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	50e7      	str	r7, [r4, r3]
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007096:	3104      	adds	r1, #4
 8007098:	f1b9 0f00 	cmp.w	r9, #0
 800709c:	d020      	beq.n	80070e0 <__multiply+0x134>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	4647      	mov	r7, r8
 80070a2:	46a4      	mov	ip, r4
 80070a4:	f04f 0a00 	mov.w	sl, #0
 80070a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80070ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80070b0:	fb09 220b 	mla	r2, r9, fp, r2
 80070b4:	4452      	add	r2, sl
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070bc:	f84c 3b04 	str.w	r3, [ip], #4
 80070c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80070c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80070cc:	fb09 330a 	mla	r3, r9, sl, r3
 80070d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80070d4:	42bd      	cmp	r5, r7
 80070d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070da:	d8e5      	bhi.n	80070a8 <__multiply+0xfc>
 80070dc:	9a01      	ldr	r2, [sp, #4]
 80070de:	50a3      	str	r3, [r4, r2]
 80070e0:	3404      	adds	r4, #4
 80070e2:	e79f      	b.n	8007024 <__multiply+0x78>
 80070e4:	3e01      	subs	r6, #1
 80070e6:	e7a1      	b.n	800702c <__multiply+0x80>
 80070e8:	08007f80 	.word	0x08007f80
 80070ec:	08007f91 	.word	0x08007f91

080070f0 <__pow5mult>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4615      	mov	r5, r2
 80070f6:	f012 0203 	ands.w	r2, r2, #3
 80070fa:	4607      	mov	r7, r0
 80070fc:	460e      	mov	r6, r1
 80070fe:	d007      	beq.n	8007110 <__pow5mult+0x20>
 8007100:	4c25      	ldr	r4, [pc, #148]	@ (8007198 <__pow5mult+0xa8>)
 8007102:	3a01      	subs	r2, #1
 8007104:	2300      	movs	r3, #0
 8007106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800710a:	f7ff fea7 	bl	8006e5c <__multadd>
 800710e:	4606      	mov	r6, r0
 8007110:	10ad      	asrs	r5, r5, #2
 8007112:	d03d      	beq.n	8007190 <__pow5mult+0xa0>
 8007114:	69fc      	ldr	r4, [r7, #28]
 8007116:	b97c      	cbnz	r4, 8007138 <__pow5mult+0x48>
 8007118:	2010      	movs	r0, #16
 800711a:	f7ff fd87 	bl	8006c2c <malloc>
 800711e:	4602      	mov	r2, r0
 8007120:	61f8      	str	r0, [r7, #28]
 8007122:	b928      	cbnz	r0, 8007130 <__pow5mult+0x40>
 8007124:	4b1d      	ldr	r3, [pc, #116]	@ (800719c <__pow5mult+0xac>)
 8007126:	481e      	ldr	r0, [pc, #120]	@ (80071a0 <__pow5mult+0xb0>)
 8007128:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800712c:	f000 fa78 	bl	8007620 <__assert_func>
 8007130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007134:	6004      	str	r4, [r0, #0]
 8007136:	60c4      	str	r4, [r0, #12]
 8007138:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800713c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007140:	b94c      	cbnz	r4, 8007156 <__pow5mult+0x66>
 8007142:	f240 2171 	movw	r1, #625	@ 0x271
 8007146:	4638      	mov	r0, r7
 8007148:	f7ff ff1a 	bl	8006f80 <__i2b>
 800714c:	2300      	movs	r3, #0
 800714e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007152:	4604      	mov	r4, r0
 8007154:	6003      	str	r3, [r0, #0]
 8007156:	f04f 0900 	mov.w	r9, #0
 800715a:	07eb      	lsls	r3, r5, #31
 800715c:	d50a      	bpl.n	8007174 <__pow5mult+0x84>
 800715e:	4631      	mov	r1, r6
 8007160:	4622      	mov	r2, r4
 8007162:	4638      	mov	r0, r7
 8007164:	f7ff ff22 	bl	8006fac <__multiply>
 8007168:	4631      	mov	r1, r6
 800716a:	4680      	mov	r8, r0
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff fe53 	bl	8006e18 <_Bfree>
 8007172:	4646      	mov	r6, r8
 8007174:	106d      	asrs	r5, r5, #1
 8007176:	d00b      	beq.n	8007190 <__pow5mult+0xa0>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	b938      	cbnz	r0, 800718c <__pow5mult+0x9c>
 800717c:	4622      	mov	r2, r4
 800717e:	4621      	mov	r1, r4
 8007180:	4638      	mov	r0, r7
 8007182:	f7ff ff13 	bl	8006fac <__multiply>
 8007186:	6020      	str	r0, [r4, #0]
 8007188:	f8c0 9000 	str.w	r9, [r0]
 800718c:	4604      	mov	r4, r0
 800718e:	e7e4      	b.n	800715a <__pow5mult+0x6a>
 8007190:	4630      	mov	r0, r6
 8007192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007196:	bf00      	nop
 8007198:	08008044 	.word	0x08008044
 800719c:	08007f11 	.word	0x08007f11
 80071a0:	08007f91 	.word	0x08007f91

080071a4 <__lshift>:
 80071a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	460c      	mov	r4, r1
 80071aa:	6849      	ldr	r1, [r1, #4]
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	4607      	mov	r7, r0
 80071b6:	4691      	mov	r9, r2
 80071b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071bc:	f108 0601 	add.w	r6, r8, #1
 80071c0:	42b3      	cmp	r3, r6
 80071c2:	db0b      	blt.n	80071dc <__lshift+0x38>
 80071c4:	4638      	mov	r0, r7
 80071c6:	f7ff fde7 	bl	8006d98 <_Balloc>
 80071ca:	4605      	mov	r5, r0
 80071cc:	b948      	cbnz	r0, 80071e2 <__lshift+0x3e>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b28      	ldr	r3, [pc, #160]	@ (8007274 <__lshift+0xd0>)
 80071d2:	4829      	ldr	r0, [pc, #164]	@ (8007278 <__lshift+0xd4>)
 80071d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071d8:	f000 fa22 	bl	8007620 <__assert_func>
 80071dc:	3101      	adds	r1, #1
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	e7ee      	b.n	80071c0 <__lshift+0x1c>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f100 0114 	add.w	r1, r0, #20
 80071e8:	f100 0210 	add.w	r2, r0, #16
 80071ec:	4618      	mov	r0, r3
 80071ee:	4553      	cmp	r3, sl
 80071f0:	db33      	blt.n	800725a <__lshift+0xb6>
 80071f2:	6920      	ldr	r0, [r4, #16]
 80071f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071f8:	f104 0314 	add.w	r3, r4, #20
 80071fc:	f019 091f 	ands.w	r9, r9, #31
 8007200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007208:	d02b      	beq.n	8007262 <__lshift+0xbe>
 800720a:	f1c9 0e20 	rsb	lr, r9, #32
 800720e:	468a      	mov	sl, r1
 8007210:	2200      	movs	r2, #0
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	fa00 f009 	lsl.w	r0, r0, r9
 8007218:	4310      	orrs	r0, r2
 800721a:	f84a 0b04 	str.w	r0, [sl], #4
 800721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007222:	459c      	cmp	ip, r3
 8007224:	fa22 f20e 	lsr.w	r2, r2, lr
 8007228:	d8f3      	bhi.n	8007212 <__lshift+0x6e>
 800722a:	ebac 0304 	sub.w	r3, ip, r4
 800722e:	3b15      	subs	r3, #21
 8007230:	f023 0303 	bic.w	r3, r3, #3
 8007234:	3304      	adds	r3, #4
 8007236:	f104 0015 	add.w	r0, r4, #21
 800723a:	4560      	cmp	r0, ip
 800723c:	bf88      	it	hi
 800723e:	2304      	movhi	r3, #4
 8007240:	50ca      	str	r2, [r1, r3]
 8007242:	b10a      	cbz	r2, 8007248 <__lshift+0xa4>
 8007244:	f108 0602 	add.w	r6, r8, #2
 8007248:	3e01      	subs	r6, #1
 800724a:	4638      	mov	r0, r7
 800724c:	612e      	str	r6, [r5, #16]
 800724e:	4621      	mov	r1, r4
 8007250:	f7ff fde2 	bl	8006e18 <_Bfree>
 8007254:	4628      	mov	r0, r5
 8007256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725a:	f842 0f04 	str.w	r0, [r2, #4]!
 800725e:	3301      	adds	r3, #1
 8007260:	e7c5      	b.n	80071ee <__lshift+0x4a>
 8007262:	3904      	subs	r1, #4
 8007264:	f853 2b04 	ldr.w	r2, [r3], #4
 8007268:	f841 2f04 	str.w	r2, [r1, #4]!
 800726c:	459c      	cmp	ip, r3
 800726e:	d8f9      	bhi.n	8007264 <__lshift+0xc0>
 8007270:	e7ea      	b.n	8007248 <__lshift+0xa4>
 8007272:	bf00      	nop
 8007274:	08007f80 	.word	0x08007f80
 8007278:	08007f91 	.word	0x08007f91

0800727c <__mcmp>:
 800727c:	690a      	ldr	r2, [r1, #16]
 800727e:	4603      	mov	r3, r0
 8007280:	6900      	ldr	r0, [r0, #16]
 8007282:	1a80      	subs	r0, r0, r2
 8007284:	b530      	push	{r4, r5, lr}
 8007286:	d10e      	bne.n	80072a6 <__mcmp+0x2a>
 8007288:	3314      	adds	r3, #20
 800728a:	3114      	adds	r1, #20
 800728c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007290:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800729c:	4295      	cmp	r5, r2
 800729e:	d003      	beq.n	80072a8 <__mcmp+0x2c>
 80072a0:	d205      	bcs.n	80072ae <__mcmp+0x32>
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	bd30      	pop	{r4, r5, pc}
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d3f3      	bcc.n	8007294 <__mcmp+0x18>
 80072ac:	e7fb      	b.n	80072a6 <__mcmp+0x2a>
 80072ae:	2001      	movs	r0, #1
 80072b0:	e7f9      	b.n	80072a6 <__mcmp+0x2a>
	...

080072b4 <__mdiff>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4689      	mov	r9, r1
 80072ba:	4606      	mov	r6, r0
 80072bc:	4611      	mov	r1, r2
 80072be:	4648      	mov	r0, r9
 80072c0:	4614      	mov	r4, r2
 80072c2:	f7ff ffdb 	bl	800727c <__mcmp>
 80072c6:	1e05      	subs	r5, r0, #0
 80072c8:	d112      	bne.n	80072f0 <__mdiff+0x3c>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff fd63 	bl	8006d98 <_Balloc>
 80072d2:	4602      	mov	r2, r0
 80072d4:	b928      	cbnz	r0, 80072e2 <__mdiff+0x2e>
 80072d6:	4b3f      	ldr	r3, [pc, #252]	@ (80073d4 <__mdiff+0x120>)
 80072d8:	f240 2137 	movw	r1, #567	@ 0x237
 80072dc:	483e      	ldr	r0, [pc, #248]	@ (80073d8 <__mdiff+0x124>)
 80072de:	f000 f99f 	bl	8007620 <__assert_func>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072e8:	4610      	mov	r0, r2
 80072ea:	b003      	add	sp, #12
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	bfbc      	itt	lt
 80072f2:	464b      	movlt	r3, r9
 80072f4:	46a1      	movlt	r9, r4
 80072f6:	4630      	mov	r0, r6
 80072f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072fc:	bfba      	itte	lt
 80072fe:	461c      	movlt	r4, r3
 8007300:	2501      	movlt	r5, #1
 8007302:	2500      	movge	r5, #0
 8007304:	f7ff fd48 	bl	8006d98 <_Balloc>
 8007308:	4602      	mov	r2, r0
 800730a:	b918      	cbnz	r0, 8007314 <__mdiff+0x60>
 800730c:	4b31      	ldr	r3, [pc, #196]	@ (80073d4 <__mdiff+0x120>)
 800730e:	f240 2145 	movw	r1, #581	@ 0x245
 8007312:	e7e3      	b.n	80072dc <__mdiff+0x28>
 8007314:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007318:	6926      	ldr	r6, [r4, #16]
 800731a:	60c5      	str	r5, [r0, #12]
 800731c:	f109 0310 	add.w	r3, r9, #16
 8007320:	f109 0514 	add.w	r5, r9, #20
 8007324:	f104 0e14 	add.w	lr, r4, #20
 8007328:	f100 0b14 	add.w	fp, r0, #20
 800732c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007330:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	46d9      	mov	r9, fp
 8007338:	f04f 0c00 	mov.w	ip, #0
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007342:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	fa1f f38a 	uxth.w	r3, sl
 800734c:	4619      	mov	r1, r3
 800734e:	b283      	uxth	r3, r0
 8007350:	1acb      	subs	r3, r1, r3
 8007352:	0c00      	lsrs	r0, r0, #16
 8007354:	4463      	add	r3, ip
 8007356:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800735a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007364:	4576      	cmp	r6, lr
 8007366:	f849 3b04 	str.w	r3, [r9], #4
 800736a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800736e:	d8e5      	bhi.n	800733c <__mdiff+0x88>
 8007370:	1b33      	subs	r3, r6, r4
 8007372:	3b15      	subs	r3, #21
 8007374:	f023 0303 	bic.w	r3, r3, #3
 8007378:	3415      	adds	r4, #21
 800737a:	3304      	adds	r3, #4
 800737c:	42a6      	cmp	r6, r4
 800737e:	bf38      	it	cc
 8007380:	2304      	movcc	r3, #4
 8007382:	441d      	add	r5, r3
 8007384:	445b      	add	r3, fp
 8007386:	461e      	mov	r6, r3
 8007388:	462c      	mov	r4, r5
 800738a:	4544      	cmp	r4, r8
 800738c:	d30e      	bcc.n	80073ac <__mdiff+0xf8>
 800738e:	f108 0103 	add.w	r1, r8, #3
 8007392:	1b49      	subs	r1, r1, r5
 8007394:	f021 0103 	bic.w	r1, r1, #3
 8007398:	3d03      	subs	r5, #3
 800739a:	45a8      	cmp	r8, r5
 800739c:	bf38      	it	cc
 800739e:	2100      	movcc	r1, #0
 80073a0:	440b      	add	r3, r1
 80073a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073a6:	b191      	cbz	r1, 80073ce <__mdiff+0x11a>
 80073a8:	6117      	str	r7, [r2, #16]
 80073aa:	e79d      	b.n	80072e8 <__mdiff+0x34>
 80073ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80073b0:	46e6      	mov	lr, ip
 80073b2:	0c08      	lsrs	r0, r1, #16
 80073b4:	fa1c fc81 	uxtah	ip, ip, r1
 80073b8:	4471      	add	r1, lr
 80073ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073be:	b289      	uxth	r1, r1
 80073c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073c4:	f846 1b04 	str.w	r1, [r6], #4
 80073c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073cc:	e7dd      	b.n	800738a <__mdiff+0xd6>
 80073ce:	3f01      	subs	r7, #1
 80073d0:	e7e7      	b.n	80073a2 <__mdiff+0xee>
 80073d2:	bf00      	nop
 80073d4:	08007f80 	.word	0x08007f80
 80073d8:	08007f91 	.word	0x08007f91

080073dc <__d2b>:
 80073dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073e0:	460f      	mov	r7, r1
 80073e2:	2101      	movs	r1, #1
 80073e4:	ec59 8b10 	vmov	r8, r9, d0
 80073e8:	4616      	mov	r6, r2
 80073ea:	f7ff fcd5 	bl	8006d98 <_Balloc>
 80073ee:	4604      	mov	r4, r0
 80073f0:	b930      	cbnz	r0, 8007400 <__d2b+0x24>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b23      	ldr	r3, [pc, #140]	@ (8007484 <__d2b+0xa8>)
 80073f6:	4824      	ldr	r0, [pc, #144]	@ (8007488 <__d2b+0xac>)
 80073f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80073fc:	f000 f910 	bl	8007620 <__assert_func>
 8007400:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007408:	b10d      	cbz	r5, 800740e <__d2b+0x32>
 800740a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	f1b8 0300 	subs.w	r3, r8, #0
 8007414:	d023      	beq.n	800745e <__d2b+0x82>
 8007416:	4668      	mov	r0, sp
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	f7ff fd84 	bl	8006f26 <__lo0bits>
 800741e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007422:	b1d0      	cbz	r0, 800745a <__d2b+0x7e>
 8007424:	f1c0 0320 	rsb	r3, r0, #32
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	430b      	orrs	r3, r1
 800742e:	40c2      	lsrs	r2, r0
 8007430:	6163      	str	r3, [r4, #20]
 8007432:	9201      	str	r2, [sp, #4]
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	61a3      	str	r3, [r4, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf0c      	ite	eq
 800743c:	2201      	moveq	r2, #1
 800743e:	2202      	movne	r2, #2
 8007440:	6122      	str	r2, [r4, #16]
 8007442:	b1a5      	cbz	r5, 800746e <__d2b+0x92>
 8007444:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007448:	4405      	add	r5, r0
 800744a:	603d      	str	r5, [r7, #0]
 800744c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007450:	6030      	str	r0, [r6, #0]
 8007452:	4620      	mov	r0, r4
 8007454:	b003      	add	sp, #12
 8007456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800745a:	6161      	str	r1, [r4, #20]
 800745c:	e7ea      	b.n	8007434 <__d2b+0x58>
 800745e:	a801      	add	r0, sp, #4
 8007460:	f7ff fd61 	bl	8006f26 <__lo0bits>
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	6163      	str	r3, [r4, #20]
 8007468:	3020      	adds	r0, #32
 800746a:	2201      	movs	r2, #1
 800746c:	e7e8      	b.n	8007440 <__d2b+0x64>
 800746e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007472:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007476:	6038      	str	r0, [r7, #0]
 8007478:	6918      	ldr	r0, [r3, #16]
 800747a:	f7ff fd35 	bl	8006ee8 <__hi0bits>
 800747e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007482:	e7e5      	b.n	8007450 <__d2b+0x74>
 8007484:	08007f80 	.word	0x08007f80
 8007488:	08007f91 	.word	0x08007f91

0800748c <__sflush_r>:
 800748c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007494:	0716      	lsls	r6, r2, #28
 8007496:	4605      	mov	r5, r0
 8007498:	460c      	mov	r4, r1
 800749a:	d454      	bmi.n	8007546 <__sflush_r+0xba>
 800749c:	684b      	ldr	r3, [r1, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dc02      	bgt.n	80074a8 <__sflush_r+0x1c>
 80074a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dd48      	ble.n	800753a <__sflush_r+0xae>
 80074a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074aa:	2e00      	cmp	r6, #0
 80074ac:	d045      	beq.n	800753a <__sflush_r+0xae>
 80074ae:	2300      	movs	r3, #0
 80074b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074b4:	682f      	ldr	r7, [r5, #0]
 80074b6:	6a21      	ldr	r1, [r4, #32]
 80074b8:	602b      	str	r3, [r5, #0]
 80074ba:	d030      	beq.n	800751e <__sflush_r+0x92>
 80074bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	0759      	lsls	r1, r3, #29
 80074c2:	d505      	bpl.n	80074d0 <__sflush_r+0x44>
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	1ad2      	subs	r2, r2, r3
 80074c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074ca:	b10b      	cbz	r3, 80074d0 <__sflush_r+0x44>
 80074cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	2300      	movs	r3, #0
 80074d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074d4:	6a21      	ldr	r1, [r4, #32]
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b0      	blx	r6
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	d106      	bne.n	80074ee <__sflush_r+0x62>
 80074e0:	6829      	ldr	r1, [r5, #0]
 80074e2:	291d      	cmp	r1, #29
 80074e4:	d82b      	bhi.n	800753e <__sflush_r+0xb2>
 80074e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007590 <__sflush_r+0x104>)
 80074e8:	40ca      	lsrs	r2, r1
 80074ea:	07d6      	lsls	r6, r2, #31
 80074ec:	d527      	bpl.n	800753e <__sflush_r+0xb2>
 80074ee:	2200      	movs	r2, #0
 80074f0:	6062      	str	r2, [r4, #4]
 80074f2:	04d9      	lsls	r1, r3, #19
 80074f4:	6922      	ldr	r2, [r4, #16]
 80074f6:	6022      	str	r2, [r4, #0]
 80074f8:	d504      	bpl.n	8007504 <__sflush_r+0x78>
 80074fa:	1c42      	adds	r2, r0, #1
 80074fc:	d101      	bne.n	8007502 <__sflush_r+0x76>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	b903      	cbnz	r3, 8007504 <__sflush_r+0x78>
 8007502:	6560      	str	r0, [r4, #84]	@ 0x54
 8007504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007506:	602f      	str	r7, [r5, #0]
 8007508:	b1b9      	cbz	r1, 800753a <__sflush_r+0xae>
 800750a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800750e:	4299      	cmp	r1, r3
 8007510:	d002      	beq.n	8007518 <__sflush_r+0x8c>
 8007512:	4628      	mov	r0, r5
 8007514:	f7ff fb40 	bl	8006b98 <_free_r>
 8007518:	2300      	movs	r3, #0
 800751a:	6363      	str	r3, [r4, #52]	@ 0x34
 800751c:	e00d      	b.n	800753a <__sflush_r+0xae>
 800751e:	2301      	movs	r3, #1
 8007520:	4628      	mov	r0, r5
 8007522:	47b0      	blx	r6
 8007524:	4602      	mov	r2, r0
 8007526:	1c50      	adds	r0, r2, #1
 8007528:	d1c9      	bne.n	80074be <__sflush_r+0x32>
 800752a:	682b      	ldr	r3, [r5, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0c6      	beq.n	80074be <__sflush_r+0x32>
 8007530:	2b1d      	cmp	r3, #29
 8007532:	d001      	beq.n	8007538 <__sflush_r+0xac>
 8007534:	2b16      	cmp	r3, #22
 8007536:	d11e      	bne.n	8007576 <__sflush_r+0xea>
 8007538:	602f      	str	r7, [r5, #0]
 800753a:	2000      	movs	r0, #0
 800753c:	e022      	b.n	8007584 <__sflush_r+0xf8>
 800753e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007542:	b21b      	sxth	r3, r3
 8007544:	e01b      	b.n	800757e <__sflush_r+0xf2>
 8007546:	690f      	ldr	r7, [r1, #16]
 8007548:	2f00      	cmp	r7, #0
 800754a:	d0f6      	beq.n	800753a <__sflush_r+0xae>
 800754c:	0793      	lsls	r3, r2, #30
 800754e:	680e      	ldr	r6, [r1, #0]
 8007550:	bf08      	it	eq
 8007552:	694b      	ldreq	r3, [r1, #20]
 8007554:	600f      	str	r7, [r1, #0]
 8007556:	bf18      	it	ne
 8007558:	2300      	movne	r3, #0
 800755a:	eba6 0807 	sub.w	r8, r6, r7
 800755e:	608b      	str	r3, [r1, #8]
 8007560:	f1b8 0f00 	cmp.w	r8, #0
 8007564:	dde9      	ble.n	800753a <__sflush_r+0xae>
 8007566:	6a21      	ldr	r1, [r4, #32]
 8007568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800756a:	4643      	mov	r3, r8
 800756c:	463a      	mov	r2, r7
 800756e:	4628      	mov	r0, r5
 8007570:	47b0      	blx	r6
 8007572:	2800      	cmp	r0, #0
 8007574:	dc08      	bgt.n	8007588 <__sflush_r+0xfc>
 8007576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800757a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	4407      	add	r7, r0
 800758a:	eba8 0800 	sub.w	r8, r8, r0
 800758e:	e7e7      	b.n	8007560 <__sflush_r+0xd4>
 8007590:	20400001 	.word	0x20400001

08007594 <_fflush_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	690b      	ldr	r3, [r1, #16]
 8007598:	4605      	mov	r5, r0
 800759a:	460c      	mov	r4, r1
 800759c:	b913      	cbnz	r3, 80075a4 <_fflush_r+0x10>
 800759e:	2500      	movs	r5, #0
 80075a0:	4628      	mov	r0, r5
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	b118      	cbz	r0, 80075ae <_fflush_r+0x1a>
 80075a6:	6a03      	ldr	r3, [r0, #32]
 80075a8:	b90b      	cbnz	r3, 80075ae <_fflush_r+0x1a>
 80075aa:	f7fe fba1 	bl	8005cf0 <__sinit>
 80075ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f3      	beq.n	800759e <_fflush_r+0xa>
 80075b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075b8:	07d0      	lsls	r0, r2, #31
 80075ba:	d404      	bmi.n	80075c6 <_fflush_r+0x32>
 80075bc:	0599      	lsls	r1, r3, #22
 80075be:	d402      	bmi.n	80075c6 <_fflush_r+0x32>
 80075c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075c2:	f7fe fc8c 	bl	8005ede <__retarget_lock_acquire_recursive>
 80075c6:	4628      	mov	r0, r5
 80075c8:	4621      	mov	r1, r4
 80075ca:	f7ff ff5f 	bl	800748c <__sflush_r>
 80075ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075d0:	07da      	lsls	r2, r3, #31
 80075d2:	4605      	mov	r5, r0
 80075d4:	d4e4      	bmi.n	80075a0 <_fflush_r+0xc>
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	059b      	lsls	r3, r3, #22
 80075da:	d4e1      	bmi.n	80075a0 <_fflush_r+0xc>
 80075dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075de:	f7fe fc7f 	bl	8005ee0 <__retarget_lock_release_recursive>
 80075e2:	e7dd      	b.n	80075a0 <_fflush_r+0xc>

080075e4 <_sbrk_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d06      	ldr	r5, [pc, #24]	@ (8007600 <_sbrk_r+0x1c>)
 80075e8:	2300      	movs	r3, #0
 80075ea:	4604      	mov	r4, r0
 80075ec:	4608      	mov	r0, r1
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	f7fa fbf0 	bl	8001dd4 <_sbrk>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_sbrk_r+0x1a>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_sbrk_r+0x1a>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	20000534 	.word	0x20000534

08007604 <memcpy>:
 8007604:	440a      	add	r2, r1
 8007606:	4291      	cmp	r1, r2
 8007608:	f100 33ff 	add.w	r3, r0, #4294967295
 800760c:	d100      	bne.n	8007610 <memcpy+0xc>
 800760e:	4770      	bx	lr
 8007610:	b510      	push	{r4, lr}
 8007612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800761a:	4291      	cmp	r1, r2
 800761c:	d1f9      	bne.n	8007612 <memcpy+0xe>
 800761e:	bd10      	pop	{r4, pc}

08007620 <__assert_func>:
 8007620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007622:	4614      	mov	r4, r2
 8007624:	461a      	mov	r2, r3
 8007626:	4b09      	ldr	r3, [pc, #36]	@ (800764c <__assert_func+0x2c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4605      	mov	r5, r0
 800762c:	68d8      	ldr	r0, [r3, #12]
 800762e:	b14c      	cbz	r4, 8007644 <__assert_func+0x24>
 8007630:	4b07      	ldr	r3, [pc, #28]	@ (8007650 <__assert_func+0x30>)
 8007632:	9100      	str	r1, [sp, #0]
 8007634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007638:	4906      	ldr	r1, [pc, #24]	@ (8007654 <__assert_func+0x34>)
 800763a:	462b      	mov	r3, r5
 800763c:	f000 f842 	bl	80076c4 <fiprintf>
 8007640:	f000 f852 	bl	80076e8 <abort>
 8007644:	4b04      	ldr	r3, [pc, #16]	@ (8007658 <__assert_func+0x38>)
 8007646:	461c      	mov	r4, r3
 8007648:	e7f3      	b.n	8007632 <__assert_func+0x12>
 800764a:	bf00      	nop
 800764c:	20000028 	.word	0x20000028
 8007650:	08007ff4 	.word	0x08007ff4
 8007654:	08008001 	.word	0x08008001
 8007658:	0800802f 	.word	0x0800802f

0800765c <_calloc_r>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	fba1 5402 	umull	r5, r4, r1, r2
 8007662:	b934      	cbnz	r4, 8007672 <_calloc_r+0x16>
 8007664:	4629      	mov	r1, r5
 8007666:	f7ff fb0b 	bl	8006c80 <_malloc_r>
 800766a:	4606      	mov	r6, r0
 800766c:	b928      	cbnz	r0, 800767a <_calloc_r+0x1e>
 800766e:	4630      	mov	r0, r6
 8007670:	bd70      	pop	{r4, r5, r6, pc}
 8007672:	220c      	movs	r2, #12
 8007674:	6002      	str	r2, [r0, #0]
 8007676:	2600      	movs	r6, #0
 8007678:	e7f9      	b.n	800766e <_calloc_r+0x12>
 800767a:	462a      	mov	r2, r5
 800767c:	4621      	mov	r1, r4
 800767e:	f7fe fbb0 	bl	8005de2 <memset>
 8007682:	e7f4      	b.n	800766e <_calloc_r+0x12>

08007684 <__ascii_mbtowc>:
 8007684:	b082      	sub	sp, #8
 8007686:	b901      	cbnz	r1, 800768a <__ascii_mbtowc+0x6>
 8007688:	a901      	add	r1, sp, #4
 800768a:	b142      	cbz	r2, 800769e <__ascii_mbtowc+0x1a>
 800768c:	b14b      	cbz	r3, 80076a2 <__ascii_mbtowc+0x1e>
 800768e:	7813      	ldrb	r3, [r2, #0]
 8007690:	600b      	str	r3, [r1, #0]
 8007692:	7812      	ldrb	r2, [r2, #0]
 8007694:	1e10      	subs	r0, r2, #0
 8007696:	bf18      	it	ne
 8007698:	2001      	movne	r0, #1
 800769a:	b002      	add	sp, #8
 800769c:	4770      	bx	lr
 800769e:	4610      	mov	r0, r2
 80076a0:	e7fb      	b.n	800769a <__ascii_mbtowc+0x16>
 80076a2:	f06f 0001 	mvn.w	r0, #1
 80076a6:	e7f8      	b.n	800769a <__ascii_mbtowc+0x16>

080076a8 <__ascii_wctomb>:
 80076a8:	4603      	mov	r3, r0
 80076aa:	4608      	mov	r0, r1
 80076ac:	b141      	cbz	r1, 80076c0 <__ascii_wctomb+0x18>
 80076ae:	2aff      	cmp	r2, #255	@ 0xff
 80076b0:	d904      	bls.n	80076bc <__ascii_wctomb+0x14>
 80076b2:	228a      	movs	r2, #138	@ 0x8a
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ba:	4770      	bx	lr
 80076bc:	700a      	strb	r2, [r1, #0]
 80076be:	2001      	movs	r0, #1
 80076c0:	4770      	bx	lr
	...

080076c4 <fiprintf>:
 80076c4:	b40e      	push	{r1, r2, r3}
 80076c6:	b503      	push	{r0, r1, lr}
 80076c8:	4601      	mov	r1, r0
 80076ca:	ab03      	add	r3, sp, #12
 80076cc:	4805      	ldr	r0, [pc, #20]	@ (80076e4 <fiprintf+0x20>)
 80076ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d2:	6800      	ldr	r0, [r0, #0]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	f000 f837 	bl	8007748 <_vfiprintf_r>
 80076da:	b002      	add	sp, #8
 80076dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e0:	b003      	add	sp, #12
 80076e2:	4770      	bx	lr
 80076e4:	20000028 	.word	0x20000028

080076e8 <abort>:
 80076e8:	b508      	push	{r3, lr}
 80076ea:	2006      	movs	r0, #6
 80076ec:	f000 fa00 	bl	8007af0 <raise>
 80076f0:	2001      	movs	r0, #1
 80076f2:	f7fa faf7 	bl	8001ce4 <_exit>

080076f6 <__sfputc_r>:
 80076f6:	6893      	ldr	r3, [r2, #8]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	b410      	push	{r4}
 80076fe:	6093      	str	r3, [r2, #8]
 8007700:	da08      	bge.n	8007714 <__sfputc_r+0x1e>
 8007702:	6994      	ldr	r4, [r2, #24]
 8007704:	42a3      	cmp	r3, r4
 8007706:	db01      	blt.n	800770c <__sfputc_r+0x16>
 8007708:	290a      	cmp	r1, #10
 800770a:	d103      	bne.n	8007714 <__sfputc_r+0x1e>
 800770c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007710:	f000 b932 	b.w	8007978 <__swbuf_r>
 8007714:	6813      	ldr	r3, [r2, #0]
 8007716:	1c58      	adds	r0, r3, #1
 8007718:	6010      	str	r0, [r2, #0]
 800771a:	7019      	strb	r1, [r3, #0]
 800771c:	4608      	mov	r0, r1
 800771e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007722:	4770      	bx	lr

08007724 <__sfputs_r>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	4614      	mov	r4, r2
 800772c:	18d5      	adds	r5, r2, r3
 800772e:	42ac      	cmp	r4, r5
 8007730:	d101      	bne.n	8007736 <__sfputs_r+0x12>
 8007732:	2000      	movs	r0, #0
 8007734:	e007      	b.n	8007746 <__sfputs_r+0x22>
 8007736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773a:	463a      	mov	r2, r7
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff ffda 	bl	80076f6 <__sfputc_r>
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	d1f3      	bne.n	800772e <__sfputs_r+0xa>
 8007746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007748 <_vfiprintf_r>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	460d      	mov	r5, r1
 800774e:	b09d      	sub	sp, #116	@ 0x74
 8007750:	4614      	mov	r4, r2
 8007752:	4698      	mov	r8, r3
 8007754:	4606      	mov	r6, r0
 8007756:	b118      	cbz	r0, 8007760 <_vfiprintf_r+0x18>
 8007758:	6a03      	ldr	r3, [r0, #32]
 800775a:	b90b      	cbnz	r3, 8007760 <_vfiprintf_r+0x18>
 800775c:	f7fe fac8 	bl	8005cf0 <__sinit>
 8007760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007762:	07d9      	lsls	r1, r3, #31
 8007764:	d405      	bmi.n	8007772 <_vfiprintf_r+0x2a>
 8007766:	89ab      	ldrh	r3, [r5, #12]
 8007768:	059a      	lsls	r2, r3, #22
 800776a:	d402      	bmi.n	8007772 <_vfiprintf_r+0x2a>
 800776c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800776e:	f7fe fbb6 	bl	8005ede <__retarget_lock_acquire_recursive>
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	071b      	lsls	r3, r3, #28
 8007776:	d501      	bpl.n	800777c <_vfiprintf_r+0x34>
 8007778:	692b      	ldr	r3, [r5, #16]
 800777a:	b99b      	cbnz	r3, 80077a4 <_vfiprintf_r+0x5c>
 800777c:	4629      	mov	r1, r5
 800777e:	4630      	mov	r0, r6
 8007780:	f000 f938 	bl	80079f4 <__swsetup_r>
 8007784:	b170      	cbz	r0, 80077a4 <_vfiprintf_r+0x5c>
 8007786:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007788:	07dc      	lsls	r4, r3, #31
 800778a:	d504      	bpl.n	8007796 <_vfiprintf_r+0x4e>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	b01d      	add	sp, #116	@ 0x74
 8007792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	0598      	lsls	r0, r3, #22
 800779a:	d4f7      	bmi.n	800778c <_vfiprintf_r+0x44>
 800779c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800779e:	f7fe fb9f 	bl	8005ee0 <__retarget_lock_release_recursive>
 80077a2:	e7f3      	b.n	800778c <_vfiprintf_r+0x44>
 80077a4:	2300      	movs	r3, #0
 80077a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077a8:	2320      	movs	r3, #32
 80077aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80077b2:	2330      	movs	r3, #48	@ 0x30
 80077b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007964 <_vfiprintf_r+0x21c>
 80077b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077bc:	f04f 0901 	mov.w	r9, #1
 80077c0:	4623      	mov	r3, r4
 80077c2:	469a      	mov	sl, r3
 80077c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077c8:	b10a      	cbz	r2, 80077ce <_vfiprintf_r+0x86>
 80077ca:	2a25      	cmp	r2, #37	@ 0x25
 80077cc:	d1f9      	bne.n	80077c2 <_vfiprintf_r+0x7a>
 80077ce:	ebba 0b04 	subs.w	fp, sl, r4
 80077d2:	d00b      	beq.n	80077ec <_vfiprintf_r+0xa4>
 80077d4:	465b      	mov	r3, fp
 80077d6:	4622      	mov	r2, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ffa2 	bl	8007724 <__sfputs_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	f000 80a7 	beq.w	8007934 <_vfiprintf_r+0x1ec>
 80077e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077e8:	445a      	add	r2, fp
 80077ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80077ec:	f89a 3000 	ldrb.w	r3, [sl]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 809f 	beq.w	8007934 <_vfiprintf_r+0x1ec>
 80077f6:	2300      	movs	r3, #0
 80077f8:	f04f 32ff 	mov.w	r2, #4294967295
 80077fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007800:	f10a 0a01 	add.w	sl, sl, #1
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	9307      	str	r3, [sp, #28]
 8007808:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800780c:	931a      	str	r3, [sp, #104]	@ 0x68
 800780e:	4654      	mov	r4, sl
 8007810:	2205      	movs	r2, #5
 8007812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007816:	4853      	ldr	r0, [pc, #332]	@ (8007964 <_vfiprintf_r+0x21c>)
 8007818:	f7f8 fcfa 	bl	8000210 <memchr>
 800781c:	9a04      	ldr	r2, [sp, #16]
 800781e:	b9d8      	cbnz	r0, 8007858 <_vfiprintf_r+0x110>
 8007820:	06d1      	lsls	r1, r2, #27
 8007822:	bf44      	itt	mi
 8007824:	2320      	movmi	r3, #32
 8007826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800782a:	0713      	lsls	r3, r2, #28
 800782c:	bf44      	itt	mi
 800782e:	232b      	movmi	r3, #43	@ 0x2b
 8007830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007834:	f89a 3000 	ldrb.w	r3, [sl]
 8007838:	2b2a      	cmp	r3, #42	@ 0x2a
 800783a:	d015      	beq.n	8007868 <_vfiprintf_r+0x120>
 800783c:	9a07      	ldr	r2, [sp, #28]
 800783e:	4654      	mov	r4, sl
 8007840:	2000      	movs	r0, #0
 8007842:	f04f 0c0a 	mov.w	ip, #10
 8007846:	4621      	mov	r1, r4
 8007848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800784c:	3b30      	subs	r3, #48	@ 0x30
 800784e:	2b09      	cmp	r3, #9
 8007850:	d94b      	bls.n	80078ea <_vfiprintf_r+0x1a2>
 8007852:	b1b0      	cbz	r0, 8007882 <_vfiprintf_r+0x13a>
 8007854:	9207      	str	r2, [sp, #28]
 8007856:	e014      	b.n	8007882 <_vfiprintf_r+0x13a>
 8007858:	eba0 0308 	sub.w	r3, r0, r8
 800785c:	fa09 f303 	lsl.w	r3, r9, r3
 8007860:	4313      	orrs	r3, r2
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	46a2      	mov	sl, r4
 8007866:	e7d2      	b.n	800780e <_vfiprintf_r+0xc6>
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	1d19      	adds	r1, r3, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	9103      	str	r1, [sp, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	bfbb      	ittet	lt
 8007874:	425b      	neglt	r3, r3
 8007876:	f042 0202 	orrlt.w	r2, r2, #2
 800787a:	9307      	strge	r3, [sp, #28]
 800787c:	9307      	strlt	r3, [sp, #28]
 800787e:	bfb8      	it	lt
 8007880:	9204      	strlt	r2, [sp, #16]
 8007882:	7823      	ldrb	r3, [r4, #0]
 8007884:	2b2e      	cmp	r3, #46	@ 0x2e
 8007886:	d10a      	bne.n	800789e <_vfiprintf_r+0x156>
 8007888:	7863      	ldrb	r3, [r4, #1]
 800788a:	2b2a      	cmp	r3, #42	@ 0x2a
 800788c:	d132      	bne.n	80078f4 <_vfiprintf_r+0x1ac>
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	1d1a      	adds	r2, r3, #4
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	9203      	str	r2, [sp, #12]
 8007896:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800789a:	3402      	adds	r4, #2
 800789c:	9305      	str	r3, [sp, #20]
 800789e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007974 <_vfiprintf_r+0x22c>
 80078a2:	7821      	ldrb	r1, [r4, #0]
 80078a4:	2203      	movs	r2, #3
 80078a6:	4650      	mov	r0, sl
 80078a8:	f7f8 fcb2 	bl	8000210 <memchr>
 80078ac:	b138      	cbz	r0, 80078be <_vfiprintf_r+0x176>
 80078ae:	9b04      	ldr	r3, [sp, #16]
 80078b0:	eba0 000a 	sub.w	r0, r0, sl
 80078b4:	2240      	movs	r2, #64	@ 0x40
 80078b6:	4082      	lsls	r2, r0
 80078b8:	4313      	orrs	r3, r2
 80078ba:	3401      	adds	r4, #1
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c2:	4829      	ldr	r0, [pc, #164]	@ (8007968 <_vfiprintf_r+0x220>)
 80078c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078c8:	2206      	movs	r2, #6
 80078ca:	f7f8 fca1 	bl	8000210 <memchr>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d03f      	beq.n	8007952 <_vfiprintf_r+0x20a>
 80078d2:	4b26      	ldr	r3, [pc, #152]	@ (800796c <_vfiprintf_r+0x224>)
 80078d4:	bb1b      	cbnz	r3, 800791e <_vfiprintf_r+0x1d6>
 80078d6:	9b03      	ldr	r3, [sp, #12]
 80078d8:	3307      	adds	r3, #7
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	3308      	adds	r3, #8
 80078e0:	9303      	str	r3, [sp, #12]
 80078e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e4:	443b      	add	r3, r7
 80078e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e8:	e76a      	b.n	80077c0 <_vfiprintf_r+0x78>
 80078ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ee:	460c      	mov	r4, r1
 80078f0:	2001      	movs	r0, #1
 80078f2:	e7a8      	b.n	8007846 <_vfiprintf_r+0xfe>
 80078f4:	2300      	movs	r3, #0
 80078f6:	3401      	adds	r4, #1
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	4619      	mov	r1, r3
 80078fc:	f04f 0c0a 	mov.w	ip, #10
 8007900:	4620      	mov	r0, r4
 8007902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007906:	3a30      	subs	r2, #48	@ 0x30
 8007908:	2a09      	cmp	r2, #9
 800790a:	d903      	bls.n	8007914 <_vfiprintf_r+0x1cc>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0c6      	beq.n	800789e <_vfiprintf_r+0x156>
 8007910:	9105      	str	r1, [sp, #20]
 8007912:	e7c4      	b.n	800789e <_vfiprintf_r+0x156>
 8007914:	fb0c 2101 	mla	r1, ip, r1, r2
 8007918:	4604      	mov	r4, r0
 800791a:	2301      	movs	r3, #1
 800791c:	e7f0      	b.n	8007900 <_vfiprintf_r+0x1b8>
 800791e:	ab03      	add	r3, sp, #12
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	462a      	mov	r2, r5
 8007924:	4b12      	ldr	r3, [pc, #72]	@ (8007970 <_vfiprintf_r+0x228>)
 8007926:	a904      	add	r1, sp, #16
 8007928:	4630      	mov	r0, r6
 800792a:	f7fd fd9f 	bl	800546c <_printf_float>
 800792e:	4607      	mov	r7, r0
 8007930:	1c78      	adds	r0, r7, #1
 8007932:	d1d6      	bne.n	80078e2 <_vfiprintf_r+0x19a>
 8007934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007936:	07d9      	lsls	r1, r3, #31
 8007938:	d405      	bmi.n	8007946 <_vfiprintf_r+0x1fe>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	059a      	lsls	r2, r3, #22
 800793e:	d402      	bmi.n	8007946 <_vfiprintf_r+0x1fe>
 8007940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007942:	f7fe facd 	bl	8005ee0 <__retarget_lock_release_recursive>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	065b      	lsls	r3, r3, #25
 800794a:	f53f af1f 	bmi.w	800778c <_vfiprintf_r+0x44>
 800794e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007950:	e71e      	b.n	8007790 <_vfiprintf_r+0x48>
 8007952:	ab03      	add	r3, sp, #12
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	462a      	mov	r2, r5
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <_vfiprintf_r+0x228>)
 800795a:	a904      	add	r1, sp, #16
 800795c:	4630      	mov	r0, r6
 800795e:	f7fe f81d 	bl	800599c <_printf_i>
 8007962:	e7e4      	b.n	800792e <_vfiprintf_r+0x1e6>
 8007964:	08008030 	.word	0x08008030
 8007968:	0800803a 	.word	0x0800803a
 800796c:	0800546d 	.word	0x0800546d
 8007970:	08007725 	.word	0x08007725
 8007974:	08008036 	.word	0x08008036

08007978 <__swbuf_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	460e      	mov	r6, r1
 800797c:	4614      	mov	r4, r2
 800797e:	4605      	mov	r5, r0
 8007980:	b118      	cbz	r0, 800798a <__swbuf_r+0x12>
 8007982:	6a03      	ldr	r3, [r0, #32]
 8007984:	b90b      	cbnz	r3, 800798a <__swbuf_r+0x12>
 8007986:	f7fe f9b3 	bl	8005cf0 <__sinit>
 800798a:	69a3      	ldr	r3, [r4, #24]
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	071a      	lsls	r2, r3, #28
 8007992:	d501      	bpl.n	8007998 <__swbuf_r+0x20>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	b943      	cbnz	r3, 80079aa <__swbuf_r+0x32>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f82a 	bl	80079f4 <__swsetup_r>
 80079a0:	b118      	cbz	r0, 80079aa <__swbuf_r+0x32>
 80079a2:	f04f 37ff 	mov.w	r7, #4294967295
 80079a6:	4638      	mov	r0, r7
 80079a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	6922      	ldr	r2, [r4, #16]
 80079ae:	1a98      	subs	r0, r3, r2
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	b2f6      	uxtb	r6, r6
 80079b4:	4283      	cmp	r3, r0
 80079b6:	4637      	mov	r7, r6
 80079b8:	dc05      	bgt.n	80079c6 <__swbuf_r+0x4e>
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f7ff fde9 	bl	8007594 <_fflush_r>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d1ed      	bne.n	80079a2 <__swbuf_r+0x2a>
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	6022      	str	r2, [r4, #0]
 80079d2:	701e      	strb	r6, [r3, #0]
 80079d4:	6962      	ldr	r2, [r4, #20]
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	429a      	cmp	r2, r3
 80079da:	d004      	beq.n	80079e6 <__swbuf_r+0x6e>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	07db      	lsls	r3, r3, #31
 80079e0:	d5e1      	bpl.n	80079a6 <__swbuf_r+0x2e>
 80079e2:	2e0a      	cmp	r6, #10
 80079e4:	d1df      	bne.n	80079a6 <__swbuf_r+0x2e>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f7ff fdd3 	bl	8007594 <_fflush_r>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d0d9      	beq.n	80079a6 <__swbuf_r+0x2e>
 80079f2:	e7d6      	b.n	80079a2 <__swbuf_r+0x2a>

080079f4 <__swsetup_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4b29      	ldr	r3, [pc, #164]	@ (8007a9c <__swsetup_r+0xa8>)
 80079f8:	4605      	mov	r5, r0
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	460c      	mov	r4, r1
 80079fe:	b118      	cbz	r0, 8007a08 <__swsetup_r+0x14>
 8007a00:	6a03      	ldr	r3, [r0, #32]
 8007a02:	b90b      	cbnz	r3, 8007a08 <__swsetup_r+0x14>
 8007a04:	f7fe f974 	bl	8005cf0 <__sinit>
 8007a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0c:	0719      	lsls	r1, r3, #28
 8007a0e:	d422      	bmi.n	8007a56 <__swsetup_r+0x62>
 8007a10:	06da      	lsls	r2, r3, #27
 8007a12:	d407      	bmi.n	8007a24 <__swsetup_r+0x30>
 8007a14:	2209      	movs	r2, #9
 8007a16:	602a      	str	r2, [r5, #0]
 8007a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a22:	e033      	b.n	8007a8c <__swsetup_r+0x98>
 8007a24:	0758      	lsls	r0, r3, #29
 8007a26:	d512      	bpl.n	8007a4e <__swsetup_r+0x5a>
 8007a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a2a:	b141      	cbz	r1, 8007a3e <__swsetup_r+0x4a>
 8007a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a30:	4299      	cmp	r1, r3
 8007a32:	d002      	beq.n	8007a3a <__swsetup_r+0x46>
 8007a34:	4628      	mov	r0, r5
 8007a36:	f7ff f8af 	bl	8006b98 <_free_r>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	2300      	movs	r3, #0
 8007a48:	6063      	str	r3, [r4, #4]
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f043 0308 	orr.w	r3, r3, #8
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	b94b      	cbnz	r3, 8007a6e <__swsetup_r+0x7a>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a64:	d003      	beq.n	8007a6e <__swsetup_r+0x7a>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f883 	bl	8007b74 <__smakebuf_r>
 8007a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a72:	f013 0201 	ands.w	r2, r3, #1
 8007a76:	d00a      	beq.n	8007a8e <__swsetup_r+0x9a>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	60a2      	str	r2, [r4, #8]
 8007a7c:	6962      	ldr	r2, [r4, #20]
 8007a7e:	4252      	negs	r2, r2
 8007a80:	61a2      	str	r2, [r4, #24]
 8007a82:	6922      	ldr	r2, [r4, #16]
 8007a84:	b942      	cbnz	r2, 8007a98 <__swsetup_r+0xa4>
 8007a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a8a:	d1c5      	bne.n	8007a18 <__swsetup_r+0x24>
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	0799      	lsls	r1, r3, #30
 8007a90:	bf58      	it	pl
 8007a92:	6962      	ldrpl	r2, [r4, #20]
 8007a94:	60a2      	str	r2, [r4, #8]
 8007a96:	e7f4      	b.n	8007a82 <__swsetup_r+0x8e>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e7f7      	b.n	8007a8c <__swsetup_r+0x98>
 8007a9c:	20000028 	.word	0x20000028

08007aa0 <_raise_r>:
 8007aa0:	291f      	cmp	r1, #31
 8007aa2:	b538      	push	{r3, r4, r5, lr}
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	d904      	bls.n	8007ab4 <_raise_r+0x14>
 8007aaa:	2316      	movs	r3, #22
 8007aac:	6003      	str	r3, [r0, #0]
 8007aae:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ab6:	b112      	cbz	r2, 8007abe <_raise_r+0x1e>
 8007ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007abc:	b94b      	cbnz	r3, 8007ad2 <_raise_r+0x32>
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f830 	bl	8007b24 <_getpid_r>
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	4628      	mov	r0, r5
 8007aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ace:	f000 b817 	b.w	8007b00 <_kill_r>
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d00a      	beq.n	8007aec <_raise_r+0x4c>
 8007ad6:	1c59      	adds	r1, r3, #1
 8007ad8:	d103      	bne.n	8007ae2 <_raise_r+0x42>
 8007ada:	2316      	movs	r3, #22
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7e7      	b.n	8007ab2 <_raise_r+0x12>
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4798      	blx	r3
 8007aec:	2000      	movs	r0, #0
 8007aee:	e7e0      	b.n	8007ab2 <_raise_r+0x12>

08007af0 <raise>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	@ (8007afc <raise+0xc>)
 8007af2:	4601      	mov	r1, r0
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f7ff bfd3 	b.w	8007aa0 <_raise_r>
 8007afa:	bf00      	nop
 8007afc:	20000028 	.word	0x20000028

08007b00 <_kill_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d07      	ldr	r5, [pc, #28]	@ (8007b20 <_kill_r+0x20>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	f7fa f8d9 	bl	8001cc4 <_kill>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	d102      	bne.n	8007b1c <_kill_r+0x1c>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	b103      	cbz	r3, 8007b1c <_kill_r+0x1c>
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000534 	.word	0x20000534

08007b24 <_getpid_r>:
 8007b24:	f7fa b8c6 	b.w	8001cb4 <_getpid>

08007b28 <__swhatbuf_r>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	2900      	cmp	r1, #0
 8007b32:	b096      	sub	sp, #88	@ 0x58
 8007b34:	4615      	mov	r5, r2
 8007b36:	461e      	mov	r6, r3
 8007b38:	da0d      	bge.n	8007b56 <__swhatbuf_r+0x2e>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b40:	f04f 0100 	mov.w	r1, #0
 8007b44:	bf14      	ite	ne
 8007b46:	2340      	movne	r3, #64	@ 0x40
 8007b48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	6031      	str	r1, [r6, #0]
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	b016      	add	sp, #88	@ 0x58
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	466a      	mov	r2, sp
 8007b58:	f000 f848 	bl	8007bec <_fstat_r>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	dbec      	blt.n	8007b3a <__swhatbuf_r+0x12>
 8007b60:	9901      	ldr	r1, [sp, #4]
 8007b62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b6a:	4259      	negs	r1, r3
 8007b6c:	4159      	adcs	r1, r3
 8007b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b72:	e7eb      	b.n	8007b4c <__swhatbuf_r+0x24>

08007b74 <__smakebuf_r>:
 8007b74:	898b      	ldrh	r3, [r1, #12]
 8007b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b78:	079d      	lsls	r5, r3, #30
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	d507      	bpl.n	8007b90 <__smakebuf_r+0x1c>
 8007b80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	6163      	str	r3, [r4, #20]
 8007b8c:	b003      	add	sp, #12
 8007b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b90:	ab01      	add	r3, sp, #4
 8007b92:	466a      	mov	r2, sp
 8007b94:	f7ff ffc8 	bl	8007b28 <__swhatbuf_r>
 8007b98:	9f00      	ldr	r7, [sp, #0]
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff f86e 	bl	8006c80 <_malloc_r>
 8007ba4:	b948      	cbnz	r0, 8007bba <__smakebuf_r+0x46>
 8007ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007baa:	059a      	lsls	r2, r3, #22
 8007bac:	d4ee      	bmi.n	8007b8c <__smakebuf_r+0x18>
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	f043 0302 	orr.w	r3, r3, #2
 8007bb6:	81a3      	strh	r3, [r4, #12]
 8007bb8:	e7e2      	b.n	8007b80 <__smakebuf_r+0xc>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	6020      	str	r0, [r4, #0]
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bca:	b15b      	cbz	r3, 8007be4 <__smakebuf_r+0x70>
 8007bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f000 f81d 	bl	8007c10 <_isatty_r>
 8007bd6:	b128      	cbz	r0, 8007be4 <__smakebuf_r+0x70>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	431d      	orrs	r5, r3
 8007be8:	81a5      	strh	r5, [r4, #12]
 8007bea:	e7cf      	b.n	8007b8c <__smakebuf_r+0x18>

08007bec <_fstat_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	@ (8007c0c <_fstat_r+0x20>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	f7fa f8c3 	bl	8001d84 <_fstat>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d102      	bne.n	8007c08 <_fstat_r+0x1c>
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	b103      	cbz	r3, 8007c08 <_fstat_r+0x1c>
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000534 	.word	0x20000534

08007c10 <_isatty_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d06      	ldr	r5, [pc, #24]	@ (8007c2c <_isatty_r+0x1c>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	f7fa f8c2 	bl	8001da4 <_isatty>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_isatty_r+0x1a>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_isatty_r+0x1a>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20000534 	.word	0x20000534

08007c30 <fmod>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	ed2d 8b02 	vpush	{d8}
 8007c36:	ec57 6b10 	vmov	r6, r7, d0
 8007c3a:	ec55 4b11 	vmov	r4, r5, d1
 8007c3e:	f000 f825 	bl	8007c8c <__ieee754_fmod>
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	4639      	mov	r1, r7
 8007c4a:	eeb0 8a40 	vmov.f32	s16, s0
 8007c4e:	eef0 8a60 	vmov.f32	s17, s1
 8007c52:	f7f8 ff8b 	bl	8000b6c <__aeabi_dcmpun>
 8007c56:	b990      	cbnz	r0, 8007c7e <fmod+0x4e>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f7f8 ff52 	bl	8000b08 <__aeabi_dcmpeq>
 8007c64:	b158      	cbz	r0, 8007c7e <fmod+0x4e>
 8007c66:	f7fe f90f 	bl	8005e88 <__errno>
 8007c6a:	2321      	movs	r3, #33	@ 0x21
 8007c6c:	6003      	str	r3, [r0, #0]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2300      	movs	r3, #0
 8007c72:	4610      	mov	r0, r2
 8007c74:	4619      	mov	r1, r3
 8007c76:	f7f8 fe09 	bl	800088c <__aeabi_ddiv>
 8007c7a:	ec41 0b18 	vmov	d8, r0, r1
 8007c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8007c82:	eef0 0a68 	vmov.f32	s1, s17
 8007c86:	ecbd 8b02 	vpop	{d8}
 8007c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c8c <__ieee754_fmod>:
 8007c8c:	ec53 2b11 	vmov	r2, r3, d1
 8007c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 8007c98:	ea52 0408 	orrs.w	r4, r2, r8
 8007c9c:	ec51 0b10 	vmov	r0, r1, d0
 8007ca0:	461e      	mov	r6, r3
 8007ca2:	4696      	mov	lr, r2
 8007ca4:	4694      	mov	ip, r2
 8007ca6:	d00c      	beq.n	8007cc2 <__ieee754_fmod+0x36>
 8007ca8:	4d76      	ldr	r5, [pc, #472]	@ (8007e84 <__ieee754_fmod+0x1f8>)
 8007caa:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 8007cae:	45a9      	cmp	r9, r5
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	d806      	bhi.n	8007cc2 <__ieee754_fmod+0x36>
 8007cb4:	4255      	negs	r5, r2
 8007cb6:	4f74      	ldr	r7, [pc, #464]	@ (8007e88 <__ieee754_fmod+0x1fc>)
 8007cb8:	4315      	orrs	r5, r2
 8007cba:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 8007cbe:	42bd      	cmp	r5, r7
 8007cc0:	d909      	bls.n	8007cd6 <__ieee754_fmod+0x4a>
 8007cc2:	f7f8 fcb9 	bl	8000638 <__aeabi_dmul>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	f7f8 fddf 	bl	800088c <__aeabi_ddiv>
 8007cce:	ec41 0b10 	vmov	d0, r0, r1
 8007cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd6:	45c1      	cmp	r9, r8
 8007cd8:	4682      	mov	sl, r0
 8007cda:	4607      	mov	r7, r0
 8007cdc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007ce0:	dc09      	bgt.n	8007cf6 <__ieee754_fmod+0x6a>
 8007ce2:	dbf4      	blt.n	8007cce <__ieee754_fmod+0x42>
 8007ce4:	4282      	cmp	r2, r0
 8007ce6:	d8f2      	bhi.n	8007cce <__ieee754_fmod+0x42>
 8007ce8:	d105      	bne.n	8007cf6 <__ieee754_fmod+0x6a>
 8007cea:	4b68      	ldr	r3, [pc, #416]	@ (8007e8c <__ieee754_fmod+0x200>)
 8007cec:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8007cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cf4:	e7eb      	b.n	8007cce <__ieee754_fmod+0x42>
 8007cf6:	4964      	ldr	r1, [pc, #400]	@ (8007e88 <__ieee754_fmod+0x1fc>)
 8007cf8:	420c      	tst	r4, r1
 8007cfa:	d148      	bne.n	8007d8e <__ieee754_fmod+0x102>
 8007cfc:	f1b9 0f00 	cmp.w	r9, #0
 8007d00:	d13d      	bne.n	8007d7e <__ieee754_fmod+0xf2>
 8007d02:	4a63      	ldr	r2, [pc, #396]	@ (8007e90 <__ieee754_fmod+0x204>)
 8007d04:	4653      	mov	r3, sl
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dc36      	bgt.n	8007d78 <__ieee754_fmod+0xec>
 8007d0a:	420e      	tst	r6, r1
 8007d0c:	d14f      	bne.n	8007dae <__ieee754_fmod+0x122>
 8007d0e:	f1b8 0f00 	cmp.w	r8, #0
 8007d12:	d144      	bne.n	8007d9e <__ieee754_fmod+0x112>
 8007d14:	4b5e      	ldr	r3, [pc, #376]	@ (8007e90 <__ieee754_fmod+0x204>)
 8007d16:	4671      	mov	r1, lr
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	dc3d      	bgt.n	8007d98 <__ieee754_fmod+0x10c>
 8007d1c:	485d      	ldr	r0, [pc, #372]	@ (8007e94 <__ieee754_fmod+0x208>)
 8007d1e:	4282      	cmp	r2, r0
 8007d20:	db4a      	blt.n	8007db8 <__ieee754_fmod+0x12c>
 8007d22:	f3c4 0113 	ubfx	r1, r4, #0, #20
 8007d26:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8007d2a:	485a      	ldr	r0, [pc, #360]	@ (8007e94 <__ieee754_fmod+0x208>)
 8007d2c:	4283      	cmp	r3, r0
 8007d2e:	db57      	blt.n	8007de0 <__ieee754_fmod+0x154>
 8007d30:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007d34:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8007d38:	1ad0      	subs	r0, r2, r3
 8007d3a:	1b8a      	subs	r2, r1, r6
 8007d3c:	eba7 040c 	sub.w	r4, r7, ip
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d162      	bne.n	8007e0a <__ieee754_fmod+0x17e>
 8007d44:	4567      	cmp	r7, ip
 8007d46:	bf38      	it	cc
 8007d48:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	bfbc      	itt	lt
 8007d50:	463c      	movlt	r4, r7
 8007d52:	460a      	movlt	r2, r1
 8007d54:	ea52 0104 	orrs.w	r1, r2, r4
 8007d58:	d0c7      	beq.n	8007cea <__ieee754_fmod+0x5e>
 8007d5a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8007d5e:	db69      	blt.n	8007e34 <__ieee754_fmod+0x1a8>
 8007d60:	494c      	ldr	r1, [pc, #304]	@ (8007e94 <__ieee754_fmod+0x208>)
 8007d62:	428b      	cmp	r3, r1
 8007d64:	db6c      	blt.n	8007e40 <__ieee754_fmod+0x1b4>
 8007d66:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8007d6a:	432a      	orrs	r2, r5
 8007d6c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8007d70:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 8007d74:	4620      	mov	r0, r4
 8007d76:	e7aa      	b.n	8007cce <__ieee754_fmod+0x42>
 8007d78:	3a01      	subs	r2, #1
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	e7c3      	b.n	8007d06 <__ieee754_fmod+0x7a>
 8007d7e:	4a45      	ldr	r2, [pc, #276]	@ (8007e94 <__ieee754_fmod+0x208>)
 8007d80:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	ddc0      	ble.n	8007d0a <__ieee754_fmod+0x7e>
 8007d88:	3a01      	subs	r2, #1
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	e7fa      	b.n	8007d84 <__ieee754_fmod+0xf8>
 8007d8e:	ea4f 5229 	mov.w	r2, r9, asr #20
 8007d92:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007d96:	e7b8      	b.n	8007d0a <__ieee754_fmod+0x7e>
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	0049      	lsls	r1, r1, #1
 8007d9c:	e7bc      	b.n	8007d18 <__ieee754_fmod+0x8c>
 8007d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e94 <__ieee754_fmod+0x208>)
 8007da0:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8007da4:	2900      	cmp	r1, #0
 8007da6:	ddb9      	ble.n	8007d1c <__ieee754_fmod+0x90>
 8007da8:	3b01      	subs	r3, #1
 8007daa:	0049      	lsls	r1, r1, #1
 8007dac:	e7fa      	b.n	8007da4 <__ieee754_fmod+0x118>
 8007dae:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007db2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007db6:	e7b1      	b.n	8007d1c <__ieee754_fmod+0x90>
 8007db8:	1a80      	subs	r0, r0, r2
 8007dba:	281f      	cmp	r0, #31
 8007dbc:	dc0a      	bgt.n	8007dd4 <__ieee754_fmod+0x148>
 8007dbe:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 8007dc2:	fa09 f900 	lsl.w	r9, r9, r0
 8007dc6:	fa2a f101 	lsr.w	r1, sl, r1
 8007dca:	ea41 0109 	orr.w	r1, r1, r9
 8007dce:	fa0a f700 	lsl.w	r7, sl, r0
 8007dd2:	e7aa      	b.n	8007d2a <__ieee754_fmod+0x9e>
 8007dd4:	4930      	ldr	r1, [pc, #192]	@ (8007e98 <__ieee754_fmod+0x20c>)
 8007dd6:	1a89      	subs	r1, r1, r2
 8007dd8:	fa0a f101 	lsl.w	r1, sl, r1
 8007ddc:	2700      	movs	r7, #0
 8007dde:	e7a4      	b.n	8007d2a <__ieee754_fmod+0x9e>
 8007de0:	1ac0      	subs	r0, r0, r3
 8007de2:	281f      	cmp	r0, #31
 8007de4:	dc0a      	bgt.n	8007dfc <__ieee754_fmod+0x170>
 8007de6:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 8007dea:	fa08 f800 	lsl.w	r8, r8, r0
 8007dee:	fa2e f606 	lsr.w	r6, lr, r6
 8007df2:	ea46 0608 	orr.w	r6, r6, r8
 8007df6:	fa0e fc00 	lsl.w	ip, lr, r0
 8007dfa:	e79d      	b.n	8007d38 <__ieee754_fmod+0xac>
 8007dfc:	4e26      	ldr	r6, [pc, #152]	@ (8007e98 <__ieee754_fmod+0x20c>)
 8007dfe:	1af6      	subs	r6, r6, r3
 8007e00:	fa0e f606 	lsl.w	r6, lr, r6
 8007e04:	f04f 0c00 	mov.w	ip, #0
 8007e08:	e796      	b.n	8007d38 <__ieee754_fmod+0xac>
 8007e0a:	4567      	cmp	r7, ip
 8007e0c:	bf38      	it	cc
 8007e0e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	da05      	bge.n	8007e22 <__ieee754_fmod+0x196>
 8007e16:	0ffa      	lsrs	r2, r7, #31
 8007e18:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007e1c:	007f      	lsls	r7, r7, #1
 8007e1e:	3801      	subs	r0, #1
 8007e20:	e78b      	b.n	8007d3a <__ieee754_fmod+0xae>
 8007e22:	ea52 0104 	orrs.w	r1, r2, r4
 8007e26:	f43f af60 	beq.w	8007cea <__ieee754_fmod+0x5e>
 8007e2a:	0fe1      	lsrs	r1, r4, #31
 8007e2c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8007e30:	0067      	lsls	r7, r4, #1
 8007e32:	e7f4      	b.n	8007e1e <__ieee754_fmod+0x192>
 8007e34:	0fe1      	lsrs	r1, r4, #31
 8007e36:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007e3a:	0064      	lsls	r4, r4, #1
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	e78c      	b.n	8007d5a <__ieee754_fmod+0xce>
 8007e40:	1ac9      	subs	r1, r1, r3
 8007e42:	2914      	cmp	r1, #20
 8007e44:	dc0a      	bgt.n	8007e5c <__ieee754_fmod+0x1d0>
 8007e46:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	40cc      	lsrs	r4, r1
 8007e50:	4323      	orrs	r3, r4
 8007e52:	410a      	asrs	r2, r1
 8007e54:	ea42 0105 	orr.w	r1, r2, r5
 8007e58:	4618      	mov	r0, r3
 8007e5a:	e738      	b.n	8007cce <__ieee754_fmod+0x42>
 8007e5c:	291f      	cmp	r1, #31
 8007e5e:	dc07      	bgt.n	8007e70 <__ieee754_fmod+0x1e4>
 8007e60:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8007e64:	40cc      	lsrs	r4, r1
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	4323      	orrs	r3, r4
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	e7f1      	b.n	8007e54 <__ieee754_fmod+0x1c8>
 8007e70:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8007e74:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8007e78:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 8007e7c:	33e2      	adds	r3, #226	@ 0xe2
 8007e7e:	fa42 f303 	asr.w	r3, r2, r3
 8007e82:	e7f3      	b.n	8007e6c <__ieee754_fmod+0x1e0>
 8007e84:	7fefffff 	.word	0x7fefffff
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	08008248 	.word	0x08008248
 8007e90:	fffffbed 	.word	0xfffffbed
 8007e94:	fffffc02 	.word	0xfffffc02
 8007e98:	fffffbe2 	.word	0xfffffbe2

08007e9c <_init>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	bf00      	nop
 8007ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea2:	bc08      	pop	{r3}
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	4770      	bx	lr

08007ea8 <_fini>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	bf00      	nop
 8007eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eae:	bc08      	pop	{r3}
 8007eb0:	469e      	mov	lr, r3
 8007eb2:	4770      	bx	lr
